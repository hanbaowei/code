Vim: Warning: Output is not to a terminal
chdir(/usr/local/share/vim)[?25l[J
fchdir() to previous dir[J
could not source "$VIM/vimrc"[J
chdir(/home/withon)[J
fchdir() to previous dir[J
sourcing "$HOME/.vimrc"[J
line 1: """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[J

line 2: " http://blog.chinaunix.net/uid-23089249-id-2855999.html[J

line 3: """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[J

line 4: " This line should not be removed as it ensures that various options are[J

line 5: " properly set to work with the Vim-related packages available in Debian.[J

line 6: " debian.vim[J

line 7: [J

line 8: " Uncomment the next line to make Vim more Vi-compatible[J

line 9: " NOTE: debian.vim sets 'nocompatible'. Setting 'compatible' changes numerous[J

line 10: " options, so any other options should be set AFTER setting 'compatible'.[J

line 11: set nocompatible[J

line 12: [J

line 13: " Vim5 and later versions support syntax highlighting. Uncommenting the[J

line 14: " following enables syntax highlighting by default.[J

line 15: if has("syntax")[J

line 16:   syntax on            " 语法高亮[J

line 16: so $VIMRUNTIME/syntax/syntax.vim[J

chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 16: sourcing "/usr/local/share/vim/vim80/syntax/syntax.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 04[J

line 4: [J

line 5: " This file is used for ":syntax on".[J

line 6: " It installs the autocommands and starts highlighting for all buffers.[J

line 7: [J

line 8: if !has("syntax")[J

line 9:   finish[J

line 10: endif[J

line 11: [J

line 12: " If Syntax highlighting appears to be on already, turn it off first, so that[J

line 13: " any leftovers are cleared.[J

line 14: if exists("syntax_on") || exists("syntax_manual")[J

line 15:   so <sfile>:p:h/nosyntax.vim[J

line 16: endif[J

line 17: [J

line 18: " Load the Syntax autocommands and set the default methods for highlighting.[J

line 19: runtime syntax/synload.vim[J

Searching for "syntax/synload.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/syntax/synload.vim"[J
Searching for "/usr/local/share/vim/vimfiles/syntax/synload.vim"[J
Searching for "/usr/local/share/vim/vim80/syntax/synload.vim"[J
chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 19: sourcing "/usr/local/share/vim/vim80/syntax/synload.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2016 Nov 04[J

line 4: [J

line 5: " This file sets up for syntax highlighting.[J

line 6: " It is loaded from "syntax.vim" and "manual.vim".[J

line 7: " 1. Set the default highlight groups.[J

line 8: " 2. Install Syntax autocommands for all the available syntax files.[J

line 9: [J

line 10: if !has("syntax")[J

line 11:   finish[J

line 12: endif[J

line 13: [J

line 14: " let others know that syntax has been switched on[J

line 15: let syntax_on = 1[J

line 16: [J

line 17: " Set the default highlighting colors.  Use a color scheme if specified.[J

line 18: if exists("colors_name")[J

line 19:   exe "colors " . colors_name[J

line 20: else[J

line 21:   runtime! syntax/syncolor.vim[J

Searching for "syntax/syncolor.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 21: sourcing "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 44: hi Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 45: hi Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 46: hi Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 47: hi Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 48: hi Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 49: hi PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 50: hi Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 51: hi Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 52: hi Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/local/share/vim/vim80/syntax/syncolor.vim[J
continuing in /usr/local/share/vim/vim80/syntax/synload.vim[J
Searching for "/usr/local/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/home/withon/.vim/after/syntax/syncolor.vim"[J
line 22: endif[J

line 23: [J

line 24: " Line continuation is used here, remove 'C' from 'cpoptions'[J

line 25: let s:cpo_save = &cpo[J

line 26: set cpo&vim[J

line 27: [J

line 28: " First remove all old syntax autocommands.[J

line 29: au! Syntax[J

line 30: [J

line 31: au Syntax *^I^Icall s:SynSet()[J

line 32: [J

line 33: fun! s:SynSet()[J

line 61: [J

line 62: [J

line 63: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)[J

line 68: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif[J

line 69: [J

line 70: [J

line 71: " Source the user-specified syntax highlighting file[J

line 72: if exists("mysyntaxfile")[J

line 73:   let s:fname = expand(mysyntaxfile)[J

line 74:   if filereadable(s:fname)[J

line 75:     execute "source " . fnameescape(s:fname)[J

line 76:   endif[J

line 77: endif[J

line 78: [J

line 79: " Restore 'cpoptions'[J

line 80: let &cpo = s:cpo_save[J

line 81: unlet s:cpo_save[J

finished sourcing /usr/local/share/vim/vim80/syntax/synload.vim[J
continuing in /usr/local/share/vim/vim80/syntax/syntax.vim[J
line 20: [J

line 21: " Load the FileType autocommands if not done yet.[J

line 22: if exists("did_load_filetypes")[J

line 23:   let s:did_ft = 1[J

line 24: else[J

line 25:   filetype on[J

Searching for "filetype.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/filetype.vim"[J
Searching for "/usr/local/share/vim/vimfiles/filetype.vim"[J
Searching for "/usr/local/share/vim/vim80/filetype.vim"[J
chdir(/usr/local/share/vim/vim80)[J
fchdir() to previous dir[J
line 25: sourcing "/usr/local/share/vim/vim80/filetype.vim"[J
line 1: " Vim support file to detect file types[J

line 2: "[J

line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 4: " Last Change:^I2017 Nov 21[J

line 5: [J

line 6: " Listen very carefully, I will say this only once[J

line 7: if exists("did_load_filetypes")[J

line 8:   finish[J

line 9: endif[J

line 10: let did_load_filetypes = 1[J

line 11: [J

line 12: " Line continuation is used here, remove 'C' from 'cpoptions'[J

line 13: let s:cpo_save = &cpo[J

line 14: set cpo&vim[J

line 15: [J

line 16: augroup filetypedetect[J

line 17: [J

line 18: " Ignored extensions[J

line 19: if exists("*fnameescape")[J

line 21: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew,?\+.pacsave,?\+.pacnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))[J

line 28: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short[J

line 32: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif[J

line 33: elseif &verbose > 0[J

line 34:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"[J

line 35: endif[J

line 36: [J

line 37: " Pattern used to match file names which should not be inspected.[J

line 38: " Currently finds compressed files.[J

line 39: if !exists("g:ft_ignore_pat")[J

line 40:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'[J

line 41: endif[J

line 42: [J

line 43: " Function used for patterns that end in a star: don't set the filetype if the[J

line 44: " file name matches ft_ignore_pat.[J

line 45: func! s:StarSetf(ft)[J

line 50: [J

line 51: " Vim help file[J

line 52: au BufNewFile,BufRead $VIMRUNTIME/doc/*.txt^Isetf help[J

line 53: [J

line 54: " Abaqus or Trasys[J

line 55: au BufNewFile,BufRead *.inp^I^I^Icall dist#ft#Check_inp()[J

line 56: [J

line 57: " A-A-P recipe[J

line 58: au BufNewFile,BufRead *.aap^I^I^Isetf aap[J

line 59: [J

line 60: " A2ps printing utility[J

line 61: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps[J

line 62: [J

line 63: " ABAB/4[J

line 64: au BufNewFile,BufRead *.abap^I^I^Isetf abap[J

line 65: [J

line 66: " ABC music notation[J

line 67: au BufNewFile,BufRead *.abc^I^I^Isetf abc[J

line 68: [J

line 69: " ABEL[J

line 70: au BufNewFile,BufRead *.abl^I^I^Isetf abel[J

line 71: [J

line 72: " AceDB[J

line 73: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb[J

line 74: [J

line 75: " Ada (83, 9X, 95)[J

line 76: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada[J

line 77: if has("vms")[J

line 78:   au BufNewFile,BufRead *.gpr,*.ada_m,*.adc^Isetf ada[J

line 79: else[J

line 80:   au BufNewFile,BufRead *.gpr^I^I^Isetf ada[J

line 81: endif[J

line 82: [J

line 83: " AHDL[J

line 84: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl[J

line 85: [J

line 86: " AMPL[J

line 87: au BufNewFile,BufRead *.run^I^I^Isetf ampl[J

line 88: [J

line 89: " Ant[J

line 90: au BufNewFile,BufRead build.xml^I^I^Isetf ant[J

line 91: [J

line 92: " Arduino[J

line 93: au BufNewFile,BufRead *.ino,*.pde^I^Isetf arduino[J

line 94: [J

line 95: " Apache style config file[J

line 96: au BufNewFile,BufRead proftpd.conf*^I^Icall s:StarSetf('apachestyle')[J

line 97: [J

line 98: " Apache config file[J

line 99: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache[J

line 100: [J

line 101: " XA65 MOS6510 cross assembler[J

line 102: au BufNewFile,BufRead *.a65^I^I^Isetf a65[J

line 103: [J

line 104: " Applescript[J

line 105: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript[J

line 106: [J

line 107: " Applix ELF[J

line 109: au BufNewFile,BufRead *.am if expand("<afile>") !~? 'Makefile.am\>' | setf elf | endif[J

line 110: [J

line 111: " ALSA configuration[J

line 112: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf[J

line 113: [J

line 114: " Arc Macro Language[J

line 115: au BufNewFile,BufRead *.aml^I^I^Isetf aml[J

line 116: [J

line 117: " APT config file[J

line 118: au BufNewFile,BufRead apt.conf^I^I       setf aptconf[J

line 119: au BufNewFile,BufRead */.aptitude/config       setf aptconf[J

line 120: au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} setf aptconf[J

line 121: [J

line 122: " Arch Inventory file[J

line 123: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch[J

line 124: [J

line 125: " ART*Enterprise (formerly ART-IM)[J

line 126: au BufNewFile,BufRead *.art^I^I^Isetf art[J

line 127: [J

line 128: " AsciiDoc[J

line 129: au BufNewFile,BufRead *.asciidoc,*.adoc^I^Isetf asciidoc[J

line 130: [J

line 131: " ASN.1[J

line 132: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn[J

line 133: [J

line 134: " Active Server Pages (with Visual Basic Script)[J

line 140: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif[J

line 141: [J

line 142: " Active Server Pages (with Perl or Visual Basic Script)[J

line 150: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif[J

line 151: [J

line 152: " Grub (must be before catch *.lst)[J

line 153: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub[J

line 154: [J

line 155: " Assembly (all kinds)[J

line 156: " *.lst is not pure assembly, it has two extra columns (address, byte codes)[J

line 157: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall dist#ft#FTasm()[J

line 158: [J

line 159: " Macro (VAX)[J

line 160: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm[J

line 161: [J

line 162: " Atlas[J

line 163: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas[J

line 164: [J

line 165: " Autoit v3[J

line 166: au BufNewFile,BufRead *.au3^I^I^Isetf autoit[J

line 167: [J

line 168: " Autohotkey[J

line 169: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey[J

line 170: [J

line 171: " Automake[J

line 172: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake[J

line 173: [J

line 174: " Autotest .at files are actually m4[J

line 175: au BufNewFile,BufRead *.at^I^I^Isetf m4[J

line 176: [J

line 177: " Avenue[J

line 178: au BufNewFile,BufRead *.ave^I^I^Isetf ave[J

line 179: [J

line 180: " Awk[J

line 181: au BufNewFile,BufRead *.awk^I^I^Isetf awk[J

line 182: [J

line 183: " B[J

line 184: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b[J

line 185: [J

line 186: " BASIC or Visual Basic[J

line 187: au BufNewFile,BufRead *.bas^I^I^Icall dist#ft#FTVB("basic")[J

line 188: [J

line 189: " Visual Basic Script (close to Visual Basic) or Visual Basic .NET[J

line 190: au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl^Isetf vb[J

line 191: [J

line 192: " IBasic file (similar to QBasic)[J

line 193: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic[J

line 194: [J

line 195: " FreeBasic file (similar to QBasic)[J

line 196: au BufNewFile,BufRead *.fb,*.bi^I^I^Isetf freebasic[J

line 197: [J

line 198: " Batch file for MSDOS.[J

line 199: au BufNewFile,BufRead *.bat,*.sys^I^Isetf dosbatch[J

line 200: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.[J

line 202: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif[J

line 203: [J

line 204: " Batch file for 4DOS[J

line 205: au BufNewFile,BufRead *.btm^I^I^Icall dist#ft#FTbtm()[J

line 206: [J

line 207: " BC calculator[J

line 208: au BufNewFile,BufRead *.bc^I^I^Isetf bc[J

line 209: [J

line 210: " BDF font[J

line 211: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf[J

line 212: [J

line 213: " BibTeX bibliography database file[J

line 214: au BufNewFile,BufRead *.bib^I^I^Isetf bib[J

line 215: [J

line 216: " BibTeX Bibliography Style[J

line 217: au BufNewFile,BufRead *.bst^I^I^Isetf bst[J

line 218: [J

line 219: " BIND configuration[J

line 220: " sudoedit uses namedXXXX.conf[J

line 221: au BufNewFile,BufRead named*.conf,rndc*.conf,rndc*.key^Isetf named[J

line 222: [J

line 223: " BIND zone[J

line 224: au BufNewFile,BufRead named.root^I^Isetf bindzone[J

line 225: au BufNewFile,BufRead *.db^I^I^Icall dist#ft#BindzoneCheck('')[J

line 226: [J

line 227: " Blank[J

line 228: au BufNewFile,BufRead *.bl^I^I^Isetf blank[J

line 229: [J

line 230: " Blkid cache file[J

line 231: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml[J

line 232: [J

line 233: " Bazel (http://bazel.io)[J

line 234: autocmd BufRead,BufNewFile *.bzl,WORKSPACE,BUILD.bazel ^Isetf bzl[J

line 235: if has("fname_case")[J

line 236:   " There is another check for BUILD further below.[J

line 237:   autocmd BufRead,BufNewFile BUILD^I^I^Isetf bzl[J

line 238: endif[J

line 239: [J

line 240: " C or lpc[J

line 241: au BufNewFile,BufRead *.c^I^I^Icall dist#ft#FTlpc()[J

line 242: [J

line 243: " Calendar[J

line 244: au BufNewFile,BufRead calendar^I^I^Isetf calendar[J

line 245: [J

line 246: " C#[J

line 247: au BufNewFile,BufRead *.cs^I^I^Isetf cs[J

line 248: [J

line 249: " CSDL[J

line 250: au BufNewFile,BufRead *.csdl^I^I^Isetf csdl[J

line 251: [J

line 252: " Cabal[J

line 253: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal[J

line 254: [J

line 255: " Cdrdao TOC[J

line 256: au BufNewFile,BufRead *.toc^I^I^Isetf cdrtoc[J

line 257: [J

line 258: " Cdrdao config[J

line 259: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf[J

line 260: [J

line 261: " Cfengine[J

line 262: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine[J

line 263: [J

line 264: " ChaiScript[J

line 265: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript[J

line 266: [J

line 267: " Comshare Dimension Definition Language[J

line 268: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl[J

line 269: [J

line 270: " Conary Recipe[J

line 271: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe[J

line 272: [J

line 273: " Controllable Regex Mutilator[J

line 274: au BufNewFile,BufRead *.crm^I^I^Isetf crm[J

line 275: [J

line 276: " Cyn++[J

line 277: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp[J

line 278: [J

line 279: " Cynlib[J

line 280: " .cc and .cpp files can be C++ or Cynlib.[J

line 282: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif[J

line 284: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif[J

line 285: [J

line 286: " C++[J

line 287: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp[J

line 288: if has("fname_case")[J

line 289:   au BufNewFile,BufRead *.C,*.H setf cpp[J

line 290: endif[J

line 291: [J

line 292: " .h files can be C, Ch C++, ObjC or ObjC++.[J

line 293: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is[J

line 294: " detected automatically.[J

line 295: au BufNewFile,BufRead *.h^I^I^Icall dist#ft#FTheader()[J

line 296: [J

line 297: " Ch (CHscript)[J

line 298: au BufNewFile,BufRead *.chf^I^I^Isetf ch[J

line 299: [J

line 300: " TLH files are C++ headers generated by Visual C++'s #import from typelibs[J

line 301: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp[J

line 302: [J

line 303: " Cascading Style Sheets[J

line 304: au BufNewFile,BufRead *.css^I^I^Isetf css[J

line 305: [J

line 306: " Century Term Command Scripts (*.cmd too)[J

line 307: au BufNewFile,BufRead *.con^I^I^Isetf cterm[J

line 308: [J

line 309: " Changelog[J

line 311: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch^Isetf debchangelog[J

line 312: [J

line 318: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif[J

line 319: [J

line 323: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif[J

line 324: [J

line 325: " CHILL[J

line 326: au BufNewFile,BufRead *..ch^I^I^Isetf chill[J

line 327: [J

line 328: " Changes for WEB and CWEB or CHILL[J

line 329: au BufNewFile,BufRead *.ch^I^I^Icall dist#ft#FTchange()[J

line 330: [J

line 331: " ChordPro[J

line 332: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro[J

line 333: [J

line 334: " Clean[J

line 335: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean[J

line 336: [J

line 337: " Clever[J

line 338: au BufNewFile,BufRead *.eni^I^I^Isetf cl[J

line 339: [J

line 340: " Clever or dtd[J

line 341: au BufNewFile,BufRead *.ent^I^I^Icall dist#ft#FTent()[J

line 342: [J

line 343: " Clipper (or FoxPro; could also be eviews)[J

line 349: au BufNewFile,BufRead *.prg if exists("g:filetype_prg") |   exe "setf " . g:filetype_prg | else |   setf clipper | endif[J

line 350: [J

line 351: " Clojure[J

line 352: au BufNewFile,BufRead *.clj,*.cljs,*.cljx,*.cljc^I^Isetf clojure[J

line 353: [J

line 354: " Cmake[J

line 355: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake[J

line 356: [J

line 357: " Cmusrc[J

line 358: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc[J

line 359: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc[J

line 360: [J

line 361: " Cobol[J

line 362: au BufNewFile,BufRead *.cbl,*.cob,*.lib^Isetf cobol[J

line 363: "   cobol or zope form controller python script? (heuristic)[J

line 369: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif[J

line 370: [J

line 371: " Coco/R[J

line 372: au BufNewFile,BufRead *.atg^I^I^Isetf coco[J

line 373: [J

line 374: " Cold Fusion[J

line 375: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf[J

line 376: [J

line 377: " Configure scripts[J

line 378: au BufNewFile,BufRead configure.in,configure.ac setf config[J

line 379: [J

line 380: " CUDA  Cumpute Unified Device Architecture[J

line 381: au BufNewFile,BufRead *.cu^I^I^Isetf cuda[J

line 382: [J

line 383: " Dockerfile[J

line 384: au BufNewFile,BufRead Dockerfile,*.Dockerfile^Isetf dockerfile[J

line 385: [J

line 386: " WildPackets EtherPeek Decoder[J

line 387: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd[J

line 388: [J

line 389: " Enlightenment configuration files[J

line 390: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c[J

line 391: [J

line 392: " Eterm[J

line 393: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm[J

line 394: [J

line 395: " Euphoria 3 or 4[J

line 396: au BufNewFile,BufRead *.eu,*.ew,*.ex,*.exu,*.exw  call dist#ft#EuphoriaCheck()[J

line 397: if has("fname_case")[J

line 398:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call dist#ft#EuphoriaCheck()[J

line 399: endif[J

line 400: [J

line 401: " Lynx config files[J

line 402: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx[J

line 403: [J

line 404: " Quake[J

line 405: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake[J

line 406: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake[J

line 407: [J

line 408: " Quake C[J

line 409: au BufNewFile,BufRead *.qc^I^I^Isetf c[J

line 410: [J

line 411: " Configure files[J

line 412: au BufNewFile,BufRead *.cfg^I^I^Isetf cfg[J

line 413: [J

line 414: " Cucumber[J

line 415: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber[J

line 416: [J

line 417: " Communicating Sequential Processes[J

line 418: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp[J

line 419: [J

line 420: " CUPL logic description and simulation[J

line 421: au BufNewFile,BufRead *.pld^I^I^Isetf cupl[J

line 422: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim[J

line 423: [J

line 424: " Debian Control[J

line 425: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol[J

line 429: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif[J

line 430: [J

line 431: " Debian Sources.list[J

line 432: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources[J

line 433: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources[J

line 434: [J

line 435: " Deny hosts[J

line 436: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts[J

line 437: [J

line 438: " dnsmasq(8) configuration files[J

line 439: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq[J

line 440: [J

line 441: " ROCKLinux package description[J

line 442: au BufNewFile,BufRead *.desc^I^I^Isetf desc[J

line 443: [J

line 444: " the D language or dtrace[J

line 445: au BufNewFile,BufRead *.d^I^I^Icall dist#ft#DtraceCheck()[J

line 446: [J

line 447: " Desktop files[J

line 448: au BufNewFile,BufRead *.desktop,.directory^Isetf desktop[J

line 449: [J

line 450: " Dict config[J

line 451: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf[J

line 452: [J

line 453: " Dictd config[J

line 454: au BufNewFile,BufRead dictd.conf^I^Isetf dictdconf[J

line 455: [J

line 456: " Diff files[J

line 457: au BufNewFile,BufRead *.diff,*.rej^I^Isetf diff[J

line 463: au BufNewFile,BufRead *.patch if getline(1) =~ '^From [0-9a-f]\{40\} Mon Sep 17 00:00:00 2001$' |   setf gitsendemail | else |   setf diff | endif[J

line 464: [J

line 465: " Dircolors[J

line 466: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors[J

line 467: [J

line 468: " Diva (with Skill) or InstallShield[J

line 474: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif[J

line 475: [J

line 476: " DCL (Digital Command Language - vms) or DNS zone file[J

line 477: au BufNewFile,BufRead *.com^I^I^Icall dist#ft#BindzoneCheck('dcl')[J

line 478: [J

line 479: " DOT[J

line 480: au BufNewFile,BufRead *.dot^I^I^Isetf dot[J

line 481: [J

line 482: " Dylan - lid files[J

line 483: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid[J

line 484: [J

line 485: " Dylan - intr files (melange)[J

line 486: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr[J

line 487: [J

line 488: " Dylan[J

line 489: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan[J

line 490: [J

line 491: " Microsoft Module Definition[J

line 492: au BufNewFile,BufRead *.def^I^I^Isetf def[J

line 493: [J

line 494: " Dracula[J

line 495: au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe^Isetf dracula[J

line 496: [J

line 497: " Datascript[J

line 498: au BufNewFile,BufRead *.ds^I^I^Isetf datascript[J

line 499: [J

line 500: " dsl[J

line 501: au BufNewFile,BufRead *.dsl^I^I^Isetf dsl[J

line 502: [J

line 503: " DTD (Document Type Definition for XML)[J

line 504: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd[J

line 505: [J

line 506: " DTS/DSTI (device tree files)[J

line 507: au BufNewFile,BufRead *.dts,*.dtsi^I^Isetf dts[J

line 508: [J

line 509: " EDIF (*.edf,*.edif,*.edn,*.edo) or edn[J

line 510: au BufNewFile,BufRead *.ed\(f\|if\|o\)^I^Isetf edif[J

line 516: au BufNewFile,BufRead *.edn if getline(1) =~ '^\s*(\s*edif\>' |   setf edif | else |   setf clojure | endif[J

line 517: [J

line 518: " EditorConfig (close enough to dosini)[J

line 519: au BufNewFile,BufRead .editorconfig^I^Isetf dosini[J

line 520: [J

line 521: " Embedix Component Description[J

line 522: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd[J

line 523: [J

line 524: " Eiffel or Specman or Euphoria[J

line 525: au BufNewFile,BufRead *.e,*.E^I^I^Icall dist#ft#FTe()[J

line 526: [J

line 527: " Elinks configuration[J

line 528: au BufNewFile,BufRead */etc/elinks.conf,*/.elinks/elinks.conf^Isetf elinks[J

line 529: [J

line 530: " ERicsson LANGuage; Yaws is erlang too[J

line 531: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang[J

line 532: [J

line 533: " Elm Filter Rules file[J

line 534: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt[J

line 535: [J

line 536: " ESMTP rc file[J

line 537: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc[J

line 538: [J

line 539: " ESQL-C[J

line 540: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc[J

line 541: [J

line 542: " Esterel[J

line 543: au BufNewFile,BufRead *.strl^I^I^Isetf esterel[J

line 544: [J

line 545: " Essbase script[J

line 546: au BufNewFile,BufRead *.csc^I^I^Isetf csc[J

line 547: [J

line 548: " Exim[J

line 549: au BufNewFile,BufRead exim.conf^I^I^Isetf exim[J

line 550: [J

line 551: " Expect[J

line 552: au BufNewFile,BufRead *.exp^I^I^Isetf expect[J

line 553: [J

line 554: " Exports[J

line 555: au BufNewFile,BufRead exports^I^I^Isetf exports[J

line 556: [J

line 557: " Falcon[J

line 558: au BufNewFile,BufRead *.fal^I^I^Isetf falcon[J

line 559: [J

line 560: " Fantom[J

line 561: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan[J

line 562: [J

line 563: " Factor[J

line 564: au BufNewFile,BufRead *.factor^I^I^Isetf factor[J

line 565: [J

line 566: " Fetchmail RC file[J

line 567: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail[J

line 568: [J

line 569: " FlexWiki - disabled, because it has side effects when a .wiki file[J

line 570: " is not actually FlexWiki[J

line 571: "au BufNewFile,BufRead *.wiki^I^I^Isetf flexwiki[J

line 572: [J

line 573: " Focus Executable[J

line 574: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec[J

line 575: [J

line 576: " Focus Master file (but not for auto.master)[J

line 577: au BufNewFile,BufRead auto.master^I^Isetf conf[J

line 578: au BufNewFile,BufRead *.mas,*.master^I^Isetf master[J

line 579: [J

line 580: " Forth[J

line 581: au BufNewFile,BufRead *.fs,*.ft^I^I^Isetf forth[J

line 582: [J

line 583: " Reva Forth[J

line 584: au BufNewFile,BufRead *.frt^I^I^Isetf reva[J

line 585: [J

line 586: " Fortran[J

line 587: if has("fname_case")[J

line 588:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^I setf fortran[J

line 589: endif[J

line 590: au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran[J

line 591: [J

line 592: " Framescript[J

line 593: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript[J

line 594: [J

line 595: " FStab[J

line 596: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab[J

line 597: [J

line 598: " GDB command files[J

line 599: au BufNewFile,BufRead .gdbinit^I^I^Isetf gdb[J

line 600: [J

line 601: " GDMO[J

line 602: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo[J

line 603: [J

line 604: " Gedcom[J

line 605: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom[J

line 606: [J

line 607: " Git[J

line 608: au BufNewFile,BufRead COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG setf gitcommit[J

line 609: au BufNewFile,BufRead *.git/config,.gitconfig,.gitmodules setf gitconfig[J

line 610: au BufNewFile,BufRead *.git/modules/*/config^Isetf gitconfig[J

line 611: au BufNewFile,BufRead */.config/git/config^Isetf gitconfig[J

line 612: if !empty($XDG_CONFIG_HOME)[J

line 613:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^Isetf gitconfig[J

line 614: endif[J

line 615: au BufNewFile,BufRead git-rebase-todo^I^Isetf gitrebase[J

line 616: au BufRead,BufNewFile .gitsendemail.msg.??????^Isetf gitsendemail[J

line 620: au BufNewFile,BufRead .msg.[0-9]* if getline(1) =~ '^From.*# This line is ignored.$' |   setf gitsendemail | endif[J

line 624: au BufNewFile,BufRead *.git/* if getline(1) =~ '^\x\{40\}\>\|^ref: ' |   setf git | endif[J

line 625: [J

line 626: " Gkrellmrc[J

line 627: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc[J

line 628: [J

line 629: " GP scripts (2.0 and onward)[J

line 630: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp[J

line 631: [J

line 632: " GPG[J

line 633: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg[J

line 634: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg[J

line 635: au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg[J

line 636: if !empty($GNUPGHOME)[J

line 637:   au BufNewFile,BufRead $GNUPGHOME/options^Isetf gpg[J

line 638:   au BufNewFile,BufRead $GNUPGHOME/gpg.conf^Isetf gpg[J

line 639: endif[J

line 640: [J

line 641: " gnash(1) configuration files[J

line 642: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash[J

line 643: [J

line 644: " Gitolite[J

line 645: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite[J

line 646: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')[J

line 647: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc^Isetf perl[J

line 648: [J

line 649: " Gnuplot scripts[J

line 650: au BufNewFile,BufRead *.gpi^I^I^Isetf gnuplot[J

line 651: [J

line 652: " Go (Google)[J

line 653: au BufNewFile,BufRead *.go^I^I^Isetf go[J

line 654: [J

line 655: " GrADS scripts[J

line 656: au BufNewFile,BufRead *.gs^I^I^Isetf grads[J

line 657: [J

line 658: " Gretl[J

line 659: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl[J

line 660: [J

line 661: " Groovy[J

line 662: au BufNewFile,BufRead *.gradle,*.groovy^I^Isetf groovy[J

line 663: [J

line 664: " GNU Server Pages[J

line 665: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp[J

line 666: [J

line 667: " Group file[J

line 668: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group[J

line 669: [J

line 670: " GTK RC[J

line 671: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc[J

line 672: [J

line 673: " Haml[J

line 674: au BufNewFile,BufRead *.haml^I^I^Isetf haml[J

line 675: [J

line 676: " Hamster Classic | Playground files[J

line 677: au BufNewFile,BufRead *.hsc,*.hsm^I^Isetf hamster[J

line 678: [J

line 679: " Haskell[J

line 680: au BufNewFile,BufRead *.hs,*.hs-boot^I^Isetf haskell[J

line 681: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell[J

line 682: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell[J

line 683: [J

line 684: " Haste[J

line 685: au BufNewFile,BufRead *.ht^I^I^Isetf haste[J

line 686: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc[J

line 687: [J

line 688: " Hercules[J

line 689: au BufNewFile,BufRead *.vc,*.ev,*.sum,*.errsum^Isetf hercules[J

line 690: [J

line 691: " HEX (Intel)[J

line 692: au BufNewFile,BufRead *.hex,*.h32^I^Isetf hex[J

line 693: [J

line 694: " Tilde (must be before HTML)[J

line 695: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde[J

line 696: [J

line 697: " HTML (.shtml and .stm for server side)[J

line 698: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call dist#ft#FThtml()[J

line 699: [J

line 700: " HTML with Ruby - eRuby[J

line 701: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby[J

line 702: [J

line 703: " HTML with M4[J

line 704: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4[J

line 705: [J

line 706: " HTML Cheetah template[J

line 707: au BufNewFile,BufRead *.tmpl^I^I^Isetf htmlcheetah[J

line 708: [J

line 709: " Host config[J

line 710: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf[J

line 711: [J

line 712: " Hosts access[J

line 713: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess[J

line 714: [J

line 715: " Hyper Builder[J

line 716: au BufNewFile,BufRead *.hb^I^I^Isetf hb[J

line 717: [J

line 718: " Httest[J

line 719: au BufNewFile,BufRead *.htt,*.htb^I^Isetf httest[J

line 720: [J

line 721: " Icon[J

line 722: au BufNewFile,BufRead *.icn^I^I^Isetf icon[J

line 723: [J

line 724: " IDL (Interface Description Language)[J

line 725: au BufNewFile,BufRead *.idl^I^I^Icall dist#ft#FTidl()[J

line 726: [J

line 727: " Microsoft IDL (Interface Description Language)  Also *.idl[J

line 728: " MOF = WMI (Windows Management Instrumentation) Managed Object Format[J

line 729: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl[J

line 730: [J

line 731: " Icewm menu[J

line 732: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu[J

line 733: [J

line 734: " Indent profile (must come before IDL *.pro!)[J

line 735: au BufNewFile,BufRead .indent.pro^I^Isetf indent[J

line 736: au BufNewFile,BufRead indent.pro^I^Icall dist#ft#ProtoCheck('indent')[J

line 737: [J

line 738: " IDL (Interactive Data Language)[J

line 739: au BufNewFile,BufRead *.pro^I^I^Icall dist#ft#ProtoCheck('idlang')[J

line 740: [J

line 741: " Indent RC[J

line 742: au BufNewFile,BufRead indentrc^I^I^Isetf indent[J

line 743: [J

line 744: " Inform[J

line 745: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform[J

line 746: [J

line 747: " Initng[J

line 748: au BufNewFile,BufRead */etc/initng/*/*.i,*.ii^Isetf initng[J

line 749: [J

line 750: " Innovation Data Processing[J

line 751: au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c ^Isetf upstreamdat[J

line 752: au BufRead,BufNewFile fdrupstream.log,upstream.log\c,upstream.*.log\c,*.upstream.log\c,UPSTREAM-*.log\c ^Isetf upstreamlog[J

line 753: au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog[J

line 754: au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c ^Isetf usserverlog[J

line 755: au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c ^Isetf usw2kagtlog[J

line 756: [J

line 757: " Ipfilter[J

line 758: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter[J

line 759: [J

line 760: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)[J

line 761: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl[J

line 762: [J

line 763: " .INI file for MSDOS[J

line 764: au BufNewFile,BufRead *.ini^I^I^Isetf dosini[J

line 765: [J

line 766: " SysV Inittab[J

line 767: au BufNewFile,BufRead inittab^I^I^Isetf inittab[J

line 768: [J

line 769: " Inno Setup[J

line 770: au BufNewFile,BufRead *.iss^I^I^Isetf iss[J

line 771: [J

line 772: " J[J

line 773: au BufNewFile,BufRead *.ijs^I^I^Isetf j[J

line 774: [J

line 775: " JAL[J

line 776: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal[J

line 777: [J

line 778: " Jam[J

line 779: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam[J

line 780: [J

line 781: " Java[J

line 782: au BufNewFile,BufRead *.java,*.jav^I^Isetf java[J

line 783: [J

line 784: " JavaCC[J

line 785: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc[J

line 786: [J

line 787: " JavaScript, ECMAScript[J

line 788: au BufNewFile,BufRead *.js,*.javascript,*.es,*.jsx,*.mjs   setf javascript[J

line 789: [J

line 790: " Java Server Pages[J

line 791: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp[J

line 792: [J

line 793: " Java Properties resource file (note: doesn't catch font.properties.pl)[J

line 794: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties[J

line 795: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')[J

line 796: [J

line 797: " Jess[J

line 798: au BufNewFile,BufRead *.clp^I^I^Isetf jess[J

line 799: [J

line 800: " Jgraph[J

line 801: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph[J

line 802: [J

line 803: " Jovial[J

line 804: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial[J

line 805: [J

line 806: " JSON[J

line 807: au BufNewFile,BufRead *.json,*.jsonp,*.webmanifest^Isetf json[J

line 808: [J

line 809: " Kixtart[J

line 810: au BufNewFile,BufRead *.kix^I^I^Isetf kix[J

line 811: [J

line 812: " Kimwitu[++][J

line 813: au BufNewFile,BufRead *.k^I^I^Isetf kwt[J

line 814: [J

line 815: " Kivy[J

line 816: au BufNewFile,BufRead *.kv^I^I^Isetf kivy[J

line 817: [J

line 818: " KDE script[J

line 819: au BufNewFile,BufRead *.ks^I^I^Isetf kscript[J

line 820: [J

line 821: " Kconfig[J

line 822: au BufNewFile,BufRead Kconfig,Kconfig.debug^Isetf kconfig[J

line 823: [J

line 824: " Lace (ISE)[J

line 825: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace[J

line 826: [J

line 827: " Latte[J

line 828: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte[J

line 829: [J

line 830: " Limits[J

line 831: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits[J

line 832: [J

line 833: " LambdaProlog (*.mod too, see Modsim)[J

line 834: au BufNewFile,BufRead *.sig^I^I^Isetf lprolog[J

line 835: [J

line 836: " LDAP LDIF[J

line 837: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif[J

line 838: [J

line 839: " Ld loader[J

line 840: au BufNewFile,BufRead *.ld^I^I^Isetf ld[J

line 841: [J

line 842: " Less[J

line 843: au BufNewFile,BufRead *.less^I^I^Isetf less[J

line 844: [J

line 845: " Lex[J

line 846: au BufNewFile,BufRead *.lex,*.l,*.lxx,*.l++^Isetf lex[J

line 847: [J

line 848: " Libao[J

line 849: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao[J

line 850: [J

line 851: " Libsensors[J

line 852: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors[J

line 853: [J

line 854: " LFTP[J

line 855: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp[J

line 856: [J

line 857: " Lifelines (or Lex for C++!)[J

line 858: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines[J

line 859: [J

line 860: " Lilo: Linux loader[J

line 861: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo[J

line 862: [J

line 863: " Lisp (*.el = ELisp, *.cl = Common Lisp, *.jl = librep Lisp)[J

line 864: if has("fname_case")[J

line 865:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,*.L,.emacs,.sawfishrc setf lisp[J

line 866: else[J

line 867:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,.emacs,.sawfishrc setf lisp[J

line 868: endif[J

line 869: [J

line 870: " SBCL implementation of Common Lisp[J

line 871: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp[J

line 872: [J

line 873: " Liquid[J

line 874: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid[J

line 875: [J

line 876: " Lite[J

line 877: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite[J

line 878: [J

line 879: " LiteStep RC files[J

line 880: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep[J

line 881: [J

line 882: " Login access[J

line 883: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess[J

line 884: [J

line 885: " Login defs[J

line 886: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs[J

line 887: [J

line 888: " Logtalk[J

line 889: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk[J

line 890: [J

line 891: " LOTOS[J

line 892: au BufNewFile,BufRead *.lot,*.lotos^I^Isetf lotos[J

line 893: [J

line 894: " Lout (also: *.lt)[J

line 895: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout[J

line 896: [J

line 897: " Lua[J

line 898: au BufNewFile,BufRead *.lua^I^I^Isetf lua[J

line 899: [J

line 900: " Luarocks[J

line 901: au BufNewFile,BufRead *.rockspec^I^Isetf lua[J

line 902: [J

line 903: " Linden Scripting Language (Second Life)[J

line 904: au BufNewFile,BufRead *.lsl^I^I^Isetf lsl[J

line 905: [J

line 906: " Lynx style file (or LotusScript!)[J

line 907: au BufNewFile,BufRead *.lss^I^I^Isetf lss[J

line 908: [J

line 909: " M4[J

line 911: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif[J

line 912: [J

line 913: " MaGic Point[J

line 914: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp[J

line 915: [J

line 916: " Mail (for Elm, trn, mutt, muttng, rn, slrn, neomutt)[J

line 917: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail[J

line 918: [J

line 919: " Mail aliases[J

line 920: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases[J

line 921: [J

line 922: " Mailcap configuration file[J

line 923: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap[J

line 924: [J

line 925: " Makefile[J

line 926: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make[J

line 927: [J

line 928: " MakeIndex[J

line 929: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist[J

line 930: [J

line 931: " Mallard[J

line 932: au BufNewFile,BufRead *.page^I^I^Isetf mallard[J

line 933: [J

line 934: " Manpage[J

line 935: au BufNewFile,BufRead *.man^I^I^Isetf man[J

line 936: [J

line 937: " Man config[J

line 938: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf[J

line 939: [J

line 940: " Maple V[J

line 941: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple[J

line 942: [J

line 943: " Map (UMN mapserver config file)[J

line 944: au BufNewFile,BufRead *.map^I^I^Isetf map[J

line 945: [J

line 946: " Markdown[J

line 947: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  setf markdown[J

line 948: [J

line 949: " Mason[J

line 950: au BufNewFile,BufRead *.mason,*.mhtml,*.comp^Isetf mason[J

line 951: [J

line 952: " Mathematica, Matlab, Murphi or Objective C[J

line 953: au BufNewFile,BufRead *.m^I^I^Icall dist#ft#FTm()[J

line 954: [J

line 955: " Mathematica notebook[J

line 956: au BufNewFile,BufRead *.nb^I^I^Isetf mma[J

line 957: [J

line 958: " Maya Extension Language[J

line 959: au BufNewFile,BufRead *.mel^I^I^Isetf mel[J

line 960: [J

line 961: " Mercurial (hg) commit file[J

line 962: au BufNewFile,BufRead hg-editor-*.txt^I^Isetf hgcommit[J

line 963: [J

line 964: " Mercurial config (looks like generic config file)[J

line 965: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg[J

line 966: [J

line 967: " Messages (logs mostly)[J

line 968: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages[J

line 969: [J

line 970: " Metafont[J

line 971: au BufNewFile,BufRead *.mf^I^I^Isetf mf[J

line 972: [J

line 973: " MetaPost[J

line 974: au BufNewFile,BufRead *.mp^I^I^Isetf mp[J

line 975: [J

line 976: " MGL[J

line 977: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl[J

line 978: [J

line 979: " MIX - Knuth assembly[J

line 980: au BufNewFile,BufRead *.mix,*.mixal^I^Isetf mix[J

line 981: [J

line 982: " MMIX or VMS makefile[J

line 983: au BufNewFile,BufRead *.mms^I^I^Icall dist#ft#FTmms()[J

line 984: [J

line 985: " Symbian meta-makefile definition (MMP)[J

line 986: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp[J

line 987: [J

line 988: " Modsim III (or LambdaProlog)[J

line 994: au BufNewFile,BufRead *.mod if getline(1) =~ '\<module\>' |   setf lprolog | else |   setf modsim3 | endif[J

line 995: [J

line 996: " Modula 2  (.md removed in favor of Markdown)[J

line 997: au BufNewFile,BufRead *.m2,*.DEF,*.MOD,*.mi^Isetf modula2[J

line 998: [J

line 999: " Modula 3 (.m3, .i3, .mg, .ig)[J

line 1000: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3[J

line 1001: [J

line 1002: " Monk[J

line 1003: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk[J

line 1004: [J

line 1005: " MOO[J

line 1006: au BufNewFile,BufRead *.moo^I^I^Isetf moo[J

line 1007: [J

line 1008: " Modconf[J

line 1009: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf[J

line 1010: [J

line 1011: " Mplayer config[J

line 1012: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf[J

line 1013: [J

line 1014: " Motorola S record[J

line 1015: au BufNewFile,BufRead *.s19,*.s28,*.s37,*.mot,*.srec^Isetf srec[J

line 1016: [J

line 1017: " Mrxvtrc[J

line 1018: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc[J

line 1019: [J

line 1020: " Msql[J

line 1021: au BufNewFile,BufRead *.msql^I^I^Isetf msql[J

line 1022: [J

line 1023: " Mysql[J

line 1024: au BufNewFile,BufRead *.mysql^I^I^Isetf mysql[J

line 1025: [J

line 1026: " Mutt setup files (must be before catch *.rc)[J

line 1027: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')[J

line 1028: [J

line 1029: " M$ Resource files[J

line 1030: au BufNewFile,BufRead *.rc,*.rch^I^Isetf rc[J

line 1031: [J

line 1032: " MuPAD source[J

line 1033: au BufRead,BufNewFile *.mu^I^I^Isetf mupad[J

line 1034: [J

line 1035: " Mush[J

line 1036: au BufNewFile,BufRead *.mush^I^I^Isetf mush[J

line 1037: [J

line 1038: " Mutt setup file (also for Muttng)[J

line 1039: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc[J

line 1040: [J

line 1041: " N1QL[J

line 1042: au BufRead,BufNewfile *.n1ql,*.nql^I^Isetf n1ql[J

line 1043: [J

line 1044: " Nano[J

line 1045: au BufNewFile,BufRead */etc/nanorc,*.nanorc  ^Isetf nanorc[J

line 1046: [J

line 1047: " Nastran input/DMAP[J

line 1048: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran[J

line 1049: [J

line 1050: " Natural[J

line 1051: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural[J

line 1052: [J

line 1053: " Noemutt setup file[J

line 1054: au BufNewFile,BufRead Neomuttrc^I^I^Isetf neomuttrc[J

line 1055: [J

line 1056: " Netrc[J

line 1057: au BufNewFile,BufRead .netrc^I^I^Isetf netrc[J

line 1058: [J

line 1059: " Ninja file[J

line 1060: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja[J

line 1061: [J

line 1062: " Novell netware batch files[J

line 1063: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf[J

line 1064: [J

line 1065: " Nroff/Troff (*.ms and *.t are checked below)[J

line 1069: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif[J

line 1070: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff[J

line 1071: au BufNewFile,BufRead *.[1-9]^I^I^Icall dist#ft#FTnroff()[J

line 1072: [J

line 1073: " Nroff or Objective C++[J

line 1074: au BufNewFile,BufRead *.mm^I^I^Icall dist#ft#FTmm()[J

line 1075: [J

line 1076: " Not Quite C[J

line 1077: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc[J

line 1078: [J

line 1079: " NSE - Nmap Script Engine - uses Lua syntax[J

line 1080: au BufNewFile,BufRead *.nse^I^I^Isetf lua[J

line 1081: [J

line 1082: " NSIS[J

line 1083: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis[J

line 1084: [J

line 1085: " OCAML[J

line 1086: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit^Isetf ocaml[J

line 1087: [J

line 1088: " Occam[J

line 1089: au BufNewFile,BufRead *.occ^I^I^Isetf occam[J

line 1090: [J

line 1091: " Omnimark[J

line 1092: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark[J

line 1093: [J

line 1094: " OpenROAD[J

line 1095: au BufNewFile,BufRead *.or^I^I^Isetf openroad[J

line 1096: [J

line 1097: " OPL[J

line 1098: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^Isetf opl[J

line 1099: [J

line 1100: " Oracle config file[J

line 1101: au BufNewFile,BufRead *.ora^I^I^Isetf ora[J

line 1102: [J

line 1103: " Packet filter conf[J

line 1104: au BufNewFile,BufRead pf.conf^I^I^Isetf pf[J

line 1105: [J

line 1106: " Pam conf[J

line 1107: au BufNewFile,BufRead */etc/pam.conf^I^Isetf pamconf[J

line 1108: [J

line 1109: " PApp[J

line 1110: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^Isetf papp[J

line 1111: [J

line 1112: " Password file[J

line 1113: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd[J

line 1114: [J

line 1115: " Pascal (also *.p)[J

line 1116: au BufNewFile,BufRead *.pas^I^I^Isetf pascal[J

line 1117: [J

line 1118: " Delphi project file[J

line 1119: au BufNewFile,BufRead *.dpr^I^I^Isetf pascal[J

line 1120: [J

line 1121: " PDF[J

line 1122: au BufNewFile,BufRead *.pdf^I^I^Isetf pdf[J

line 1123: [J

line 1124: " PCMK - HAE - crm configure edit [J

line 1125: au BufNewFile,BufRead *.pcmk ^I^I^Isetf pcmk[J

line 1126: [J

line 1127: " Perl[J

line 1128: if has("fname_case")[J

line 1129:   au BufNewFile,BufRead *.pl,*.PL^I^Icall dist#ft#FTpl()[J

line 1130: else[J

line 1131:   au BufNewFile,BufRead *.pl^I^I^Icall dist#ft#FTpl()[J

line 1132: endif[J

line 1133: au BufNewFile,BufRead *.plx,*.al,*.psgi^I^Isetf perl[J

line 1134: au BufNewFile,BufRead *.p6,*.pm6,*.pl6^I^Isetf perl6[J

line 1135: [J

line 1136: " Perl, XPM or XPM2[J

line 1144: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif[J

line 1145: [J

line 1146: " Perl POD[J

line 1147: au BufNewFile,BufRead *.pod^I^I^Isetf pod[J

line 1148: au BufNewFile,BufRead *.pod6^I^I^Isetf pod6[J

line 1149: [J

line 1150: " Php, php3, php4, etc.[J

line 1151: " Also Phtml (was used for PHP 2 in the past)[J

line 1152: " Also .ctp for Cake template file[J

line 1153: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp^Isetf php[J

line 1154: [J

line 1155: " Pike[J

line 1156: au BufNewFile,BufRead *.pike,*.lpc,*.ulpc,*.pmod setf pike[J

line 1157: [J

line 1158: " Pinfo config[J

line 1159: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo[J

line 1160: [J

line 1161: " Palm Resource compiler[J

line 1162: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc[J

line 1163: [J

line 1164: " Pine config[J

line 1165: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine[J

line 1166: [J

line 1167: " PL/1, PL/I[J

line 1168: au BufNewFile,BufRead *.pli,*.pl1^I^Isetf pli[J

line 1169: [J

line 1170: " PL/M (also: *.inp)[J

line 1171: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm[J

line 1172: [J

line 1173: " PL/SQL[J

line 1174: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql[J

line 1175: [J

line 1176: " PLP[J

line 1177: au BufNewFile,BufRead *.plp^I^I^Isetf plp[J

line 1178: [J

line 1179: " PO and PO template (GNU gettext)[J

line 1180: au BufNewFile,BufRead *.po,*.pot^I^Isetf po[J

line 1181: [J

line 1182: " Postfix main config[J

line 1183: au BufNewFile,BufRead main.cf^I^I^Isetf pfmain[J

line 1184: [J

line 1185: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)[J

line 1186: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr[J

line 1187: [J

line 1188: " PostScript Printer Description[J

line 1189: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd[J

line 1190: [J

line 1191: " Povray[J

line 1192: au BufNewFile,BufRead *.pov^I^I^Isetf pov[J

line 1193: [J

line 1194: " Povray configuration[J

line 1195: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini[J

line 1196: [J

line 1197: " Povray, PHP or assembly[J

line 1198: au BufNewFile,BufRead *.inc^I^I^Icall dist#ft#FTinc()[J

line 1199: [J

line 1200: " Printcap and Termcap[J

line 1202: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap[J

line 1204: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap[J

line 1205: [J

line 1206: " PCCTS / ANTRL[J

line 1207: "au BufNewFile,BufRead *.g^I^I^Isetf antrl[J

line 1208: au BufNewFile,BufRead *.g^I^I^Isetf pccts[J

line 1209: [J

line 1210: " PPWizard[J

line 1211: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz[J

line 1212: [J

line 1213: " Obj 3D file format[J

line 1214: " TODO: is there a way to avoid MS-Windows Object files?[J

line 1215: au BufNewFile,BufRead *.obj^I^I^Isetf obj[J

line 1216: [J

line 1217: " Oracle Pro*C/C++[J

line 1218: au BufNewFile,BufRead *.pc^I^I^Isetf proc[J

line 1219: [J

line 1220: " Privoxy actions file[J

line 1221: au BufNewFile,BufRead *.action^I^I^Isetf privoxy[J

line 1222: [J

line 1223: " Procmail[J

line 1224: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail[J

line 1225: [J

line 1226: " Progress or CWEB[J

line 1227: au BufNewFile,BufRead *.w^I^I^Icall dist#ft#FTprogress_cweb()[J

line 1228: [J

line 1229: " Progress or assembly[J

line 1230: au BufNewFile,BufRead *.i^I^I^Icall dist#ft#FTprogress_asm()[J

line 1231: [J

line 1232: " Progress or Pascal[J

line 1233: au BufNewFile,BufRead *.p^I^I^Icall dist#ft#FTprogress_pascal()[J

line 1234: [J

line 1235: " Software Distributor Product Specification File (POSIX 1387.2-1995)[J

line 1236: au BufNewFile,BufRead *.psf^I^I^Isetf psf[J

line 1240: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif[J

line 1241: [J

line 1242: " Prolog[J

line 1243: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog[J

line 1244: [J

line 1245: " Promela[J

line 1246: au BufNewFile,BufRead *.pml^I^I^Isetf promela[J

line 1247: [J

line 1248: " Google protocol buffers[J

line 1249: au BufNewFile,BufRead *.proto^I^I^Isetf proto[J

line 1250: [J

line 1251: " Protocols[J

line 1252: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols[J

line 1253: [J

line 1254: " Pyrex[J

line 1255: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex[J

line 1256: [J

line 1257: " Python, Python Shell Startup Files[J

line 1258: " Quixote (Python-based web framework)[J

line 1259: au BufNewFile,BufRead *.py,*.pyw,.pythonstartup,.pythonrc,*.ptl  setf python[J

line 1260: [J

line 1261: " Radiance[J

line 1262: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance[J

line 1263: [J

line 1264: " Ratpoison config/command files[J

line 1265: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison[J

line 1266: [J

line 1267: " RCS file[J

line 1268: au BufNewFile,BufRead *\,v^I^I^Isetf rcs[J

line 1269: [J

line 1270: " Readline[J

line 1271: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline[J

line 1272: [J

line 1273: " Registry for MS-Windows[J

line 1275: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif[J

line 1276: [J

line 1277: " Renderman Interface Bytestream[J

line 1278: au BufNewFile,BufRead *.rib^I^I^Isetf rib[J

line 1279: [J

line 1280: " Rexx[J

line 1281: au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit^Isetf rexx[J

line 1282: [J

line 1283: " R (Splus)[J

line 1284: if has("fname_case")[J

line 1285:   au BufNewFile,BufRead *.s,*.S^I^I^Isetf r[J

line 1286: else[J

line 1287:   au BufNewFile,BufRead *.s^I^I^Isetf r[J

line 1288: endif[J

line 1289: [J

line 1290: " R Help file[J

line 1291: if has("fname_case")[J

line 1292:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp[J

line 1293: else[J

line 1294:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp[J

line 1295: endif[J

line 1296: [J

line 1297: " R noweb file[J

line 1298: if has("fname_case")[J

line 1299:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb[J

line 1300: else[J

line 1301:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb[J

line 1302: endif[J

line 1303: [J

line 1304: " R Markdown file[J

line 1305: if has("fname_case")[J

line 1306:   au BufNewFile,BufRead *.Rmd,*.rmd,*.Smd,*.smd^I^Isetf rmd[J

line 1307: else[J

line 1308:   au BufNewFile,BufRead *.rmd,*.smd^I^I^Isetf rmd[J

line 1309: endif[J

line 1310: [J

line 1311: " R reStructuredText file[J

line 1312: if has("fname_case")[J

line 1313:   au BufNewFile,BufRead *.Rrst,*.rrst,*.Srst,*.srst^Isetf rrst[J

line 1314: else[J

line 1315:   au BufNewFile,BufRead *.rrst,*.srst^I^I^Isetf rrst[J

line 1316: endif[J

line 1317: [J

line 1318: " Rexx, Rebol or R[J

line 1319: au BufNewFile,BufRead *.r,*.R^I^I^I^Icall dist#ft#FTr()[J

line 1320: [J

line 1321: " Remind[J

line 1322: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind[J

line 1323: [J

line 1324: " Resolv.conf[J

line 1325: au BufNewFile,BufRead resolv.conf^I^Isetf resolv[J

line 1326: [J

line 1327: " Relax NG Compact[J

line 1328: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc[J

line 1329: [J

line 1330: " Relax NG XML[J

line 1331: au BufNewFile,BufRead *.rng^I^I^Isetf rng[J

line 1332: [J

line 1333: " RPL/2[J

line 1334: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl[J

line 1335: [J

line 1336: " Robots.txt[J

line 1337: au BufNewFile,BufRead robots.txt^I^Isetf robots[J

line 1338: [J

line 1339: " Rpcgen[J

line 1340: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen[J

line 1341: [J

line 1342: " reStructuredText Documentation Format[J

line 1343: au BufNewFile,BufRead *.rst^I^I^Isetf rst[J

line 1344: [J

line 1345: " RTF[J

line 1346: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf[J

line 1347: [J

line 1348: " Interactive Ruby shell[J

line 1349: au BufNewFile,BufRead .irbrc,irbrc^I^Isetf ruby[J

line 1350: [J

line 1351: " Ruby[J

line 1352: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby[J

line 1353: [J

line 1354: " RubyGems[J

line 1355: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby[J

line 1356: [J

line 1357: " Rust[J

line 1358: au BufNewFile,BufRead *.rs^I^I^Isetf rust[J

line 1359: [J

line 1360: " Rackup[J

line 1361: au BufNewFile,BufRead *.ru^I^I^Isetf ruby[J

line 1362: [J

line 1363: " Bundler[J

line 1364: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby[J

line 1365: [J

line 1366: " Ruby on Rails[J

line 1367: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby[J

line 1368: [J

line 1369: " Rantfile and Rakefile is like Ruby[J

line 1370: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby[J

line 1371: [J

line 1372: " S-lang (or shader language, or SmallLisp)[J

line 1373: au BufNewFile,BufRead *.sl^I^I^Isetf slang[J

line 1374: [J

line 1375: " Samba config[J

line 1376: au BufNewFile,BufRead smb.conf^I^I^Isetf samba[J

line 1377: [J

line 1378: " SAS script[J

line 1379: au BufNewFile,BufRead *.sas^I^I^Isetf sas[J

line 1380: [J

line 1381: " Sass[J

line 1382: au BufNewFile,BufRead *.sass^I^I^Isetf sass[J

line 1383: [J

line 1384: " Sather[J

line 1385: au BufNewFile,BufRead *.sa^I^I^Isetf sather[J

line 1386: [J

line 1387: " Scala[J

line 1388: au BufNewFile,BufRead *.scala^I^I^Isetf scala[J

line 1389: [J

line 1390: " SBT - Scala Build Tool[J

line 1391: au BufNewFile,BufRead *.sbt^I^I^Isetf sbt[J

line 1392: [J

line 1393: " Scilab[J

line 1394: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab[J

line 1395: [J

line 1396: " SCSS[J

line 1397: au BufNewFile,BufRead *.scss^I^I^Isetf scss[J

line 1398: [J

line 1399: " SD: Streaming Descriptors[J

line 1400: au BufNewFile,BufRead *.sd^I^I^Isetf sd[J

line 1401: [J

line 1402: " SDL[J

line 1403: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl[J

line 1404: [J

line 1405: " sed[J

line 1406: au BufNewFile,BufRead *.sed^I^I^Isetf sed[J

line 1407: [J

line 1408: " Sieve (RFC 3028)[J

line 1409: au BufNewFile,BufRead *.siv^I^I^Isetf sieve[J

line 1410: [J

line 1411: " Sendmail[J

line 1412: au BufNewFile,BufRead sendmail.cf^I^Isetf sm[J

line 1413: [J

line 1414: " Sendmail .mc files are actually m4.  Could also be MS Message text file.[J

line 1415: au BufNewFile,BufRead *.mc^I^I^Icall dist#ft#McSetf()[J

line 1416: [J

line 1417: " Services[J

line 1418: au BufNewFile,BufRead */etc/services^I^Isetf services[J

line 1419: [J

line 1420: " Service Location config[J

line 1421: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf[J

line 1422: [J

line 1423: " Service Location registration[J

line 1424: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg[J

line 1425: [J

line 1426: " Service Location SPI[J

line 1427: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi[J

line 1428: [J

line 1429: " Setserial config[J

line 1430: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial[J

line 1431: [J

line 1432: " SGML[J

line 1442: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif[J

line 1443: [J

line 1444: " SGMLDECL[J

line 1448: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif[J

line 1449: [J

line 1450: " SGML catalog file[J

line 1451: au BufNewFile,BufRead catalog^I^I^Isetf catalog[J

line 1452: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')[J

line 1453: [J

line 1454: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.[J

line 1455: " Gentoo ebuilds and Arch Linux PKGBUILDs are actually bash scripts[J

line 1456: au BufNewFile,BufRead .bashrc*,bashrc,bash.bashrc,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,*.bash,*/{,.}bash[_-]completion{,.d,.sh}{,/*},*.ebuild,*.eclass,PKGBUILD* call dist#ft#SetFileTypeSH("bash")[J

line 1457: au BufNewFile,BufRead .kshrc*,*.ksh call dist#ft#SetFileTypeSH("ksh")[J

line 1458: au BufNewFile,BufRead */etc/profile,.profile*,*.sh,*.env call dist#ft#SetFileTypeSH(getline(1))[J

line 1459: [J

line 1460: " Shell script (Arch Linux) or PHP file (Drupal)[J

line 1466: au BufNewFile,BufRead *.install if getline(1) =~ '<?php' |   setf php | else |   call dist#ft#SetFileTypeSH("bash") | endif[J

line 1467: [J

line 1468: " tcsh scripts[J

line 1469: au BufNewFile,BufRead .tcshrc*,*.tcsh,tcsh.tcshrc,tcsh.login^Icall dist#ft#SetFileTypeShell("tcsh")[J

line 1470: [J

line 1471: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)[J

line 1472: au BufNewFile,BufRead .login*,.cshrc*,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call dist#ft#CSH()[J

line 1473: [J

line 1474: " Z-Shell script[J

line 1475: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh[J

line 1476: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')[J

line 1477: au BufNewFile,BufRead *.zsh^I^I^Isetf zsh[J

line 1478: [J

line 1479: " Scheme[J

line 1480: au BufNewFile,BufRead *.scm,*.ss,*.rkt^I^Isetf scheme[J

line 1481: [J

line 1482: " Screen RC[J

line 1483: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen[J

line 1484: [J

line 1485: " Simula[J

line 1486: au BufNewFile,BufRead *.sim^I^I^Isetf simula[J

line 1487: [J

line 1488: " SINDA[J

line 1489: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda[J

line 1490: [J

line 1491: " SiSU[J

line 1492: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu[J

line 1493: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu[J

line 1494: [J

line 1495: " SKILL[J

line 1496: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill[J

line 1497: [J

line 1498: " SLRN[J

line 1499: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc[J

line 1500: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc[J

line 1501: [J

line 1502: " Smalltalk (and TeX)[J

line 1503: au BufNewFile,BufRead *.st^I^I^Isetf st[J

line 1511: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |  setf rexx | else |  setf st | endif[J

line 1512: [J

line 1513: " Smarty templates[J

line 1514: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty[J

line 1515: [J

line 1516: " SMIL or XML[J

line 1522: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif[J

line 1523: [J

line 1524: " SMIL or SNMP MIB file[J

line 1530: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif[J

line 1531: [J

line 1532: " SMITH[J

line 1533: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith[J

line 1534: [J

line 1535: " Snobol4 and spitbol[J

line 1536: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4[J

line 1537: [J

line 1538: " SNMP MIB files[J

line 1539: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib[J

line 1540: [J

line 1541: " Snort Configuration[J

line 1542: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog[J

line 1543: au BufNewFile,BufRead *.rules^I^I^Icall dist#ft#FTRules()[J

line 1544: [J

line 1545: " Spec (Linux RPM)[J

line 1546: au BufNewFile,BufRead *.spec^I^I^Isetf spec[J

line 1547: [J

line 1548: " Speedup (AspenTech plant simulator)[J

line 1549: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup[J

line 1550: [J

line 1551: " Slice[J

line 1552: au BufNewFile,BufRead *.ice^I^I^Isetf slice[J

line 1553: [J

line 1554: " Spice[J

line 1555: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice[J

line 1556: [J

line 1557: " Spyce[J

line 1558: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce[J

line 1559: [J

line 1560: " Squid[J

line 1561: au BufNewFile,BufRead squid.conf^I^Isetf squid[J

line 1562: [J

line 1563: " SQL for Oracle Designer[J

line 1564: au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks^Isetf sql[J

line 1565: [J

line 1566: " SQL[J

line 1567: au BufNewFile,BufRead *.sql^I^I^Icall dist#ft#SQL()[J

line 1568: [J

line 1569: " SQLJ[J

line 1570: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj[J

line 1571: [J

line 1572: " SQR[J

line 1573: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr[J

line 1574: [J

line 1575: " OpenSSH configuration[J

line 1576: au BufNewFile,BufRead ssh_config,*/.ssh/config^Isetf sshconfig[J

line 1577: [J

line 1578: " OpenSSH server configuration[J

line 1579: au BufNewFile,BufRead sshd_config^I^Isetf sshdconfig[J

line 1580: [J

line 1581: " Stata[J

line 1582: au BufNewFile,BufRead *.ado,*.do,*.imata,*.mata^Isetf stata[J

line 1583: " Also *.class, but not when it's a Java bytecode file[J

line 1585: au BufNewFile,BufRead *.class if getline(1) !~ "^\xca\xfe\xba\xbe" | setf stata | endif[J

line 1586: [J

line 1587: " SMCL[J

line 1588: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl[J

line 1589: [J

line 1590: " Stored Procedures[J

line 1591: au BufNewFile,BufRead *.stp^I^I^Isetf stp[J

line 1592: [J

line 1593: " Standard ML[J

line 1594: au BufNewFile,BufRead *.sml^I^I^Isetf sml[J

line 1595: [J

line 1596: " Sratus VOS command macro[J

line 1597: au BufNewFile,BufRead *.cm^I^I^Isetf voscm[J

line 1598: [J

line 1599: " Sysctl[J

line 1600: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl[J

line 1601: [J

line 1602: " Systemd unit files[J

line 1603: au BufNewFile,BufRead */systemd/*.{automount,mount,path,service,socket,swap,target,timer}^Isetf systemd[J

line 1604: [J

line 1605: " Synopsys Design Constraints[J

line 1606: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc[J

line 1607: [J

line 1608: " Sudoers[J

line 1609: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers[J

line 1610: [J

line 1611: " SVG (Scalable Vector Graphics)[J

line 1612: au BufNewFile,BufRead *.svg^I^I^Isetf svg[J

line 1613: [J

line 1614: " Tads (or Nroff or Perl test file)[J

line 1616: au BufNewFile,BufRead *.t if !dist#ft#FTnroff() && !dist#ft#FTperl() | setf tads | endif[J

line 1617: [J

line 1618: " Tags[J

line 1619: au BufNewFile,BufRead tags^I^I^Isetf tags[J

line 1620: [J

line 1621: " TAK[J

line 1622: au BufNewFile,BufRead *.tak^I^I^Isetf tak[J

line 1623: [J

line 1624: " Task[J

line 1625: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata[J

line 1626: au BufRead,BufNewFile *.task^I^I^Isetf taskedit[J

line 1627: [J

line 1628: " Tcl (JACL too)[J

line 1629: au BufNewFile,BufRead *.tcl,*.tk,*.itcl,*.itk,*.jacl^Isetf tcl[J

line 1630: [J

line 1631: " TealInfo[J

line 1632: au BufNewFile,BufRead *.tli^I^I^Isetf tli[J

line 1633: [J

line 1634: " Telix Salt[J

line 1635: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt[J

line 1636: [J

line 1637: " Tera Term Language[J

line 1638: au BufRead,BufNewFile *.ttl^I^I^Isetf teraterm[J

line 1639: [J

line 1640: " Terminfo[J

line 1641: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo[J

line 1642: [J

line 1643: " TeX[J

line 1644: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex[J

line 1645: au BufNewFile,BufRead *.tex^I^I^Icall dist#ft#FTtex()[J

line 1646: [J

line 1647: " ConTeXt[J

line 1648: au BufNewFile,BufRead *.mkii,*.mkiv,*.mkvi   setf context[J

line 1649: [J

line 1650: " Texinfo[J

line 1651: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo[J

line 1652: [J

line 1653: " TeX configuration[J

line 1654: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf[J

line 1655: [J

line 1656: " Tidy config[J

line 1657: au BufNewFile,BufRead .tidyrc,tidyrc^I^Isetf tidy[J

line 1658: [J

line 1659: " TF mud client[J

line 1660: au BufNewFile,BufRead *.tf,.tfrc,tfrc^I^Isetf tf[J

line 1661: [J

line 1662: " tmux configuration[J

line 1663: au BufNewFile,BufRead {.,}tmux*.conf^I^Isetf tmux[J

line 1664: [J

line 1665: " TPP - Text Presentation Program[J

line 1666: au BufNewFile,BufReadPost *.tpp^I^I^Isetf tpp[J

line 1667: [J

line 1668: " Treetop[J

line 1669: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop[J

line 1670: [J

line 1671: " Trustees[J

line 1672: au BufNewFile,BufRead trustees.conf^I^Isetf trustees[J

line 1673: [J

line 1674: " TSS - Geometry[J

line 1675: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm[J

line 1676: [J

line 1677: " TSS - Optics[J

line 1678: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop[J

line 1679: [J

line 1680: " TSS - Command Line (temporary)[J

line 1681: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl[J

line 1682: [J

line 1683: " TWIG files[J

line 1684: au BufNewFile,BufReadPost *.twig^I^Isetf twig[J

line 1685: [J

line 1686: " Motif UIT/UIL files[J

line 1687: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil[J

line 1688: [J

line 1689: " Udev conf[J

line 1690: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf[J

line 1691: [J

line 1692: " Udev permissions[J

line 1693: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm[J

line 1694: "[J

line 1695: " Udev symlinks config[J

line 1696: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh[J

line 1697: [J

line 1698: " UnrealScript[J

line 1699: au BufNewFile,BufRead *.uc^I^I^Isetf uc[J

line 1700: [J

line 1701: " Updatedb[J

line 1702: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb[J

line 1703: [J

line 1704: " Upstart (init(8)) config files[J

line 1705: au BufNewFile,BufRead */usr/share/upstart/*.conf^I       setf upstart[J

line 1706: au BufNewFile,BufRead */usr/share/upstart/*.override^I       setf upstart[J

line 1707: au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart[J

line 1708: au BufNewFile,BufRead */.init/*.conf,*/.init/*.override^I       setf upstart[J

line 1709: au BufNewFile,BufRead */.config/upstart/*.conf^I^I       setf upstart[J

line 1710: au BufNewFile,BufRead */.config/upstart/*.override^I       setf upstart[J

line 1711: [J

line 1712: " Vera[J

line 1713: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera[J

line 1714: [J

line 1715: " Verilog HDL[J

line 1716: au BufNewFile,BufRead *.v^I^I^Isetf verilog[J

line 1717: [J

line 1718: " Verilog-AMS HDL[J

line 1719: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams[J

line 1720: [J

line 1721: " SystemVerilog[J

line 1722: au BufNewFile,BufRead *.sv,*.svh^I^Isetf systemverilog[J

line 1723: [J

line 1724: " VHDL[J

line 1725: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst  setf vhdl[J

line 1726: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')[J

line 1727: [J

line 1728: " Vim script[J

line 1729: au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc^Isetf vim[J

line 1730: [J

line 1731: " Viminfo file[J

line 1732: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo[J

line 1733: [J

line 1734: " Virata Config Script File or Drupal module[J

line 1740: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif[J

line 1741: [J

line 1742: " Visual Basic (also uses *.bas) or FORM[J

line 1743: au BufNewFile,BufRead *.frm^I^I^Icall dist#ft#FTVB("form")[J

line 1744: [J

line 1745: " SaxBasic is close to Visual Basic[J

line 1746: au BufNewFile,BufRead *.sba^I^I^Isetf vb[J

line 1747: [J

line 1748: " Vgrindefs file[J

line 1749: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs[J

line 1750: [J

line 1751: " VRML V1.0c[J

line 1752: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml[J

line 1753: [J

line 1754: " Vroom (vim testing and executable documentation)[J

line 1755: au BufNewFile,BufRead *.vroom^I^I^Isetf vroom[J

line 1756: [J

line 1757: " Webmacro[J

line 1758: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro[J

line 1759: [J

line 1760: " Wget config[J

line 1761: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget[J

line 1762: [J

line 1763: " Website MetaLanguage[J

line 1764: au BufNewFile,BufRead *.wml^I^I^Isetf wml[J

line 1765: [J

line 1766: " Winbatch[J

line 1767: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch[J

line 1768: [J

line 1769: " WSML[J

line 1770: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml[J

line 1771: [J

line 1772: " WPL[J

line 1773: au BufNewFile,BufRead *.wpl^I^I^Isetf xml[J

line 1774: [J

line 1775: " WvDial[J

line 1776: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial[J

line 1777: [J

line 1778: " CVS RC file[J

line 1779: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc[J

line 1780: [J

line 1781: " CVS commit file[J

line 1782: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs[J

line 1783: [J

line 1784: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment[J

line 1785: " lines in a WEB file).[J

line 1791: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif[J

line 1792: [J

line 1793: " Windows Scripting Host and Windows Script Component[J

line 1794: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh[J

line 1795: [J

line 1796: " XHTML[J

line 1797: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml[J

line 1798: [J

line 1799: " X Pixmap (dynamically sets colors, use BufEnter to make it work better)[J

line 1805: au BufEnter *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif[J

line 1806: au BufEnter *.xpm2^I^I^I^Isetf xpm2[J

line 1807: [J

line 1808: " XFree86 config[J

line 1813: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf[J

line 1816: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf[J

line 1817: [J

line 1818: " Xorg config[J

line 1819: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf[J

line 1820: [J

line 1821: " Xinetd conf[J

line 1822: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd[J

line 1823: [J

line 1824: " XS Perl extension interface language[J

line 1825: au BufNewFile,BufRead *.xs^I^I^Isetf xs[J

line 1826: [J

line 1827: " X resources file[J

line 1828: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults[J

line 1829: [J

line 1830: " Xmath[J

line 1831: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath[J

line 1833: au BufNewFile,BufRead *.ms if !dist#ft#FTnroff() | setf xmath | endif[J

line 1834: [J

line 1835: " XML  specific variants: docbk and xbl[J

line 1836: au BufNewFile,BufRead *.xml^I^I^Icall dist#ft#FTxml()[J

line 1837: [J

line 1838: " XMI (holding UML models) is also XML[J

line 1839: au BufNewFile,BufRead *.xmi^I^I^Isetf xml[J

line 1840: [J

line 1841: " CSPROJ files are Visual Studio.NET's XML-based project config files[J

line 1842: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml[J

line 1843: [J

line 1844: " Qt Linguist translation source and Qt User Interface Files are XML[J

line 1845: au BufNewFile,BufRead *.ts,*.ui^I^I^Isetf xml[J

line 1846: [J

line 1847: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)[J

line 1848: au BufNewFile,BufRead *.tpm^I^I^Isetf xml[J

line 1849: [J

line 1850: " Xdg menus[J

line 1851: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml[J

line 1852: [J

line 1853: " ATI graphics driver configuration[J

line 1854: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml[J

line 1855: [J

line 1856: " XLIFF (XML Localisation Interchange File Format) is also XML[J

line 1857: au BufNewFile,BufRead *.xlf^I^I^Isetf xml[J

line 1858: au BufNewFile,BufRead *.xliff^I^I^Isetf xml[J

line 1859: [J

line 1860: " XML User Interface Language[J

line 1861: au BufNewFile,BufRead *.xul^I^I^Isetf xml[J

line 1862: [J

line 1863: " X11 xmodmap (also see below)[J

line 1864: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap[J

line 1865: [J

line 1866: " Xquery[J

line 1867: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery[J

line 1868: [J

line 1869: " XSD[J

line 1870: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd[J

line 1871: [J

line 1872: " Xslt[J

line 1873: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt[J

line 1874: [J

line 1875: " Yacc[J

line 1876: au BufNewFile,BufRead *.yy,*.yxx,*.y++^I^Isetf yacc[J

line 1877: [J

line 1878: " Yacc or racc[J

line 1879: au BufNewFile,BufRead *.y^I^I^Icall dist#ft#FTy()[J

line 1880: [J

line 1881: " Yaml[J

line 1882: au BufNewFile,BufRead *.yaml,*.yml^I^Isetf yaml[J

line 1883: [J

line 1884: " yum conf (close enough to dosini)[J

line 1885: au BufNewFile,BufRead */etc/yum.conf^I^Isetf dosini[J

line 1886: [J

line 1887: " Zimbu[J

line 1888: au BufNewFile,BufRead *.zu^I^I^Isetf zimbu[J

line 1889: " Zimbu Templates[J

line 1890: au BufNewFile,BufRead *.zut^I^I^Isetf zimbutempl[J

line 1891: [J

line 1892: " Zope[J

line 1893: "   dtml (zope dynamic template markup language), pt (zope page template),[J

line 1894: "   cpt (zope form controller page template)[J

line 1895: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall dist#ft#FThtml()[J

line 1896: "   zsql (zope sql method)[J

line 1897: au BufNewFile,BufRead *.zsql^I^I^Icall dist#ft#SQL()[J

line 1898: [J

line 1899: " Z80 assembler asz80[J

line 1900: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a[J

line 1901: [J

line 1902: augroup END[J

line 1903: [J

line 1904: [J

line 1905: " Source the user-specified filetype file, for backwards compatibility with[J

line 1906: " Vim 5.x.[J

line 1907: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))[J

line 1908:   execute "source " . myfiletypefile[J

line 1909: endif[J

line 1910: [J

line 1911: [J

line 1912: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used[J

line 1913: " when there are no matching file name extensions.[J

line 1914: " Don't do this for compressed files.[J

line 1915: augroup filetypedetect[J

line 1918: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif[J

line 1919: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif[J

line 1920: [J

line 1921: [J

line 1922: " Extra checks for when no filetype has been detected now.  Mostly used for[J

line 1923: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim[J

line 1924: " script file.[J

line 1925: " Most of these should call s:StarSetf() to avoid names ending in .gz and the[J

line 1926: " like are used.[J

line 1927: [J

line 1928: " More Apache config files[J

line 1929: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')[J

line 1930: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')[J

line 1931: [J

line 1932: " Asterisk config file[J

line 1933: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')[J

line 1934: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')[J

line 1935: [J

line 1936: " Bazaar version control[J

line 1937: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr[J

line 1938: [J

line 1939: " Bazel build file[J

line 1940: if !has("fname_case")[J

line 1941:   au BufNewFile,BufRead BUILD^I^I^Isetf bzl[J

line 1942: endif[J

line 1943: [J

line 1944: " BIND zone[J

line 1945: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')[J

line 1946: [J

line 1947: " Calendar[J

line 1950: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')[J

line 1951: [J

line 1952: " Changelog[J

line 1958: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif[J

line 1959: [J

line 1960: " Crontab[J

line 1961: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')[J

line 1962: [J

line 1963: " dnsmasq(8) configuration[J

line 1964: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')[J

line 1965: [J

line 1966: " Dracula[J

line 1967: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')[J

line 1968: [J

line 1969: " Fvwm[J

line 1970: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')[J

line 1972: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')[J

line 1978: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif[J

line 1979: [J

line 1980: " Gedcom[J

line 1981: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')[J

line 1982: [J

line 1983: " GTK RC[J

line 1984: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')[J

line 1985: [J

line 1986: " Jam[J

line 1987: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')[J

line 1988: [J

line 1989: " Jargon[J

line 1993: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif[J

line 1994: [J

line 1995: " Kconfig[J

line 1996: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')[J

line 1997: [J

line 1998: " Lilo: Linux loader[J

line 1999: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')[J

line 2000: [J

line 2001: " Logcheck[J

line 2002: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')[J

line 2003: [J

line 2004: " Makefile[J

line 2005: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')[J

line 2006: [J

line 2007: " Ruby Makefile[J

line 2008: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')[J

line 2009: [J

line 2010: " Mail (also matches muttrc.vim, so this is below the other checks)[J

line 2011: au BufNewFile,BufRead {neo,}mutt[[:alnum:]._-]\\\{6\}^Isetf mail[J

line 2012: [J

line 2013: au BufNewFile,BufRead reportbug-*^I^Icall s:StarSetf('mail')[J

line 2014: [J

line 2015: " Modconf[J

line 2019: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif[J

line 2020: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')[J

line 2021: [J

line 2022: " Mutt setup file[J

line 2023: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')[J

line 2024: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')[J

line 2025: [J

line 2026: " Neomutt setup file[J

line 2027: au BufNewFile,BufRead .neomuttrc*,*/.neomutt/neomuttrc*^Icall s:StarSetf('neomuttrc')[J

line 2028: au BufNewFile,BufRead neomuttrc*,Neomuttrc*^I^Icall s:StarSetf('neomuttrc')[J

line 2029: [J

line 2030: " Nroff macros[J

line 2031: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')[J

line 2032: [J

line 2033: " OpenBSD hostname.if[J

line 2034: au BufNewFile,BufRead /etc/hostname.*^I^Icall s:StarSetf('config')[J

line 2035: [J

line 2036: " Pam conf[J

line 2037: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')[J

line 2038: [J

line 2039: " Printcap and Termcap[J

line 2043: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif[J

line 2047: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif[J

line 2048: [J

line 2049: " ReDIF[J

line 2050: " Only used when the .rdf file was not detected to be XML.[J

line 2051: au BufRead,BufNewFile *.rdf^I^I^Icall dist#ft#Redif()[J

line 2052: [J

line 2053: " Remind[J

line 2054: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')[J

line 2055: [J

line 2056: " Vim script[J

line 2057: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')[J

line 2058: [J

line 2059: " Subversion commit file[J

line 2060: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn[J

line 2061: [J

line 2062: " X resources file[J

line 2063: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')[J

line 2064: [J

line 2065: " XFree86 config[J

line 2067: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')[J

line 2072: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')[J

line 2073: [J

line 2074: " X11 xmodmap[J

line 2075: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')[J

line 2076: [J

line 2077: " Xinetd conf[J

line 2078: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')[J

line 2079: [J

line 2080: " yum conf (close enough to dosini)[J

line 2081: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')[J

line 2082: [J

line 2083: " Z-Shell script[J

line 2084: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')[J

line 2085: [J

line 2086: [J

line 2087: " Plain text files, needs to be far down to not override others.  This avoids[J

line 2088: " the "conf" type being used if there is a line starting with '#'.[J

line 2089: au BufNewFile,BufRead *.text,README^I^Isetf text[J

line 2090: [J

line 2091: " Help files match *.txt but should have a last line that is a modeline.[J

line 2095: au BufNewFile,BufRead *.txt^I  if getline('$') !~ 'vim:.*ft=help'|   setf text| endif[J

line 2096: [J

line 2097: [J

line 2098: " Use the filetype detect plugins.  They may overrule any of the previously[J

line 2099: " detected filetypes.[J

line 2100: runtime! ftdetect/*.vim[J

Searching for "ftdetect/*.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/ftdetect/*.vim"[J
Searching for "/usr/local/share/vim/vimfiles/ftdetect/*.vim"[J
Searching for "/usr/local/share/vim/vim80/ftdetect/*.vim"[J
Searching for "/usr/local/share/vim/vimfiles/after/ftdetect/*.vim"[J
Searching for "/home/withon/.vim/after/ftdetect/*.vim"[J
not found in 'runtimepath': "ftdetect/*.vim"[J
line 2101: [J

line 2102: " NOTE: The above command could have ended the filetypedetect autocmd group[J

line 2103: " and started another one. Let's make sure it has ended to get to a consistent[J

line 2104: " state.[J

line 2105: augroup END[J

line 2106: [J

line 2107: " Generic configuration file. Use FALLBACK, it's just guessing![J

line 2113: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif[J

line 2114: [J

line 2115: [J

line 2116: " If the GUI is already running, may still need to install the Syntax menu.[J

line 2117: " Don't do it when the 'M' flag is included in 'guioptions'.[J

line 2119: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"[J

line 2120:   source <sfile>:p:h/menu.vim[J

line 2121: endif[J

line 2122: [J

line 2123: " Function called for testing all functions defined here.  These are[J

line 2124: " script-local, thus need to be executed here.[J

line 2125: " Returns a string with error messages (hopefully empty).[J

line 2126: func! TestFiletypeFuncs(testlist)[J

line 2137: [J

line 2138: " Restore 'cpoptions'[J

line 2139: let &cpo = s:cpo_save[J

line 2140: unlet s:cpo_save[J

finished sourcing /usr/local/share/vim/vim80/filetype.vim[J
continuing in /usr/local/share/vim/vim80/syntax/syntax.vim[J
Searching for "/usr/local/share/vim/vimfiles/after/filetype.vim"[J
Searching for "/home/withon/.vim/after/filetype.vim"[J
line 26:   let s:did_ft = 0[J

line 27: endif[J

line 28: [J

line 29: " Set up the connection between FileType and Syntax autocommands.[J

line 30: " This makes the syntax automatically set when the file type is detected.[J

line 31: augroup syntaxset[J

line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")[J

line 33: augroup END[J

line 34: [J

line 35: [J

line 36: " Execute the syntax autocommands for the each buffer.[J

line 37: " If the filetype wasn't detected yet, do that now.[J

line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'[J

line 39: " already was set manually (e.g., help buffers).[J

line 40: doautoall syntaxset FileType[J

line 41: if !s:did_ft[J

line 42:   doautoall filetypedetect BufRead[J

line 43: endif[J

finished sourcing /usr/local/share/vim/vim80/syntax/syntax.vim[J
continuing in /home/withon/.vimrc[J
line 17: endif[J

line 18: colorscheme ron        " elflord ron peachpuff default 设置配色方案，vim自带的配色方案保存在/usr/share/vim/vim72/colors目录下[J

Searching for "colors/ron.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/colors/ron.vim"[J
Searching for "/usr/local/share/vim/vimfiles/colors/ron.vim"[J
Searching for "/usr/local/share/vim/vim80/colors/ron.vim"[J
chdir(/usr/local/share/vim/vim80/colors)[J
fchdir() to previous dir[J
line 18: sourcing "/usr/local/share/vim/vim80/colors/ron.vim"[J
line 1: " local syntax file - set colors on a per-machine basis:[J

line 2: " vim: tw=0 ts=4 sw=4[J

line 3: " Vim color file[J

line 4: " Maintainer:^IRon Aaron <ron@ronware.org>[J

line 5: " Last Change:^I2013 May 24[J

line 6: [J

line 7: set background=dark[J

Searching for "syntax/syncolor.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 7: sourcing "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/local/share/vim/vim80/syntax/syncolor.vim[J
continuing in /usr/local/share/vim/vim80/colors/ron.vim[J
Searching for "/usr/local/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/home/withon/.vim/after/syntax/syncolor.vim"[J
line 8: hi clear[J

Searching for "syntax/syncolor.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 8: sourcing "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/local/share/vim/vim80/syntax/syncolor.vim[J
continuing in /usr/local/share/vim/vim80/colors/ron.vim[J
Searching for "/usr/local/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/home/withon/.vim/after/syntax/syncolor.vim"[J
line 9: if exists("syntax_on")[J

line 10:   syntax reset[J

line 10: runtime! syntax/syncolor.vim[J

Searching for "syntax/syncolor.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 10: sourcing "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi! link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi! link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi! link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi! link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi! link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi! link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi! link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi! link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi! link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi! link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi! link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi! link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi! link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi! link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi! link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi! link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi! link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi! link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi! link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi! link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi! link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi! link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi! link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi! link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/local/share/vim/vim80/syntax/syncolor.vim[J
continuing in /usr/local/share/vim/vim80/colors/ron.vim[J
Searching for "/usr/local/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/home/withon/.vim/after/syntax/syncolor.vim"[J
line 11: endif[J

line 12: let g:colors_name = "ron"[J

line 13: hi Normal^I^Iguifg=cyan^Iguibg=black[J

line 14: hi NonText^I^Iguifg=yellow guibg=#303030[J

line 15: hi comment^I^Iguifg=green[J

line 16: hi constant^I^Iguifg=cyan^Igui=bold[J

line 17: hi identifier^Iguifg=cyan^Igui=NONE[J

line 18: hi statement^Iguifg=lightblue^Igui=NONE[J

line 19: hi preproc^I^Iguifg=Pink2[J

line 20: hi type^I^I^Iguifg=seagreen^Igui=bold[J

line 21: hi special^I^Iguifg=yellow[J

line 22: hi ErrorMsg^I^Iguifg=Black^Iguibg=Red[J

line 23: hi WarningMsg^Iguifg=Black^Iguibg=Green[J

line 24: hi Error^I^Iguibg=Red[J

line 25: hi Todo^I^I^Iguifg=Black^Iguibg=orange[J

line 26: hi Cursor^I^Iguibg=#60a060 guifg=#00ff00[J

line 27: hi Search^I^Iguibg=darkgray guifg=black gui=bold [J

line 28: hi IncSearch^Igui=NONE guibg=steelblue[J

line 29: hi LineNr^I^Iguifg=darkgrey[J

line 30: hi title^I^Iguifg=darkgrey[J

line 31: hi ShowMarksHL ctermfg=cyan ctermbg=lightblue cterm=bold guifg=yellow guibg=black  gui=bold[J

line 32: hi StatusLineNC^Igui=NONE guifg=lightblue guibg=darkblue[J

line 33: hi StatusLine^Igui=bold^Iguifg=cyan^Iguibg=blue[J

line 34: hi label^I^Iguifg=gold2[J

line 35: hi operator^I^Iguifg=orange[J

line 36: hi clear Visual[J

line 37: hi Visual^I^Iterm=reverse cterm=reverse gui=reverse[J

line 38: hi DiffChange   guibg=darkgreen[J

line 39: hi DiffText^I^Iguibg=olivedrab[J

line 40: hi DiffAdd^I^Iguibg=slateblue[J

line 41: hi DiffDelete   guibg=coral[J

line 42: hi Folded^I^Iguibg=gray30[J

line 43: hi FoldColumn^Iguibg=gray30 guifg=white[J

line 44: hi cIf0^I^I^Iguifg=gray[J

line 45: hi diffOnly^Iguifg=red gui=bold[J

finished sourcing /usr/local/share/vim/vim80/colors/ron.vim[J
continuing in /home/withon/.vimrc[J
line 19: [J

line 20: " detect file type[J

line 21: filetype on[J

Searching for "filetype.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/filetype.vim"[J
Searching for "/usr/local/share/vim/vimfiles/filetype.vim"[J
Searching for "/usr/local/share/vim/vim80/filetype.vim"[J
chdir(/usr/local/share/vim/vim80)[J
fchdir() to previous dir[J
line 21: sourcing "/usr/local/share/vim/vim80/filetype.vim"[J
line 1: " Vim support file to detect file types[J

line 2: "[J

line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 4: " Last Change:^I2017 Nov 21[J

line 5: [J

line 6: " Listen very carefully, I will say this only once[J

line 7: if exists("did_load_filetypes")[J

line 8:   finish[J

finished sourcing /usr/local/share/vim/vim80/filetype.vim[J
continuing in /home/withon/.vimrc[J
Searching for "/usr/local/share/vim/vimfiles/after/filetype.vim"[J
Searching for "/home/withon/.vim/after/filetype.vim"[J
line 22: filetype plugin on[J

Searching for "filetype.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/filetype.vim"[J
Searching for "/usr/local/share/vim/vimfiles/filetype.vim"[J
Searching for "/usr/local/share/vim/vim80/filetype.vim"[J
chdir(/usr/local/share/vim/vim80)[J
fchdir() to previous dir[J
line 22: sourcing "/usr/local/share/vim/vim80/filetype.vim"[J
line 1: " Vim support file to detect file types[J

line 2: "[J

line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 4: " Last Change:^I2017 Nov 21[J

line 5: [J

line 6: " Listen very carefully, I will say this only once[J

line 7: if exists("did_load_filetypes")[J

line 8:   finish[J

finished sourcing /usr/local/share/vim/vim80/filetype.vim[J
continuing in /home/withon/.vimrc[J
Searching for "/usr/local/share/vim/vimfiles/after/filetype.vim"[J
Searching for "/home/withon/.vim/after/filetype.vim"[J
Searching for "ftplugin.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/ftplugin.vim"[J
Searching for "/usr/local/share/vim/vimfiles/ftplugin.vim"[J
Searching for "/usr/local/share/vim/vim80/ftplugin.vim"[J
chdir(/usr/local/share/vim/vim80)[J
fchdir() to previous dir[J
line 22: sourcing "/usr/local/share/vim/vim80/ftplugin.vim"[J
line 1: " Vim support file to switch on loading plugins for file types[J

line 2: "[J

line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 4: " Last change:^I2006 Apr 30[J

line 5: [J

line 6: if exists("did_load_ftplugin")[J

line 7:   finish[J

line 8: endif[J

line 9: let did_load_ftplugin = 1[J

line 10: [J

line 11: augroup filetypeplugin[J

line 12:   au FileType * call s:LoadFTPlugin()[J

line 13: [J

line 14:   func! s:LoadFTPlugin()[J

line 35: augroup END[J

finished sourcing /usr/local/share/vim/vim80/ftplugin.vim[J
continuing in /home/withon/.vimrc[J
Searching for "/usr/local/share/vim/vimfiles/after/ftplugin.vim"[J
Searching for "/home/withon/.vim/after/ftplugin.vim"[J
line 23: [J

line 24: " If using a dark background within the editing area and syntax highlighting[J

line 25: " turn on this option as well[J

line 26: set background=dark[J

Searching for "colors/ron.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/colors/ron.vim"[J
Searching for "/usr/local/share/vim/vimfiles/colors/ron.vim"[J
Searching for "/usr/local/share/vim/vim80/colors/ron.vim"[J
chdir(/usr/local/share/vim/vim80/colors)[J
fchdir() to previous dir[J
line 26: sourcing "/usr/local/share/vim/vim80/colors/ron.vim"[J
line 1: " local syntax file - set colors on a per-machine basis:[J

line 2: " vim: tw=0 ts=4 sw=4[J

line 3: " Vim color file[J

line 4: " Maintainer:^IRon Aaron <ron@ronware.org>[J

line 5: " Last Change:^I2013 May 24[J

line 6: [J

line 7: set background=dark[J

line 8: hi clear[J

Searching for "syntax/syncolor.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 8: sourcing "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/local/share/vim/vim80/syntax/syncolor.vim[J
continuing in /usr/local/share/vim/vim80/colors/ron.vim[J
Searching for "/usr/local/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/home/withon/.vim/after/syntax/syncolor.vim"[J
line 9: if exists("syntax_on")[J

line 10:   syntax reset[J

line 10: runtime! syntax/syncolor.vim[J

Searching for "syntax/syncolor.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 10: sourcing "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi! link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi! link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi! link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi! link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi! link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi! link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi! link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi! link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi! link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi! link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi! link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi! link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi! link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi! link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi! link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi! link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi! link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi! link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi! link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi! link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi! link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi! link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi! link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi! link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/local/share/vim/vim80/syntax/syncolor.vim[J
continuing in /usr/local/share/vim/vim80/colors/ron.vim[J
Searching for "/usr/local/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/home/withon/.vim/after/syntax/syncolor.vim"[J
line 11: endif[J

line 12: let g:colors_name = "ron"[J

line 13: hi Normal^I^Iguifg=cyan^Iguibg=black[J

line 14: hi NonText^I^Iguifg=yellow guibg=#303030[J

line 15: hi comment^I^Iguifg=green[J

line 16: hi constant^I^Iguifg=cyan^Igui=bold[J

line 17: hi identifier^Iguifg=cyan^Igui=NONE[J

line 18: hi statement^Iguifg=lightblue^Igui=NONE[J

line 19: hi preproc^I^Iguifg=Pink2[J

line 20: hi type^I^I^Iguifg=seagreen^Igui=bold[J

line 21: hi special^I^Iguifg=yellow[J

line 22: hi ErrorMsg^I^Iguifg=Black^Iguibg=Red[J

line 23: hi WarningMsg^Iguifg=Black^Iguibg=Green[J

line 24: hi Error^I^Iguibg=Red[J

line 25: hi Todo^I^I^Iguifg=Black^Iguibg=orange[J

line 26: hi Cursor^I^Iguibg=#60a060 guifg=#00ff00[J

line 27: hi Search^I^Iguibg=darkgray guifg=black gui=bold [J

line 28: hi IncSearch^Igui=NONE guibg=steelblue[J

line 29: hi LineNr^I^Iguifg=darkgrey[J

line 30: hi title^I^Iguifg=darkgrey[J

line 31: hi ShowMarksHL ctermfg=cyan ctermbg=lightblue cterm=bold guifg=yellow guibg=black  gui=bold[J

line 32: hi StatusLineNC^Igui=NONE guifg=lightblue guibg=darkblue[J

line 33: hi StatusLine^Igui=bold^Iguifg=cyan^Iguibg=blue[J

line 34: hi label^I^Iguifg=gold2[J

line 35: hi operator^I^Iguifg=orange[J

line 36: hi clear Visual[J

line 37: hi Visual^I^Iterm=reverse cterm=reverse gui=reverse[J

line 38: hi DiffChange   guibg=darkgreen[J

line 39: hi DiffText^I^Iguibg=olivedrab[J

line 40: hi DiffAdd^I^Iguibg=slateblue[J

line 41: hi DiffDelete   guibg=coral[J

line 42: hi Folded^I^Iguibg=gray30[J

line 43: hi FoldColumn^Iguibg=gray30 guifg=white[J

line 44: hi cIf0^I^I^Iguifg=gray[J

line 45: hi diffOnly^Iguifg=red gui=bold[J

finished sourcing /usr/local/share/vim/vim80/colors/ron.vim[J
continuing in /home/withon/.vimrc[J
line 27: [J

line 28: " Uncomment the following to have Vim jump to the last position when[J

line 29: " reopening a file[J

line 30: if has("autocmd")[J

line 31:   au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif[J

line 32:   "have Vim load indentation rules and plugins according to the detected filetype[J

line 33:   filetype plugin indent on[J

Searching for "filetype.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/filetype.vim"[J
Searching for "/usr/local/share/vim/vimfiles/filetype.vim"[J
Searching for "/usr/local/share/vim/vim80/filetype.vim"[J
chdir(/usr/local/share/vim/vim80)[J
fchdir() to previous dir[J
line 33: sourcing "/usr/local/share/vim/vim80/filetype.vim"[J
line 1: " Vim support file to detect file types[J

line 2: "[J

line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 4: " Last Change:^I2017 Nov 21[J

line 5: [J

line 6: " Listen very carefully, I will say this only once[J

line 7: if exists("did_load_filetypes")[J

line 8:   finish[J

finished sourcing /usr/local/share/vim/vim80/filetype.vim[J
continuing in /home/withon/.vimrc[J
Searching for "/usr/local/share/vim/vimfiles/after/filetype.vim"[J
Searching for "/home/withon/.vim/after/filetype.vim"[J
Searching for "ftplugin.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/ftplugin.vim"[J
Searching for "/usr/local/share/vim/vimfiles/ftplugin.vim"[J
Searching for "/usr/local/share/vim/vim80/ftplugin.vim"[J
chdir(/usr/local/share/vim/vim80)[J
fchdir() to previous dir[J
line 33: sourcing "/usr/local/share/vim/vim80/ftplugin.vim"[J
line 1: " Vim support file to switch on loading plugins for file types[J

line 2: "[J

line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 4: " Last change:^I2006 Apr 30[J

line 5: [J

line 6: if exists("did_load_ftplugin")[J

line 7:   finish[J

finished sourcing /usr/local/share/vim/vim80/ftplugin.vim[J
continuing in /home/withon/.vimrc[J
Searching for "/usr/local/share/vim/vimfiles/after/ftplugin.vim"[J
Searching for "/home/withon/.vim/after/ftplugin.vim"[J
Searching for "indent.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/indent.vim"[J
Searching for "/usr/local/share/vim/vimfiles/indent.vim"[J
Searching for "/usr/local/share/vim/vim80/indent.vim"[J
chdir(/usr/local/share/vim/vim80)[J
fchdir() to previous dir[J
line 33: sourcing "/usr/local/share/vim/vim80/indent.vim"[J
line 1: " Vim support file to switch on loading indent files for file types[J

line 2: "[J

line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 4: " Last Change:^I2008 Feb 22[J

line 5: [J

line 6: if exists("did_indent_on")[J

line 7:   finish[J

line 8: endif[J

line 9: let did_indent_on = 1[J

line 10: [J

line 11: augroup filetypeindent[J

line 12:   au FileType * call s:LoadIndent()[J

line 13:   func! s:LoadIndent()[J

line 31: augroup END[J

finished sourcing /usr/local/share/vim/vim80/indent.vim[J
continuing in /home/withon/.vimrc[J
Searching for "/usr/local/share/vim/vimfiles/after/indent.vim"[J
Searching for "/home/withon/.vim/after/indent.vim"[J
line 34: endif[J

line 35: [J

line 36: " The following are commented out as they cause vim to behave a lot[J

line 37: " differently from regular Vi. They are highly recommended though.[J

line 38: [J

line 39: "set ignorecase        " 搜索模式里忽略大小写[J

line 40: "set smartcase        " 如果搜索模式包含大写字符，不使用 'ignorecase' 选项。只有在输入搜索模式并且打开 'ignorecase' 选项时才会使用。[J

line 41: set autowrite        " 自动把内容写回文件: 如果文件被修改过，在每个 :next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、CTRL-] 和 CTRL-^命令时进行；用 :buffer、CTRL-O、CTRL-I、'{A-Z0-9} 或 `{A-Z0-9} 命令转到别的文件时亦然。[J

line 42: set autoindent        " 设置自动对齐(缩进)：即每行的缩进值与上一行相等；使用 noautoindent 取消设置[J

line 43: "set smartindent        " 智能对齐方式[J

line 44: set tabstop=4        " 设置制表符(tab键)的宽度[J

line 45: set softtabstop=4     " 设置软制表符的宽度    [J

line 46: set shiftwidth=4    " (自动) 缩进使用的4个空格[J

line 47: set cindent            " 使用 C/C++ 语言的自动缩进方式[J

line 48: set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s     "设置C/C++语言的具体缩进方式[J

line 49: "set backspace=2    " 设置退格键可用[J

line 50: set showmatch        " 设置匹配模式，显示匹配的括号[J

line 51: set linebreak        " 整词换行[J

line 52: set whichwrap=b,s,<,>,[,] " 光标从行首和行末时可以跳到另一行去[J

line 53: "set hidden " Hide buffers when they are abandoned[J

line 54: set mouse=a            " Enable mouse usage (all modes)    "使用鼠标[J

line 55: set number            " Enable line number    "显示行号[J

line 56: "set previewwindow    " 标识预览窗口[J

line 57: set history=50        " set command history to 50    "历史记录50条[J

line 58: [J

line 59: [J

line 60: "--状态行设置--[J

line 61: set laststatus=2 " 总显示最后一个窗口的状态行；设为1则窗口数多于一个的时候显示最后一个窗口的状态行；0不显示最后一个窗口的状态行[J

line 62: set ruler            " 标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上。[J

line 63: [J

line 64: "--命令行设置--[J

line 65: set showcmd            " 命令行显示输入的命令[J

line 66: set showmode        " 命令行显示vim当前模式[J

line 67: [J

line 68: "--find setting--[J

line 69: set incsearch        " 输入字符串就显示匹配点[J

line 70: set hlsearch        [J

line 71: """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[J

line 72: " JM Han[J

line 73: """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[J

line 74: set nu[J

line 75: set nocp[J

line 76: set ru[J

line 77: set hls[J

line 78: set is[J

line 79: syntax on[J

line 79: so $VIMRUNTIME/syntax/syntax.vim[J

chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 79: sourcing "/usr/local/share/vim/vim80/syntax/syntax.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 04[J

line 4: [J

line 5: " This file is used for ":syntax on".[J

line 6: " It installs the autocommands and starts highlighting for all buffers.[J

line 7: [J

line 8: if !has("syntax")[J

line 9:   finish[J

line 10: endif[J

line 11: [J

line 12: " If Syntax highlighting appears to be on already, turn it off first, so that[J

line 13: " any leftovers are cleared.[J

line 14: if exists("syntax_on") || exists("syntax_manual")[J

line 15:   so <sfile>:p:h/nosyntax.vim[J

chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 15: sourcing "/usr/local/share/vim/vim80/syntax/nosyntax.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2006 Apr 16[J

line 4: [J

line 5: " This file is used for ":syntax off".[J

line 6: " It removes the autocommands and stops highlighting for all buffers.[J

line 7: [J

line 8: if !has("syntax")[J

line 9:   finish[J

line 10: endif[J

line 11: [J

line 12: " Remove all autocommands for the Syntax event.  This also avoids that[J

line 13: " "syntax=foo" in a modeline triggers the SynSet() function of synload.vim.[J

line 14: au! Syntax[J

line 15: [J

line 16: " remove all syntax autocommands and remove the syntax for each buffer[J

line 17: augroup syntaxset[J

line 18:   au![J

line 19:   au BufEnter * syn clear[J

line 20:   au BufEnter * if exists("b:current_syntax") | unlet b:current_syntax | endif[J

line 21:   doautoall syntaxset BufEnter *[J

line 22:   au![J

line 23: augroup END[J

line 24: [J

line 25: if exists("syntax_on")[J

line 26:   unlet syntax_on[J

line 27: endif[J

line 28: if exists("syntax_manual")[J

line 29:   unlet syntax_manual[J

line 30: endif[J

finished sourcing /usr/local/share/vim/vim80/syntax/nosyntax.vim[J
continuing in /usr/local/share/vim/vim80/syntax/syntax.vim[J
line 16: endif[J

line 17: [J

line 18: " Load the Syntax autocommands and set the default methods for highlighting.[J

line 19: runtime syntax/synload.vim[J

Searching for "syntax/synload.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/syntax/synload.vim"[J
Searching for "/usr/local/share/vim/vimfiles/syntax/synload.vim"[J
Searching for "/usr/local/share/vim/vim80/syntax/synload.vim"[J
chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 19: sourcing "/usr/local/share/vim/vim80/syntax/synload.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2016 Nov 04[J

line 4: [J

line 5: " This file sets up for syntax highlighting.[J

line 6: " It is loaded from "syntax.vim" and "manual.vim".[J

line 7: " 1. Set the default highlight groups.[J

line 8: " 2. Install Syntax autocommands for all the available syntax files.[J

line 9: [J

line 10: if !has("syntax")[J

line 11:   finish[J

line 12: endif[J

line 13: [J

line 14: " let others know that syntax has been switched on[J

line 15: let syntax_on = 1[J

line 16: [J

line 17: " Set the default highlighting colors.  Use a color scheme if specified.[J

line 18: if exists("colors_name")[J

line 19:   exe "colors " . colors_name[J

line 19: colors ron[J

Searching for "colors/ron.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/colors/ron.vim"[J
Searching for "/usr/local/share/vim/vimfiles/colors/ron.vim"[J
Searching for "/usr/local/share/vim/vim80/colors/ron.vim"[J
chdir(/usr/local/share/vim/vim80/colors)[J
fchdir() to previous dir[J
line 19: sourcing "/usr/local/share/vim/vim80/colors/ron.vim"[J
line 1: " local syntax file - set colors on a per-machine basis:[J

line 2: " vim: tw=0 ts=4 sw=4[J

line 3: " Vim color file[J

line 4: " Maintainer:^IRon Aaron <ron@ronware.org>[J

line 5: " Last Change:^I2013 May 24[J

line 6: [J

line 7: set background=dark[J

line 8: hi clear[J

Searching for "syntax/syncolor.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 8: sourcing "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/local/share/vim/vim80/syntax/syncolor.vim[J
continuing in /usr/local/share/vim/vim80/colors/ron.vim[J
Searching for "/usr/local/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/home/withon/.vim/after/syntax/syncolor.vim"[J
line 9: if exists("syntax_on")[J

line 10:   syntax reset[J

line 10: runtime! syntax/syncolor.vim[J

Searching for "syntax/syncolor.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vimfiles/syntax/syncolor.vim"[J
Searching for "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
chdir(/usr/local/share/vim/vim80/syntax)[J
fchdir() to previous dir[J
line 10: sourcing "/usr/local/share/vim/vim80/syntax/syncolor.vim"[J
line 1: " Vim syntax support file[J

line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

line 3: " Last Change:^I2001 Sep 12[J

line 4: [J

line 5: " This file sets up the default methods for highlighting.[J

line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

line 7: " Also used from init_highlight().[J

line 8: [J

line 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

line 11:   command -nargs=* SynColor hi <args>[J

line 12:   command -nargs=* SynLink hi link <args>[J

line 13: else[J

line 14:   if syntax_cmd == "enable"[J

line 15:     " ":syntax enable" keeps any existing colors[J

line 16:     command -nargs=* SynColor hi def <args>[J

line 17:     command -nargs=* SynLink hi def link <args>[J

line 18:   elseif syntax_cmd == "reset"[J

line 19:     " ":syntax reset" resets all colors to the default[J

line 20:     command -nargs=* SynColor hi <args>[J

line 21:     command -nargs=* SynLink hi! link <args>[J

line 22:   else[J

line 23:     " User defined syncolor file has already set the colors.[J

line 24:     finish[J

line 25:   endif[J

line 26: endif[J

line 27: [J

line 28: " Many terminals can only use six different colors (plus black and white).[J

line 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

line 30: " too many colors anyway.[J

line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

line 32: " There are two sets of defaults: for a dark and a light background.[J

line 33: if &background == "dark"[J

line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 43: else[J

line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE[J

line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE[J

line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

line 53: endif[J

line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

line 56: [J

line 57: " Common groups that link to default highlighting.[J

line 58: " You can specify other highlighting easily.[J

line 59: SynLink String^I^IConstant[J

line 59: hi! link String^I^IConstant[J

line 60: SynLink Character^IConstant[J

line 60: hi! link Character^IConstant[J

line 61: SynLink Number^I^IConstant[J

line 61: hi! link Number^I^IConstant[J

line 62: SynLink Boolean^I^IConstant[J

line 62: hi! link Boolean^I^IConstant[J

line 63: SynLink Float^I^INumber[J

line 63: hi! link Float^I^INumber[J

line 64: SynLink Function^IIdentifier[J

line 64: hi! link Function^IIdentifier[J

line 65: SynLink Conditional^IStatement[J

line 65: hi! link Conditional^IStatement[J

line 66: SynLink Repeat^I^IStatement[J

line 66: hi! link Repeat^I^IStatement[J

line 67: SynLink Label^I^IStatement[J

line 67: hi! link Label^I^IStatement[J

line 68: SynLink Operator^IStatement[J

line 68: hi! link Operator^IStatement[J

line 69: SynLink Keyword^I^IStatement[J

line 69: hi! link Keyword^I^IStatement[J

line 70: SynLink Exception^IStatement[J

line 70: hi! link Exception^IStatement[J

line 71: SynLink Include^I^IPreProc[J

line 71: hi! link Include^I^IPreProc[J

line 72: SynLink Define^I^IPreProc[J

line 72: hi! link Define^I^IPreProc[J

line 73: SynLink Macro^I^IPreProc[J

line 73: hi! link Macro^I^IPreProc[J

line 74: SynLink PreCondit^IPreProc[J

line 74: hi! link PreCondit^IPreProc[J

line 75: SynLink StorageClass^IType[J

line 75: hi! link StorageClass^IType[J

line 76: SynLink Structure^IType[J

line 76: hi! link Structure^IType[J

line 77: SynLink Typedef^I^IType[J

line 77: hi! link Typedef^I^IType[J

line 78: SynLink Tag^I^ISpecial[J

line 78: hi! link Tag^I^ISpecial[J

line 79: SynLink SpecialChar^ISpecial[J

line 79: hi! link SpecialChar^ISpecial[J

line 80: SynLink Delimiter^ISpecial[J

line 80: hi! link Delimiter^ISpecial[J

line 81: SynLink SpecialComment^ISpecial[J

line 81: hi! link SpecialComment^ISpecial[J

line 82: SynLink Debug^I^ISpecial[J

line 82: hi! link Debug^I^ISpecial[J

line 83: [J

line 84: delcommand SynColor[J

line 85: delcommand SynLink[J

finished sourcing /usr/local/share/vim/vim80/syntax/syncolor.vim[J
continuing in /usr/local/share/vim/vim80/colors/ron.vim[J
Searching for "/usr/local/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Searching for "/home/withon/.vim/after/syntax/syncolor.vim"[J
line 11: endif[J

line 12: let g:colors_name = "ron"[J

line 13: hi Normal^I^Iguifg=cyan^Iguibg=black[J

line 14: hi NonText^I^Iguifg=yellow guibg=#303030[J

line 15: hi comment^I^Iguifg=green[J

line 16: hi constant^I^Iguifg=cyan^Igui=bold[J

line 17: hi identifier^Iguifg=cyan^Igui=NONE[J

line 18: hi statement^Iguifg=lightblue^Igui=NONE[J

line 19: hi preproc^I^Iguifg=Pink2[J

line 20: hi type^I^I^Iguifg=seagreen^Igui=bold[J

line 21: hi special^I^Iguifg=yellow[J

line 22: hi ErrorMsg^I^Iguifg=Black^Iguibg=Red[J

line 23: hi WarningMsg^Iguifg=Black^Iguibg=Green[J

line 24: hi Error^I^Iguibg=Red[J

line 25: hi Todo^I^I^Iguifg=Black^Iguibg=orange[J

line 26: hi Cursor^I^Iguibg=#60a060 guifg=#00ff00[J

line 27: hi Search^I^Iguibg=darkgray guifg=black gui=bold [J

line 28: hi IncSearch^Igui=NONE guibg=steelblue[J

line 29: hi LineNr^I^Iguifg=darkgrey[J

line 30: hi title^I^Iguifg=darkgrey[J

line 31: hi ShowMarksHL ctermfg=cyan ctermbg=lightblue cterm=bold guifg=yellow guibg=black  gui=bold[J

line 32: hi StatusLineNC^Igui=NONE guifg=lightblue guibg=darkblue[J

line 33: hi StatusLine^Igui=bold^Iguifg=cyan^Iguibg=blue[J

line 34: hi label^I^Iguifg=gold2[J

line 35: hi operator^I^Iguifg=orange[J

line 36: hi clear Visual[J

line 37: hi Visual^I^Iterm=reverse cterm=reverse gui=reverse[J

line 38: hi DiffChange   guibg=darkgreen[J

line 39: hi DiffText^I^Iguibg=olivedrab[J

line 40: hi DiffAdd^I^Iguibg=slateblue[J

line 41: hi DiffDelete   guibg=coral[J

line 42: hi Folded^I^Iguibg=gray30[J

line 43: hi FoldColumn^Iguibg=gray30 guifg=white[J

line 44: hi cIf0^I^I^Iguifg=gray[J

line 45: hi diffOnly^Iguifg=red gui=bold[J

finished sourcing /usr/local/share/vim/vim80/colors/ron.vim[J
continuing in /usr/local/share/vim/vim80/syntax/synload.vim[J
line 20: else[J

line 21:   runtime! syntax/syncolor.vim[J

line 22: endif[J

line 23: [J

line 24: " Line continuation is used here, remove 'C' from 'cpoptions'[J

line 25: let s:cpo_save = &cpo[J

line 26: set cpo&vim[J

line 27: [J

line 28: " First remove all old syntax autocommands.[J

line 29: au! Syntax[J

line 30: [J

line 31: au Syntax *^I^Icall s:SynSet()[J

line 32: [J

line 33: fun! s:SynSet()[J

line 61: [J

line 62: [J

line 63: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)[J

line 68: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif[J

line 69: [J

line 70: [J

line 71: " Source the user-specified syntax highlighting file[J

line 72: if exists("mysyntaxfile")[J

line 73:   let s:fname = expand(mysyntaxfile)[J

line 74:   if filereadable(s:fname)[J

line 75:     execute "source " . fnameescape(s:fname)[J

line 76:   endif[J

line 77: endif[J

line 78: [J

line 79: " Restore 'cpoptions'[J

line 80: let &cpo = s:cpo_save[J

line 81: unlet s:cpo_save[J

finished sourcing /usr/local/share/vim/vim80/syntax/synload.vim[J
continuing in /usr/local/share/vim/vim80/syntax/syntax.vim[J
line 20: [J

line 21: " Load the FileType autocommands if not done yet.[J

line 22: if exists("did_load_filetypes")[J

line 23:   let s:did_ft = 1[J

line 24: else[J

line 25:   filetype on[J

line 26:   let s:did_ft = 0[J

line 27: endif[J

line 28: [J

line 29: " Set up the connection between FileType and Syntax autocommands.[J

line 30: " This makes the syntax automatically set when the file type is detected.[J

line 31: augroup syntaxset[J

line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")[J

line 33: augroup END[J

line 34: [J

line 35: [J

line 36: " Execute the syntax autocommands for the each buffer.[J

line 37: " If the filetype wasn't detected yet, do that now.[J

line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'[J

line 39: " already was set manually (e.g., help buffers).[J

line 40: doautoall syntaxset FileType[J

line 41: if !s:did_ft[J

line 42:   doautoall filetypedetect BufRead[J

line 43: endif[J

finished sourcing /usr/local/share/vim/vim80/syntax/syntax.vim[J
continuing in /home/withon/.vimrc[J
line 80: set backspace=indent,eol,start[J

line 81: set whichwrap=l[J

line 82: set fileencodings=ucs-bom,utf-8,cp936,big5,euc-jp,euc-kr,latin1[J

line 83: set ambiwidth=double[J

line 84: set sw=4[J

line 85: set ts=4[J

line 86: set et[J

line 87: set smarttab[J

line 88: set lbr[J

line 89: set fo+=mB [J

line 90: set sm[J

line 91: set cin[J

line 92: set cino=:0g0t0(sus[J

line 93: set selectmode=[J

line 94: set wildmenu[J

line 95: set nowrap[J

line 96: winpos 562 269[J

line 97: set autoindent[3;562;269t[J

line 98: "用空格键来开关折叠（说明西方“"”后面的内容为注释，不会被VIM所识别）[J

line 99: "set foldenable[J

line 100: "set foldmethod=syntax[J

line 101: "nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>[J

line 102: [J

line 103: "--ctags setting--[J

line 104: " 按下F5重新生成tag文件，并更新taglist[J

line 105: " map <</span> F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<</span> CR><</span> CR> :TlistUpdate<</span> CR>[J

line 106: " imap <</span> F5> <</span> ESC> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<</span> CR><</span> CR> :TlistUpdate<</span> CR>[J

line 107: set tags=tags[J

line 108: set tags+=./tags "add current directory's generated tags file[J

line 109: set tags+=/home/withon/linux/linux-2.6.38/tags "add new tags file(刚刚生成tags的路径，在ctags -R 生成tags文件后，不要将tags移动到别的目录，否则ctrl+］时，会提示找不到源码文件)[J

line 110: [J

line 111: [J

line 112: "-- Taglist setting --[J

line 113: let Tlist_Ctags_Cmd='ctags' "因为我们放在环境变量里，所以可以直接执行[J

line 114: let Tlist_Use_Right_Window=1 "让窗口显示在右边，0的话就是显示在左边[J

line 115: let Tlist_Show_One_File=0 "让taglist可以同时展示多个文件的函数列表[J

line 116: let Tlist_File_Fold_Auto_Close=1 "非当前文件，函数列表折叠隐藏[J

line 117: let Tlist_Exit_OnlyWindow=1 "当taglist是最后一个分割窗口时，自动推出vim[J

line 118: "是否一直处理tags.1:处理;0:不处理[J

line 119: let Tlist_Process_File_Always=1 "实时更新tags[J

line 120: let Tlist_Inc_Winwidth=0[J

line 121: [J

line 122: "-- WinManager setting --[J

line 123: let g:winManagerWindowLayout='FileExplorer|TagList' " 设置我们要管理的插件[J

line 124: "let g:persistentBehaviour=0 " 如果所有编辑文件都关闭了，退出vim[J

line 125: nmap wm :WMToggle[J

line 126: [J

line 127: " -- MiniBufferExplorer --[J

line 128: let g:miniBufExplMapWindowNavVim = 1 " 按下Ctrl+h/j/k/l，可以切换到当前窗口的上下左右窗口[J

line 129: let g:miniBufExplMapWindowNavArrows = 1 " 按下Ctrl+箭头，可以切换到当前窗口的上下左右窗口[J

line 130: let g:miniBufExplMapCTabSwitchBufs = 1 " 启用以下两个功能：Ctrl+tab移到下一个buffer并在当前窗口打开；Ctrl+Shift+tab移到上一个buffer并在当前窗口打开；ubuntu好像不支持[J

line 131: "let g:miniBufExplMapCTabSwitchWindows = 1 " 启用以下两个功能：Ctrl+tab移到下一个窗口；Ctrl+Shift+tab移到上一个窗口；ubuntu好像不支持[J

line 132: let g:miniBufExplModSelTarget = 1 " 不要在不可编辑内容的窗口（如TagList窗口）中打开选中的buffer[J

line 133: [J

line 134: "--fold setting--[J

line 135: set foldmethod=syntax " 用语法高亮来定义折叠[J

line 136: set foldlevel=100 " 启动vim时不要自动折叠代码[J

line 137: set foldcolumn=5 " 设置折叠栏宽度[J

line 138: [J

line 139: "-- QuickFix setting --[J

line 140: " 按下F6，执行make clean[J

line 141: map <F6> :make clean<CR><CR><CR>[J

line 142: " 按下F7，执行make编译程序，并打开quickfix窗口，显示编译信息[J

line 143: map :make :copen[J

line 144: " 按下F8，光标移到上一个错误所在的行[J

line 145: map <F8> :cp<CR>[J

line 146: " 按下F9，光标移到下一个错误所在的行[J

line 147: map :cn[J

No mapping found[J
line 148: [J

finished sourcing $HOME/.vimrc[J
Searching for "pack/*/start/*" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/pack/*/start/*"[J
Searching for "/usr/local/share/vim/vimfiles/pack/*/start/*"[J
Searching for "/usr/local/share/vim/vim80/pack/*/start/*"[J
Searching for "/usr/local/share/vim/vimfiles/after/pack/*/start/*"[J
Searching for "/home/withon/.vim/after/pack/*/start/*"[J
not found in 'packpath': "pack/*/start/*"[J
Searching for "plugin/**/*.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/plugin/**/*.vim"[J
chdir(/home/withon/.vim/plugin)[J
fchdir() to previous dir[J
sourcing "/home/withon/.vim/plugin/minibufexpl.vim"[J
line 1: " Mini Buffer Explorer <minibufexpl.vim>[J

line 2: "[J

line 3: " HINT: Type zR if you don't know how to use folds[J

line 4: "[J

line 5: " Script Info and Documentation  {{{[J

line 6: "=============================================================================[J

line 7: "    Copyright: Copyright (C) 2002 & 2003 Bindu Wavell [J

line 8: "               Permission is hereby granted to use and distribute this code,[J

line 9: "               with or without modifications, provided that this copyright[J

line 10: "               notice is copied with it. Like anything else that's free,[J

line 11: "               minibufexplorer.vim is provided *as is* and comes with no[J

line 12: "               warranty of any kind, either expressed or implied. In no[J

line 13: "               event will the copyright holder be liable for any damamges[J

line 14: "               resulting from the use of this software.[J

line 15: "[J

line 16: " Name Of File: minibufexpl.vim[J

line 17: "  Description: Mini Buffer Explorer Vim Plugin[J

line 18: "   Maintainer: Bindu Wavell <bindu@wavell.net>[J

line 19: "          URL: http://vim.sourceforge.net/scripts/script.php?script_id=159[J

line 20: "  Last Change: Sunday, June 21, 2004[J

line 21: "      Version: 6.3.2[J

line 22: "               Derived from Jeff Lanzarotta's bufexplorer.vim version 6.0.7[J

line 23: "               Jeff can be reached at (jefflanzarotta@yahoo.com) and the[J

line 24: "               original plugin can be found at:[J

line 25: "               http://lanzarotta.tripod.com/vim/plugin/6/bufexplorer.vim.zip[J

line 26: "[J

line 27: "        Usage: Normally, this file should reside in the plugins[J

line 28: "               directory and be automatically sourced. If not, you must[J

line 29: "               manually source this file using ':source minibufexplorer.vim'.[J

line 30: "[J

line 31: "               You may use the default keymappings of[J

line 32: "[J

line 33: "                 <Leader>mbe - Opens MiniBufExplorer[J

line 34: "[J

line 35: "               or you may want to add something like the following[J

line 36: "               key mapping to your _vimrc/.vimrc file.[J

line 37: "[J

line 38: "                 map <Leader>b :MiniBufExplorer<cr>[J

line 39: "[J

line 40: "               However, in most cases you won't need any key-bindings at all.[J

line 41: "[J

line 42: "               <Leader> is usually backslash so type "\mbe" (quickly) to open [J

line 43: "               the -MiniBufExplorer- window.[J

line 44: "[J

line 45: "               Other keymappings include: <Leader>mbc to close the Explorer[J

line 46: "               window,  <Leader>mbu to force the Explorer to Update and[J

line 47: "               <Leader>mbt to toggle the Explorer window; it will open if[J

line 48: "               closed or close if open. Each of these key bindings can be[J

line 49: "               overridden (see the notes on <Leader>mbe above.)[J

line 50: " [J

line 51: "               You can map these additional commands as follows:[J

line 52: "[J

line 53: "                 map <Leader>c :CMiniBufExplorer<cr>[J

line 54: "                 map <Leader>u :UMiniBufExplorer<cr>[J

line 55: "                 map <Leader>t :TMiniBufExplorer<cr>[J

line 56: "[J

line 57: "               NOTE: you can change the key binding used in these mappings[J

line 58: "                     so that they fit with your configuration of vim.[J

line 59: "[J

line 60: "               You can also call each of these features by typing the[J

line 61: "               following in command mode:[J

line 62: "[J

line 63: "                 :MiniBufExplorer    " Open and/or goto Explorer[J

line 64: "                 :CMiniBufExplorer   " Close the Explorer if it's open[J

line 65: "                 :UMiniBufExplorer   " Update Explorer without navigating[J

line 66: "                 :TMiniBufExplorer   " Toggle the Explorer window open and [J

line 67: "                                       closed.[J

line 68: "[J

line 69: "               To control where the new split window goes relative to the [J

line 70: "               current window, use the setting:[J

line 71: "[J

line 72: "                 let g:miniBufExplSplitBelow=0  " Put new window above[J

line 73: "                                                " current or on the[J

line 74: "                                                " left for vertical split[J

line 75: "                 let g:miniBufExplSplitBelow=1  " Put new window below[J

line 76: "                                                " current or on the[J

line 77: "                                                " right for vertical split[J

line 78: "[J

line 79: "               The default for this is read from the &splitbelow VIM option.[J

line 80: "[J

line 81: "               By default we are now (as of 6.0.2) forcing the -MiniBufExplorer-[J

line 82: "               window to open up at the edge of the screen. You can turn this [J

line 83: "               off by setting the following variable in your .vimrc:[J

line 84: "[J

line 85: "                 let g:miniBufExplSplitToEdge = 0[J

line 86: "[J

line 87: "               If you would like a vertical explorer you can assign the column[J

line 88: "               width (in characters) you want for your explorer window with the[J

line 89: "               following .vimrc variable (this was introduced in 6.3.0):[J

line 90: "[J

line 91: "                 let g:miniBufExplVSplit = 20   " column width in chars[J

line 92: "[J

line 93: "               IN HORIZONTAL MODE:[J

line 94: "               It is now (as of 6.1.1) possible to set a maximum height for[J

line 95: "               the -MiniBufExplorer- window. You can set the max height by[J

line 96: "               letting the following variable in your .vimrc:[J

line 97: "[J

line 98: "                 let g:miniBufExplMaxSize = <max lines: defualt 0>[J

line 99: "               [J

line 100: "               setting this to 0 will mean the window gets as big as[J

line 101: "               needed to fit all your buffers. [J

line 102: "[J

line 103: "               NOTE: This was g:miniBufExplMaxHeight before 6.3.0; the old[J

line 104: "               setting is backwards compatible if you don't use MaxSize.[J

line 105: "[J

line 106: "               As of 6.2.2 it is possible to set a minimum height for the [J

line 107: "               -MiniBufExplorer- window. You can set the min height by[J

line 108: "               letting the following variable in your .vimrc:[J

line 109: "[J

line 110: "                 let g:miniBufExplMinSize = <min height: default 1>[J

line 111: "[J

line 112: "               NOTE: This was g:miniBufExplMinHeight before 6.3.0; the old[J

line 113: "               setting is backwards compatible if you don't use MinSize.[J

line 114: "[J

line 115: "               IN VERTICAL MODE: (as of 6.3.0)[J

line 116: "               By default the vertical explorer has a fixed width. If you put:[J

line 117: "[J

line 118: "                 let g:miniBufExplMaxSize = <max width: default 0> [J

line 119: "[J

line 120: "               into your .vimrc then MBE will attempt to set the width of the[J

line 121: "               MBE window to be as wide as your widest tab. The width will not[J

line 122: "               exceed MaxSize even if you have wider tabs. [J

line 123: "[J

line 124: "               Accepting the default value of 0 for this will give you a fixed[J

line 125: "               width MBE window.[J

line 126: "[J

line 127: "               You can specify a MinSize for the vertical explorer window by[J

line 128: "               putting the following in your .vimrc:[J

line 129: "[J

line 130: "                 let g:miniBufExplMinSize = <min width: default 1>[J

line 131: "[J

line 132: "               This will have no effect unless you also specivy MaxSize.[J

line 133: "[J

line 134: "               By default we are now (as of 6.0.1) turning on the MoreThanOne[J

line 135: "               option. This stops the -MiniBufExplorer- from opening [J

line 136: "               automatically until more than one eligible buffer is available.[J

line 137: "               You can turn this feature off by setting the following variable[J

line 138: "               in your .vimrc:[J

line 139: "                 [J

line 140: "                 let g:miniBufExplorerMoreThanOne=1[J

line 141: "[J

line 142: "               (The following enhancement is as of 6.2.2)[J

line 143: "               Setting this to 0 will cause the MBE window to be loaded even[J

line 144: "               if no buffers are available. Setting it to 1 causes the MBE[J

line 145: "               window to be loaded as soon as an eligible buffer is read. You[J

line 146: "               can also set it to larger numbers. So if you set it to 4 for[J

line 147: "               example the MBE window wouldn't auto-open until 4 eligibles[J

line 148: "               buffers had been loaded. This is nice for folks that don't [J

line 149: "               want an MBE window unless they are editing more than two or[J

line 150: "               three buffers.[J

line 151: "[J

line 152: "               To enable the optional mapping of Control + Vim Direction Keys [J

line 153: "               [hjkl] to window movement commands, you can put the following into [J

line 154: "               your .vimrc:[J

line 155: "[J

line 156: "                 let g:miniBufExplMapWindowNavVim = 1[J

line 157: "[J

line 158: "               To enable the optional mapping of Control + Arrow Keys to window [J

line 159: "               movement commands, you can put the following into your .vimrc:[J

line 160: "[J

line 161: "                 let g:miniBufExplMapWindowNavArrows = 1[J

line 162: "[J

line 163: "               To enable the optional mapping of <C-TAB> and <C-S-TAB> to a [J

line 164: "               function that will bring up the next or previous buffer in the[J

line 165: "               current window, you can put the following into your .vimrc:[J

line 166: "[J

line 167: "                 let g:miniBufExplMapCTabSwitchBufs = 1[J

line 168: "[J

line 169: "               To enable the optional mapping of <C-TAB> and <C-S-TAB> to mappings[J

line 170: "               that will move to the next and previous (respectively) window, you[J

line 171: "               can put the following into your .vimrc:[J

line 172: "[J

line 173: "                 let g:miniBufExplMapCTabSwitchWindows = 1[J

line 174: "[J

line 175: "[J

line 176: "               NOTE: If you set the ...TabSwitchBufs AND ...TabSwitchWindows, [J

line 177: "                     ...TabSwitchBufs will be enabled and ...TabSwitchWindows [J

line 178: "                     will not.[J

line 179: "               [J

line 180: "               As of MBE 6.3.0, you can put the following into your .vimrc:[J

line 181: "               [J

line 182: "                 let g:miniBufExplUseSingleClick = 1[J

line 183: "[J

line 184: "               If you would like to single click on tabs rather than double[J

line 185: "               clicking on them to goto the selected buffer. [J

line 186: "[J

line 187: "               NOTE: If you use the single click option in taglist.vim you may [J

line 188: "                     need to get an updated version that includes a patch I [J

line 189: "                     provided to allow both explorers to provide single click [J

line 190: "                     buffer selection.[J

line 191: "[J

line 192: "               It is possible to customize the the highlighting for the tabs in [J

line 193: "               the MBE by configuring the following highlighting groups:[J

line 194: "[J

line 195: "                 MBENormal         - for buffers that have NOT CHANGED and[J

line 196: "                                     are NOT VISIBLE.[J

line 197: "                 MBEChanged        - for buffers that HAVE CHANGED and are[J

line 198: "                                     NOT VISIBLE[J

line 199: "                 MBEVisibleNormal  - buffers that have NOT CHANGED and are[J

line 200: "                                     VISIBLE[J

line 201: "                 MBEVisibleChanged - buffers that have CHANGED and are VISIBLE[J

line 202: "[J

line 203: "               You can either link to an existing highlighting group by[J

line 204: "               adding a command like:[J

line 205: "[J

line 206: "                 hi link MBEVisibleChanged Error[J

line 207: "[J

line 208: "               to your .vimrc or you can specify exact foreground and background[J

line 209: "               colors using the following syntax:[J

line 210: "[J

line 211: "                 hi MBEChanged guibg=darkblue ctermbg=darkblue termbg=white[J

line 212: "[J

line 213: "               NOTE: If you set a colorscheme in your .vimrc you should do it[J

line 214: "                     BEFORE updating the MBE highlighting groups.[J

line 215: "[J

line 216: "               If you use other explorers like TagList you can (As of 6.2.8) put:[J

line 217: "[J

line 218: "                 let g:miniBufExplModSelTarget = 1[J

line 219: " [J

line 220: "               into your .vimrc in order to force MBE to try to place selected [J

line 221: "               buffers into a window that does not have a nonmodifiable buffer.[J

line 222: "               The upshot of this should be that if you go into MBE and select[J

line 223: "               a buffer, the buffer should not show up in a window that is [J

line 224: "               hosting an explorer.[J

line 225: "[J

line 226: "               There is a VIM bug that can cause buffers to show up without [J

line 227: "               their highlighting. The following setting will cause MBE to[J

line 228: "               try and turn highlighting back on (introduced in 6.3.1):[J

line 229: "[J

line 230: "                 let g:miniBufExplForceSyntaxEnable = 1[J

line 231: "[J

line 232: "               MBE has had a basic debugging capability for quite some time.[J

line 233: "               However, it has not been very friendly in the past. As of 6.0.8, [J

line 234: "               you can put one of each of the following into your .vimrc:[J

line 235: "[J

line 236: "                 let g:miniBufExplorerDebugLevel = 0  " MBE serious errors output[J

line 237: "                 let g:miniBufExplorerDebugLevel = 4  " MBE all errors output[J

line 238: "                 let g:miniBufExplorerDebugLevel = 10 " MBE reports everything[J

line 239: "[J

line 240: "               You can also set a DebugMode to cause output to be target as[J

line 241: "               follows (default is mode 3):[J

line 242: "[J

line 243: "                 let g:miniBufExplorerDebugMode  = 0  " Errors will show up in [J

line 244: "                                                      " a vim window[J

line 245: "                 let g:miniBufExplorerDebugMode  = 1  " Uses VIM's echo function[J

line 246: "                                                      " to display on the screen[J

line 247: "                 let g:miniBufExplorerDebugMode  = 2  " Writes to a file[J

line 248: "                                                      " MiniBufExplorer.DBG[J

line 249: "                 let g:miniBufExplorerDebugMode  = 3  " Store output in global:[J

line 250: "                                                 " g:miniBufExplorerDebugOutput[J

line 251: "[J

line 252: "               Or if you are able to start VIM, you might just perform these[J

line 253: "               at a command prompt right before you do the operation that is[J

line 254: "               failing.[J

line 255: "[J

line 256: "      History: Moved to end of file[J

line 257: "      [J

line 258: " Known Issues: When debugging is turned on and set to output to a window, there[J

line 259: "               are some cases where the window is opened more than once, there[J

line 260: "               are other cases where an old debug window can be lost.[J

line 261: " [J

line 262: "               Several MBE commands can break the window history so <C-W>[pnw][J

line 263: "               might not take you to the expected window.[J

line 264: "[J

line 265: "         Todo: Add the ability to specify a regexp for eligible buffers[J

line 266: "               allowing the ability to filter out certain buffers that [J

line 267: "               you don't want to control from MBE[J

line 268: "[J

line 269: "=============================================================================[J

line 270: " }}}[J

line 271: [J

line 272: " Startup Check[J

line 273: "[J

line 274: " Has this plugin already been loaded? {{{[J

line 275: "[J

line 276: if exists('loaded_minibufexplorer')[J

line 277:   finish[J

line 278: endif[J

line 279: let loaded_minibufexplorer = 1[J

line 280: " }}}[J

line 281: [J

line 282: " Mappings and Commands[J

line 283: "[J

line 284: " MBE Keyboard Mappings {{{[J

line 285: " If we don't already have keyboard mappings for MBE then create them [J

line 286: " [J

line 287: if !hasmapto('<Plug>MiniBufExplorer')[J

line 288:   map <unique> <Leader>mbe <Plug>MiniBufExplorer[J

line 289: endif[J

line 290: if !hasmapto('<Plug>CMiniBufExplorer')[J

line 291:   map <unique> <Leader>mbc <Plug>CMiniBufExplorer[J

line 292: endif[J

line 293: if !hasmapto('<Plug>UMiniBufExplorer')[J

line 294:   map <unique> <Leader>mbu <Plug>UMiniBufExplorer[J

line 295: endif[J

line 296: if !hasmapto('<Plug>TMiniBufExplorer')[J

line 297:   map <unique> <Leader>mbt <Plug>TMiniBufExplorer[J

line 298: endif[J

line 299: [J

line 300: " }}}[J

line 301: " MBE <Script> internal map {{{[J

line 302: " [J

line 303: noremap <unique> <script> <Plug>MiniBufExplorer  :call <SID>StartExplorer(1, -1)<CR>:<BS>[J

line 304: noremap <unique> <script> <Plug>CMiniBufExplorer :call <SID>StopExplorer(1)<CR>:<BS>[J

line 305: noremap <unique> <script> <Plug>UMiniBufExplorer :call <SID>AutoUpdate(-1)<CR>:<BS>[J

line 306: noremap <unique> <script> <Plug>TMiniBufExplorer :call <SID>ToggleExplorer()<CR>:<BS>[J

line 307: [J

line 308: " }}}[J

line 309: " MBE commands {{{[J

line 310: " [J

line 311: if !exists(':MiniBufExplorer')[J

line 312:   command! MiniBufExplorer  call <SID>StartExplorer(1, -1)[J

line 313: endif[J

line 314: if !exists(':CMiniBufExplorer')[J

line 315:   command! CMiniBufExplorer  call <SID>StopExplorer(1)[J

line 316: endif[J

line 317: if !exists(':UMiniBufExplorer')[J

line 318:   command! UMiniBufExplorer  call <SID>AutoUpdate(-1)[J

line 319: endif[J

line 320: if !exists(':TMiniBufExplorer')[J

line 321:   command! TMiniBufExplorer  call <SID>ToggleExplorer()[J

line 322: endif[J

line 323: if !exists(':MBEbn')[J

line 324:   command! MBEbn call <SID>CycleBuffer(1)[J

line 325: endif[J

line 326: if !exists(':MBEbp')[J

line 327:   command! MBEbp call <SID>CycleBuffer(0)[J

line 328: endif " }}}[J

line 329: [J

line 330: " Global Configuration Variables[J

line 331: "[J

line 332: " Debug Level {{{[J

line 333: "[J

line 334: " 0 = no logging[J

line 335: " 1=5 = errors ; 1 is the most important[J

line 336: " 5-9 = info ; 5 is the most important[J

line 337: " 10 = Entry/Exit[J

line 338: if !exists('g:miniBufExplorerDebugLevel')[J

line 339:   let g:miniBufExplorerDebugLevel = 0 [J

line 340: endif[J

line 341: [J

line 342: " }}}[J

line 343: " Debug Mode {{{[J

line 344: "[J

line 345: " 0 = debug to a window[J

line 346: " 1 = use vim's echo facility[J

line 347: " 2 = write to a file named MiniBufExplorer.DBG[J

line 348: "     in the directory where vim was started[J

line 349: "     THIS IS VERY SLOW[J

line 350: " 3 = Write into g:miniBufExplorerDebugOutput[J

line 351: "     global variable [This is the default][J

line 352: if !exists('g:miniBufExplorerDebugMode')[J

line 353:   let g:miniBufExplorerDebugMode = 3 [J

line 354: endif [J

line 355: [J

line 356: " }}}[J

line 357: " Allow auto update? {{{[J

line 358: "[J

line 359: " We start out with this off for startup, but once vim is running we [J

line 360: " turn this on.[J

line 361: if !exists('g:miniBufExplorerAutoUpdate')[J

line 362:   let g:miniBufExplorerAutoUpdate = 0[J

line 363: endif[J

line 364: [J

line 365: " }}}[J

line 366: " MoreThanOne? {{{[J

line 367: " Display Mini Buf Explorer when there are 'More Than One' eligible buffers [J

line 368: "[J

line 369: if !exists('g:miniBufExplorerMoreThanOne')[J

line 370:   let g:miniBufExplorerMoreThanOne = 2[J

line 371: endif [J

line 372: [J

line 373: " }}}[J

line 374: " Split below/above/left/right? {{{[J

line 375: " When opening a new -MiniBufExplorer- window, split the new windows below or [J

line 376: " above the current window?  1 = below, 0 = above.[J

line 377: "[J

line 378: if !exists('g:miniBufExplSplitBelow')[J

line 379:   let g:miniBufExplSplitBelow = &splitbelow[J

line 380: endif [J

line 381: [J

line 382: " }}}[J

line 383: " Split to edge? {{{[J

line 384: " When opening a new -MiniBufExplorer- window, split the new windows to the[J

line 385: " full edge? 1 = yes, 0 = no.[J

line 386: "[J

line 387: if !exists('g:miniBufExplSplitToEdge')[J

line 388:   let g:miniBufExplSplitToEdge = 1[J

line 389: endif [J

line 390: [J

line 391: " }}}[J

line 392: " MaxHeight (depreciated) {{{[J

line 393: " When sizing the -MiniBufExplorer- window, assign a maximum window height.[J

line 394: " 0 = size to fit all buffers, otherwise the value is number of lines for[J

line 395: " buffer. [Depreciated use g:miniBufExplMaxSize][J

line 396: "[J

line 397: if !exists('g:miniBufExplMaxHeight')[J

line 398:   let g:miniBufExplMaxHeight = 0[J

line 399: endif [J

line 400: [J

line 401: " }}}[J

line 402: " MaxSize {{{[J

line 403: " Same as MaxHeight but also works for vertical splits if specified with a[J

line 404: " vertical split then vertical resizing will be performed. If left at 0 [J

line 405: " then the number of columns in g:miniBufExplVSplit will be used as a[J

line 406: " static window width.[J

line 407: if !exists('g:miniBufExplMaxSize')[J

line 408:   let g:miniBufExplMaxSize = g:miniBufExplMaxHeight[J

line 409: endif[J

line 410: [J

line 411: " }}}[J

line 412: " MinHeight (depreciated) {{{[J

line 413: " When sizing the -MiniBufExplorer- window, assign a minumum window height.[J

line 414: " the value is minimum number of lines for buffer. Setting this to zero can[J

line 415: " cause strange height behavior. The default value is 1 [Depreciated use[J

line 416: " g:miniBufExplMinSize][J

line 417: "[J

line 418: if !exists('g:miniBufExplMinHeight')[J

line 419:   let g:miniBufExplMinHeight = 1[J

line 420: endif[J

line 421: [J

line 422: " }}}[J

line 423: " MinSize {{{[J

line 424: " Same as MinHeight but also works for vertical splits. For vertical splits, [J

line 425: " this is ignored unless g:miniBufExplMax(Size|Height) are specified.[J

line 426: if !exists('g:miniBufExplMinSize')[J

line 427:   let g:miniBufExplMinSize = g:miniBufExplMinHeight[J

line 428: endif[J

line 429: [J

line 430: " }}}[J

line 431: " Horizontal or Vertical explorer? {{{[J

line 432: " For folks that like vertical explorers, I'm caving in and providing for[J

line 433: " veritcal splits. If this is set to 0 then the current horizontal [J

line 434: " splitting logic will be run. If however you want a vertical split,[J

line 435: " assign the width (in characters) you wish to assign to the MBE window.[J

line 436: "[J

line 437: if !exists('g:miniBufExplVSplit')[J

line 438:   let g:miniBufExplVSplit = 0[J

line 439: endif[J

line 440: [J

line 441: " }}}[J

line 442: " TabWrap? {{{[J

line 443: " By default line wrap is used (possibly breaking a tab name between two[J

line 444: " lines.) Turning this option on (setting it to 1) can take more screen[J

line 445: " space, but will make sure that each tab is on one and only one line.[J

line 446: "[J

line 447: if !exists('g:miniBufExplTabWrap')[J

line 448:   let g:miniBufExplTabWrap = 0[J

line 449: endif[J

line 450: [J

line 451: " }}}[J

line 452: " Extended window navigation commands? {{{[J

line 453: " Global flag to turn extended window navigation commands on or off[J

line 454: " enabled = 1, dissabled = 0[J

line 455: "[J

line 456: if !exists('g:miniBufExplMapWindowNav')[J

line 457:   " This is for backwards compatibility and may be removed in a[J

line 458:   " later release, please use the ...NavVim and/or ...NavArrows [J

line 459:   " settings.[J

line 460:   let g:miniBufExplMapWindowNav = 0[J

line 461: endif[J

line 462: if !exists('g:miniBufExplMapWindowNavVim')[J

line 463:   let g:miniBufExplMapWindowNavVim = 0[J

line 464: endif[J

line 465: if !exists('g:miniBufExplMapWindowNavArrows')[J

line 466:   let g:miniBufExplMapWindowNavArrows = 0[J

line 467: endif[J

line 468: if !exists('g:miniBufExplMapCTabSwitchBufs')[J

line 469:   let g:miniBufExplMapCTabSwitchBufs = 0[J

line 470: endif[J

line 471: " Notice: that if CTabSwitchBufs is turned on then[J

line 472: " we turn off CTabSwitchWindows.[J

line 473: if g:miniBufExplMapCTabSwitchBufs == 1 || !exists('g:miniBufExplMapCTabSwitchWindows')[J

line 474:   let g:miniBufExplMapCTabSwitchWindows = 0[J

line 475: endif [J

line 476: [J

line 477: "[J

line 478: " If we have enabled control + vim direction key remapping[J

line 479: " then perform the remapping[J

line 480: "[J

line 481: " Notice: I left g:miniBufExplMapWindowNav in for backward[J

line 482: " compatibility. Eventually this mapping will be removed so[J

line 483: " please use the newer g:miniBufExplMapWindowNavVim setting.[J

line 484: if g:miniBufExplMapWindowNavVim || g:miniBufExplMapWindowNav[J

line 485:   noremap <C-J> <C-W>j[J

line 486:   noremap <C-K> <C-W>k[J

line 487:   noremap <C-H> <C-W>h[J

line 488:   noremap <C-L> <C-W>l[J

line 489: endif[J

line 490: [J

line 491: "[J

line 492: " If we have enabled control + arrow key remapping[J

line 493: " then perform the remapping[J

line 494: "[J

line 495: if g:miniBufExplMapWindowNavArrows[J

line 496:   noremap <C-Down>  <C-W>j[J

line 497:   noremap <C-Up>    <C-W>k[J

line 498:   noremap <C-Left>  <C-W>h[J

line 499:   noremap <C-Right> <C-W>l[J

line 500: endif[J

line 501: [J

line 502: " If we have enabled <C-TAB> and <C-S-TAB> to switch buffers[J

line 503: " in the current window then perform the remapping[J

line 504: "[J

line 505: if g:miniBufExplMapCTabSwitchBufs[J

line 506:   noremap <C-TAB>   :call <SID>CycleBuffer(1)<CR>:<BS>[J

line 507:   noremap <C-S-TAB> :call <SID>CycleBuffer(0)<CR>:<BS>[J

line 508: endif[J

line 509: [J

line 510: "[J

line 511: " If we have enabled <C-TAB> and <C-S-TAB> to switch windows[J

line 512: " then perform the remapping[J

line 513: "[J

line 514: if g:miniBufExplMapCTabSwitchWindows[J

line 515:   noremap <C-TAB>   <C-W>w[J

line 516:   noremap <C-S-TAB> <C-W>W[J

line 517: endif[J

line 518: [J

line 519: " }}}[J

line 520: " Modifiable Select Target {{{[J

line 521: "[J

line 522: if !exists('g:miniBufExplModSelTarget')[J

line 523:   let g:miniBufExplModSelTarget = 0[J

line 524: endif[J

line 525: [J

line 526: "}}}[J

line 527: " Force Syntax Enable {{{[J

line 528: "[J

line 529: if !exists('g:miniBufExplForceSyntaxEnable')[J

line 530:   let g:miniBufExplForceSyntaxEnable = 0[J

line 531: endif[J

line 532: [J

line 533: " }}}[J

line 534: " Single/Double Click? {{{[J

line 535: " flag that can be set to 1 in a users .vimrc to allow [J

line 536: " single click switching of tabs. By default we use[J

line 537: " double click for tab selection.[J

line 538: "[J

line 539: if !exists('g:miniBufExplUseSingleClick')[J

line 540:   let g:miniBufExplUseSingleClick = 0[J

line 541: endif [J

line 542: [J

line 543: "[J

line 544: " attempt to perform single click mapping, it would be much[J

line 545: " nicer if we could nnoremap <buffer> ... however vim does[J

line 546: " not fire the <buffer> <leftmouse> when you use the mouse[J

line 547: " to enter a buffer.[J

line 548: "[J

line 549: if g:miniBufExplUseSingleClick == 1[J

line 550:   let s:clickmap = ':if bufname("%") == "-MiniBufExplorer-" <bar> call <SID>MBEClick() <bar> endif <CR>'[J

line 551:   if maparg('<LEFTMOUSE>', 'n') == '' [J

line 552:     " no mapping for leftmouse[J

line 553:     exec ':nnoremap <silent> <LEFTMOUSE> <LEFTMOUSE>' . s:clickmap[J

line 554:   else[J

line 555:     " we have a mapping[J

line 556:     let  g:miniBufExplDoneClickSave = 1[J

line 557:     let  s:m = ':nnoremap <silent> <LEFTMOUSE> <LEFTMOUSE>'[J

line 558:     let  s:m = s:m . substitute(substitute(maparg('<LEFTMOUSE>', 'n'), '|', '<bar>', 'g'), '\c^<LEFTMOUSE>', '', '')[J

line 559:     let  s:m = s:m . s:clickmap[J

line 560:     exec s:m[J

line 561:   endif[J

line 562: endif " }}}[J

line 563: [J

line 564: " Variables used internally[J

line 565: "[J

line 566: " Script/Global variables {{{[J

line 567: " Global used to store the buffer list so we don't update the[J

line 568: " UI unless the list has changed.[J

line 569: if !exists('g:miniBufExplBufList')[J

line 570:   let g:miniBufExplBufList = ''[J

line 571: endif[J

line 572: [J

line 573: " Variable used as a mutex so that we don't do lots[J

line 574: " of AutoUpdates at the same time.[J

line 575: if !exists('g:miniBufExplInAutoUpdate')[J

line 576:   let g:miniBufExplInAutoUpdate = 0[J

line 577: endif[J

line 578: [J

line 579: " In debug mode 3 this variable will hold the debug output[J

line 580: if !exists('g:miniBufExplorerDebugOutput')[J

line 581:   let g:miniBufExplorerDebugOutput = ''[J

line 582: endif[J

line 583: [J

line 584: " In debug mode 3 this variable will hold the debug output[J

line 585: if !exists('g:miniBufExplForceDisplay')[J

line 586:   let g:miniBufExplForceDisplay = 0[J

line 587: endif[J

line 588: [J

line 589: " Variable used to pass maxTabWidth info between functions[J

line 590: let s:maxTabWidth = 0 [J

line 591: [J

line 592: " Variable used to count debug output lines[J

line 593: let s:debugIndex = 0 [J

line 594: [J

line 595:   [J

line 596: " }}}[J

line 597: " Setup an autocommand group and some autocommands {{{[J

line 598: " that keep our explorer updated automatically.[J

line 599: "[J

line 600: augroup MiniBufExplorer[J

line 601: autocmd MiniBufExplorer BufDelete   * call <SID>DEBUG('-=> BufDelete AutoCmd', 10) |call <SID>AutoUpdate(expand('<abuf>'))[J

line 602: autocmd MiniBufExplorer BufEnter    * call <SID>DEBUG('-=> BufEnter  AutoCmd', 10) |call <SID>AutoUpdate(-1)[J

line 603: autocmd MiniBufExplorer VimEnter    * call <SID>DEBUG('-=> VimEnter  AutoCmd', 10) |let g:miniBufExplorerAutoUpdate = 1 |call <SID>AutoUpdate(-1)[J

line 604: " }}}[J

line 605: [J

line 606: " Functions[J

line 607: "[J

line 608: " StartExplorer - Sets up our explorer and causes it to be displayed {{{[J

line 609: "[J

line 610: function! <SID>StartExplorer(sticky, delBufNum)[J

line 706: [J

line 707: " }}}[J

line 708: " StopExplorer - Looks for our explorer and closes the window if it is open {{{[J

line 709: "[J

line 710: function! <SID>StopExplorer(sticky)[J

line 732: [J

line 733: " }}}[J

line 734: " ToggleExplorer - Looks for our explorer and opens/closes the window {{{[J

line 735: "[J

line 736: function! <SID>ToggleExplorer()[J

line 757: [J

line 758: " }}}[J

line 759: " FindWindow - Return the window number of a named buffer {{{[J

line 760: " If none is found then returns -1. [J

line 761: "[J

line 762: function! <SID>FindWindow(bufName, doDebug)[J

line 782: [J

line 783: " }}}[J

line 784: " FindCreateWindow - Attempts to find a window for a named buffer. {{{[J

line 785: "[J

line 786: " If it is found then moves there. Otherwise creates a new window and [J

line 787: " configures it and moves there.[J

line 788: "[J

line 789: " forceEdge, -1 use defaults, 0 below, 1 above[J

line 790: " isExplorer, 0 no, 1 yes [J

line 791: " doDebug, 0 no, 1 yes[J

line 792: "[J

line 793: function! <SID>FindCreateWindow(bufName, forceEdge, isExplorer, doDebug)[J

line 891: [J

line 892: " }}}[J

line 893: " DisplayBuffers - Wrapper for getting MBE window shown {{{[J

line 894: "[J

line 895: " Makes sure we are in our explorer, then erases the current buffer and turns [J

line 896: " it into a mini buffer explorer window.[J

line 897: "[J

line 898: function! <SID>DisplayBuffers(delBufNum)[J

line 920: [J

line 921: " }}}[J

line 922: " Resize Window - Set width/height of MBE window {{{[J

line 923: " [J

line 924: " Makes sure we are in our explorer, then sets the height/width for our explorer [J

line 925: " window so that we can fit all of our information without taking extra lines.[J

line 926: "[J

line 927: function! <SID>ResizeWindow()[J

line 1001: [J

line 1002: " }}}[J

line 1003: " ShowBuffers - Clear current buffer and put the MBE text into it {{{[J

line 1004: " [J

line 1005: " Makes sure we are in our explorer, then adds a list of all modifiable [J

line 1006: " buffers to the current buffer. Special marks are added for buffers that [J

line 1007: " are in one or more windows (*) and buffers that have been modified (+)[J

line 1008: "[J

line 1009: function! <SID>ShowBuffers(delBufNum)[J

line 1038: [J

line 1039: " }}}[J

line 1040: " Max - Returns the max of two numbers {{{[J

line 1041: "[J

line 1042: function! <SID>Max(argOne, argTwo)[J

line 1049: [J

line 1050: " }}}[J

line 1051: " BuildBufferList - Build the text for the MBE window {{{[J

line 1052: " [J

line 1053: " Creates the buffer list string and returns 1 if it is different than[J

line 1054: " last time this was called and 0 otherwise.[J

line 1055: "[J

line 1056: function! <SID>BuildBufferList(delBufNum, updateBufList)[J

line 1128: [J

line 1129: " }}}[J

line 1130: " HasEligibleBuffers - Are there enough MBE eligible buffers to open the MBE window? {{{[J

line 1131: " [J

line 1132: " Returns 1 if there are any buffers that can be displayed in a [J

line 1133: " mini buffer explorer. Otherwise returns 0. If delBufNum is[J

line 1134: " any non -1 value then don't include that buffer in the list[J

line 1135: " of eligible buffers.[J

line 1136: "[J

line 1137: function! <SID>HasEligibleBuffers(delBufNum)[J

line 1189: [J

line 1190: " }}}[J

line 1191: " Auto Update - Function called by auto commands for auto updating the MBE {{{[J

line 1192: "[J

line 1193: " IF auto update is turned on        AND[J

line 1194: "    we are in a real buffer         AND[J

line 1195: "    we have enough eligible buffers THEN[J

line 1196: " Update our explorer and get back to the current window[J

line 1197: "[J

line 1198: " If we get a buffer number for a buffer that [J

line 1199: " is being deleted, we need to make sure and [J

line 1200: " remove the buffer from the list of eligible [J

line 1201: " buffers in case we are down to one eligible[J

line 1202: " buffer, in which case we will want to close[J

line 1203: " the MBE window.[J

line 1204: "[J

line 1205: function! <SID>AutoUpdate(delBufNum)[J

line 1296: [J

line 1297: " }}}[J

line 1298: " GetSelectedBuffer - From the MBE window, return the bufnum for buf under cursor {{{[J

line 1299: " [J

line 1300: " If we are in our explorer window then return the buffer number[J

line 1301: " for the buffer under the cursor.[J

line 1302: "[J

line 1303: function! <SID>GetSelectedBuffer()[J

line 1325: [J

line 1326: " }}}[J

line 1327: " MBESelectBuffer - From the MBE window, open buffer under the cursor {{{[J

line 1328: " [J

line 1329: " If we are in our explorer, then we attempt to open the buffer under the[J

line 1330: " cursor in the previous window.[J

line 1331: "[J

line 1332: function! <SID>MBESelectBuffer()[J

line 1393: [J

line 1394: " }}}[J

line 1395: " MBEDeleteBuffer - From the MBE window, delete selected buffer from list {{{[J

line 1396: " [J

line 1397: " After making sure that we are in our explorer, This will delete the buffer [J

line 1398: " under the cursor. If the buffer under the cursor is being displayed in a[J

line 1399: " window, this routine will attempt to get different buffers into the [J

line 1400: " windows that will be affected so that windows don't get removed.[J

line 1401: "[J

line 1402: function! <SID>MBEDeleteBuffer()[J

line 1505: [J

line 1506: " }}}[J

line 1507: " MBEClick - Handle mouse double click {{{[J

line 1508: "[J

line 1509: function! s:MBEClick()[J

line 1513: [J

line 1514: "[J

line 1515: " MBEDoubleClick - Double click with the mouse.[J

line 1516: "[J

line 1517: function! s:MBEDoubleClick()[J

line 1521: [J

line 1522: " }}}[J

line 1523: " CycleBuffer - Cycle Through Buffers {{{[J

line 1524: "[J

line 1525: " Move to next or previous buffer in the current window. If there [J

line 1526: " are no more modifiable buffers then stay on the current buffer.[J

line 1527: " can be called with no parameters in which case the buffers are[J

line 1528: " cycled forward. Otherwise a single argument is accepted, if [J

line 1529: " it's 0 then the buffers are cycled backwards, otherwise they[J

line 1530: " are cycled forward.[J

line 1531: "[J

line 1532: function! <SID>CycleBuffer(forward)[J

line 1568: [J

line 1569: " }}}[J

line 1570: " DEBUG - Display debug output when debugging is turned on {{{[J

line 1571: "[J

line 1572: " Thanks to Charles E. Campbell, Jr. PhD <cec@NgrOyphSon.gPsfAc.nMasa.gov> [J

line 1573: " for Decho.vim which was the inspiration for this enhanced debugging [J

line 1574: " capability.[J

line 1575: "[J

line 1576: function! <SID>DEBUG(msg, level)[J

line 1641: [J

line 1642: " MBE Script History {{{[J

line 1643: "=============================================================================[J

line 1644: "[J

line 1645: "      History: 6.3.2 o For some reason there was still a call to StopExplorer[J

line 1646: "                       with 2 params. Very old bug. I know I fixed before, [J

line 1647: "                       any way many thanks to Jason Mills for reporting this![J

line 1648: "               6.3.1 o Include folds in source so that it's easier to [J

line 1649: "                       navigate.[J

line 1650: "                     o Added g:miniBufExplForceSyntaxEnable setting for folks[J

line 1651: "                       that want a :syntax enable to be called when we enter [J

line 1652: "                       buffers. This can resolve issues caused by a vim bug[J

line 1653: "                       where buffers show up without highlighting when another [J

line 1654: "                       buffer has been closed, quit, wiped or deleted.[J

line 1655: "               6.3.0 o Added an option to allow single click (rather than[J

line 1656: "                       the default double click) to select buffers in the[J

line 1657: "                       MBE window. This feature was requested by AW Law[J

line 1658: "                       and was inspired by taglist.vim. Note that you will [J

line 1659: "                       need the latest version of taglist.vim if you want to [J

line 1660: "                       use MBE and taglist both with singleclick turned on.[J

line 1661: "                       Also thanks to AW Law for pointing out that you can[J

line 1662: "                       make an Explorer not be listed in a standard :ls.[J

line 1663: "                     o Added the ability to have your tabs show up in a[J

line 1664: "                       vertical window rather than the standard horizontal[J

line 1665: "                       one. Just let g:miniBufExplVSplit = <width> in your[J

line 1666: "                       .vimrc and your will get this functionality.[J

line 1667: "                     o If you use the vertical explorer and you want it to[J

line 1668: "                       autosize then let g:miniBufExplMaxSize = <max width>[J

line 1669: "                       in your .vimrc. You may use the MinSize letting in[J

line 1670: "                       addition to the MaxLetting if you don't want a super[J

line 1671: "                       thin window.[J

line 1672: "                     o g:miniBufExplMaxHeight was renamed g:miniBufExplMaxSize[J

line 1673: "                       g:miniBufExplMinHeight was renamed g:miniBufExplMinSize[J

line 1674: "                       the old settings are backwards compatible if you don't[J

line 1675: "                       use the new settings, but they are depreciated.[J

line 1676: "               6.2.8 o Add an option to stop MBE from targeting non-modifiable[J

line 1677: "                       buffers when switching buffers. Thanks to AW Law for[J

line 1678: "                       the inspiration for this. This may not work if a user[J

line 1679: "                       has lots of explorer/help windows open.[J

line 1680: "               6.2.7 o Very minor bug fix for people who want to set[J

line 1681: "                       loaded_minibufexplorer in their .vimrc in order to[J

line 1682: "                       stop MBE from loading. 99.99% of users do not need[J

line 1683: "                       this update.[J

line 1684: "               6.2.6 o Moved history to end of source file[J

line 1685: "                     o Updated highlighting documentation[J

line 1686: "                     o Created global commands MBEbn and MBEbp that can be [J

line 1687: "                       used in mappings if folks want to cycle buffers while [J

line 1688: "                       skipping non-eligible buffers.[J

line 1689: "               6.2.5 o Added <Leader>mbt key mapping which will toggle[J

line 1690: "                       the MBE window. I map this to F3 in my .vimrc[J

line 1691: "                       with "map <F3> :TMiniBufExplorer<CR>" which [J

line 1692: "                       means I can easily close the MBE window when I'm [J

line 1693: "                       not using it and get it back when I want it.[J

line 1694: "                     o Changed default debug mode to 3 (write to global[J

line 1695: "                       g:miniBufExplorerDebugOutput)[J

line 1696: "                     o Made a pass through the documentation to clarify [J

line 1697: "                       serveral issues and provide more complete docs[J

line 1698: "                       for mappings and commands.[J

line 1699: "               6.2.4 o Because of the autocommand switch (see 6.2.0) it [J

line 1700: "                       was possible to remove the restriction on the[J

line 1701: "                       :set hidden option. It is now possible to use[J

line 1702: "                       this option with MBE.[J

line 1703: "               6.2.3 o Added miniBufExplTabWrap option. It is turned [J

line 1704: "                       off by default. When turned on spaces are added[J

line 1705: "                       between tabs and gq} is issued to perform line[J

line 1706: "                       formatting. This won't work very well if filenames[J

line 1707: "                       contain spaces. It would be pretty easy to write[J

line 1708: "                       my own formatter, but I'm too lazy, so if someone[J

line 1709: "                       really needs that feature I'll add it :)[J

line 1710: "               6.2.2 o Changed the way the g:miniBufExplorerMoreThanOne[J

line 1711: "                       global is handled. You can set this to the number[J

line 1712: "                       of eligible buffers you want to be loaded before[J

line 1713: "                       the MBE window is loaded. Setting it to 0 causes[J

line 1714: "                       the MBE window to be opened even if there are no[J

line 1715: "                       buffers. Setting it to 4 causes the window to stay[J

line 1716: "                       closed until the 4th eligible buffer is loaded.[J

line 1717: "                     o Added a MinHeight option. This is nice if you want[J

line 1718: "                       the MBE window to always take the same amount of[J

line 1719: "                       space. For example set MaxSize and MinSize to 2[J

line 1720: "                       and set MoreThanOne to 0 and you will always have[J

line 1721: "                       a 2 row (plus the ruler :) MBE window.[J

line 1722: "                       NOTE: in 6.3.0 we started using MinSize instead of[J

line 1723: "                       Minheight. This will still work if MinSize is not[J

line 1724: "                       specified, but it is depreciated. Use MinSize instead.[J

line 1725: "                     o I now setlocal foldcomun=0 and nonumber in the MBE [J

line 1726: "                       window. This is for those of you that like to have[J

line 1727: "                       these options turned on locally. I'm assuming noone[J

line 1728: "                       outthere wants foldcolumns and line numbers in the[J

line 1729: "                       MBE window? :)[J

line 1730: "                     o Fixed a bug where an empty MBE window was taking half[J

line 1731: "                       of the screen (partly why the MinHeight option was [J

line 1732: "                       added.)[J

line 1733: "               6.2.1 o If MBE is the only window (because of :bd for example)[J

line 1734: "                       and there are still eligible buffers then one of them[J

line 1735: "                       will be displayed.[J

line 1736: "                     o The <Leader>mbe mapping now highlights the buffer from[J

line 1737: "                       the current window.[J

line 1738: "                     o The delete ('d') binding in the MBE window now restors[J

line 1739: "                       the cursor position, which can help if you want to [J

line 1740: "                       delete several buffers in a row that are not at the[J

line 1741: "                       beginning of the buffer list.[J

line 1742: "                     o Added a new key binding ('p') in the MBE window to [J

line 1743: "                       switch to the previous window (last edit window)[J

line 1744: "               6.2.0 o Major overhaul of autocommand and list updating code,[J

line 1745: "                       we now have much better handling of :bd (which is the [J

line 1746: "                       most requested feature.) As well as resolving other[J

line 1747: "                       issues where the buffer list would not be updated[J

line 1748: "                       automatically. The old version tried to trap specific[J

line 1749: "                       events, this one just updates frequently, but it keeps[J

line 1750: "                       track and only changes the screen if there has been[J

line 1751: "                       a change.[J

line 1752: "                     o Added g:miniBufExplMaxHeight variable so you can keep[J

line 1753: "                       the -MiniBufExplorer- window small when you have lots[J

line 1754: "                       of buffers (or buffers with long names :)[J

line 1755: "                       NOTE: in 6.3.0 we started using MaxSize instead of[J

line 1756: "                       MaxHeight. This will still work if MaxSize is not[J

line 1757: "                       specified, but it is depreciated. Use MaxSize instead.[J

line 1758: "                     o Improvement to internal syntax highlighting code[J

line 1759: "                       I renamed the syntax group names. Anyone who has [J

line 1760: "                       figured out how to use them already shouldn't have[J

line 1761: "                       any trouble with the new Nameing :)[J

line 1762: "                     o Added debug mode 3 which writes to a global variable[J

line 1763: "                       this is fast and doesn't mess with the buffer/window[J

line 1764: "                       lists.[J

line 1765: "               6.1.0 o <Leader>mbc was failing because I was calling one of[J

line 1766: "                       my own functions with the wrong number of args. :([J

line 1767: "                       Thanks to Gerry Patterson for finding this![J

line 1768: "                       This code is very stable (although it has some[J

line 1769: "                       idiocyncracies.)[J

line 1770: "               6.0.9 o Double clicking tabs was overwriting the cliboard [J

line 1771: "                       register on MS Windows.  Thanks to Shoeb Bhinderwala [J

line 1772: "                       for reporting this issue.[J

line 1773: "               6.0.8 o Apparently some VIM builds are having a hard time with[J

line 1774: "                       line continuation in scripts so the few that were here[J

line 1775: "                       have been removed.[J

line 1776: "                     o Generalized FindExplorer and FindCreateExplorer so[J

line 1777: "                       that they can be used for the debug window. Renaming[J

line 1778: "                       to FindWindow and FindCreateWindow.[J

line 1779: "                     o Updated debugging code so that debug output is put into[J

line 1780: "                       a buffer which can then be written to disk or emailed[J

line 1781: "                       to me when someone is having a major issue. Can also[J

line 1782: "                       write directly to a file (VERY SLOWLY) on UNIX or Win32[J

line 1783: "                       (not 95 or 98 at the moment) or use VIM's echo function [J

line 1784: "                       to display the output to the screen.[J

line 1785: "                     o Several people have had issues when the hidden option [J

line 1786: "                       is turned on. So I have put in several checks to make[J

line 1787: "                       sure folks know this if they try to use MBE with this[J

line 1788: "                       option set.[J

line 1789: "               6.0.7 o Handling BufDelete autocmd so that the UI updates [J

line 1790: "                       properly when using :bd (rather than going through [J

line 1791: "                       the MBE UI.)[J

line 1792: "                     o The AutoUpdate code will now close the MBE window when [J

line 1793: "                       there is a single eligible buffer available.[J

line 1794: "                       This has the usefull side effect of stopping the MBE[J

line 1795: "                       window from blocking the VIM session open when you close [J

line 1796: "                       the last buffer.[J

line 1797: "                     o Added functions, commands and maps to close & update[J

line 1798: "                       the MBE window (<leader>mbc and <leader>mbu.)[J

line 1799: "                     o Made MBE open/close state be sticky if set through[J

line 1800: "                       StartExplorer(1) or StopExplorer(1), which are [J

line 1801: "                       called from the standard mappings. So if you close[J

line 1802: "                       the mbe window with \mbc it won't be automatically [J

line 1803: "                       opened again unless you do a \mbe (or restart VIM).[J

line 1804: "                     o Removed spaces between "tabs" (even more mini :)[J

line 1805: "                     o Simplified MBE tab processing [J

line 1806: "               6.0.6 o Fixed register overwrite bug found by S<e9>bastien Pierre[J

line 1807: "               6.0.5 o Fixed an issue with window sizing when we run out of [J

line 1808: "                       buffers.  [J

line 1809: "                     o Fixed some weird commenting bugs.  [J

line 1810: "                     o Added more optional fancy window/buffer navigation:[J

line 1811: "                     o You can turn on the capability to use control and the [J

line 1812: "                       arrow keys to move between windows.[J

line 1813: "                     o You can turn on the ability to use <C-TAB> and [J

line 1814: "                       <C-S-TAB> to open the next and previous (respectively) [J

line 1815: "                       buffer in the current window.[J

line 1816: "                     o You can turn on the ability to use <C-TAB> and [J

line 1817: "                       <C-S-TAB> to switch windows (forward and backwards [J

line 1818: "                       respectively.)[J

line 1819: "               6.0.4 o Added optional fancy window navigation: [J

line 1820: "                     o Holding down control and pressing a vim direction [J

line 1821: "                       [hjkl] will switch windows in the indicated direction.[J

line 1822: "               6.0.3 o Changed buffer name to -MiniBufExplorer- to resolve[J

line 1823: "                       Issue in filename pattern matching on Windows.[J

line 1824: "               6.0.2 o 2 Changes requested by Suresh Govindachar:[J

line 1825: "                     o Added SplitToEdge option and set it on by default[J

line 1826: "                     o Added tab and shift-tab mappings in [MBE] window[J

line 1827: "               6.0.1 o Added MoreThanOne option and set it on by default[J

line 1828: "                       MiniBufExplorer will not automatically open until[J

line 1829: "                       more than one eligible buffers are opened. This[J

line 1830: "                       reduces cluter when you are only working on a[J

line 1831: "                       single file. [J

line 1832: "                       NOTE: See change log for 6.2.2 for more details about [J

line 1833: "                             this feature[J

line 1834: "               6.0.0 o Initial Release on November 20, 2001[J

line 1835: "[J

line 1836: "=============================================================================[J

line 1837: " }}}[J

line 1838: " vim:ft=vim:fdm=marker:ff=unix:nowrap:tabstop=4:shiftwidth=4:softtabstop=4:smarttab:shiftround:expandtab[J

finished sourcing /home/withon/.vim/plugin/minibufexpl.vim[J
chdir(/home/withon/.vim/plugin)[J
fchdir() to previous dir[J
sourcing "/home/withon/.vim/plugin/project.vim"[J
line 1: "=============================================================================[J

line 2: " File:        project.vim[J

line 3: " Author:      Aric Blumer (Aric.Blumer at aricvim@charter.net)[J

line 4: " Last Change: Fri 13 Oct 2006 09:47:08 AM EDT[J

line 5: " Version:     1.4.1[J

line 6: "=============================================================================[J

line 7: " See documentation in accompanying help file[J

line 8: " You may use this code in whatever way you see fit.[J

line 9: [J

line 10: if exists('loaded_project') || &cp[J

line 11:   finish[J

line 12: endif[J

line 13: let loaded_project=1[J

line 14: [J

line 15: function! s:Project(filename) " <<<[J

line 1264: [J

line 1265: if exists(':Project') != 2[J

line 1266:     command -nargs=? -complete=file Project call <SID>Project('<args>')[J

line 1267: endif[J

line 1268: " Toggle Mapping[J

line 1269: if !exists("*<SID>DoToggleProject()") "<<<[J

line 1270:     function! s:DoToggleProject()[J

line 1283: endif ">>>[J

line 1284: nnoremap <script> <Plug>ToggleProject :call <SID>DoToggleProject()<CR>[J

line 1285: if exists('g:proj_flags') && (match(g:proj_flags, '\Cg') != -1)[J

line 1286:     if !hasmapto('<Plug>ToggleProject')[J

line 1287:         nmap <silent> <F12> <Plug>ToggleProject[J

line 1288:     endif[J

line 1289: endif[J

line 1290: [J

line 1291: finish[J

finished sourcing /home/withon/.vim/plugin/project.vim[J
chdir(/home/withon/.vim/plugin)[J
fchdir() to previous dir[J
sourcing "/home/withon/.vim/plugin/taglist.vim"[J
line 1: " File: taglist.vim[J

line 2: " Author: Yegappan Lakshmanan (yegappan AT yahoo DOT com)[J

line 3: " Version: 4.6[J

line 4: " Last Modified: Feb 26, 2013[J

line 5: " Copyright: Copyright (C) 2002-2013 Yegappan Lakshmanan[J

line 6: "            Permission is hereby granted to use and distribute this code,[J

line 7: "            with or without modifications, provided that this copyright[J

line 8: "            notice is copied with it. Like anything else that's free,[J

line 9: "            taglist.vim is provided *as is* and comes with no warranty of any[J

line 10: "            kind, either expressed or implied. In no event will the copyright[J

line 11: "            holder be liable for any damamges resulting from the use of this[J

line 12: "            software.[J

line 13: "[J

line 14: " The "Tag List" plugin is a source code browser plugin for Vim and provides[J

line 15: " an overview of the structure of the programming language files and allows[J

line 16: " you to efficiently browse through source code files for different[J

line 17: " programming languages.  You can visit the taglist plugin home page for more[J

line 18: " information:[J

line 19: "[J

line 20: "       http://vim-taglist.sourceforge.net[J

line 21: "[J

line 22: " You can subscribe to the taglist mailing list to post your questions[J

line 23: " or suggestions for improvement or to report bugs. Visit the following[J

line 24: " page for subscribing to the mailing list:[J

line 25: "[J

line 26: "       http://groups.yahoo.com/group/taglist/[J

line 27: "[J

line 28: " For more information about using this plugin, after installing the[J

line 29: " taglist plugin, use the ":help taglist" command.[J

line 30: "[J

line 31: " Installation[J

line 32: " ------------[J

line 33: " 1. Download the taglist.zip file and unzip the files to the $HOME/.vim[J

line 34: "    or the $HOME/vimfiles or the $VIM/vimfiles directory. This should[J

line 35: "    unzip the following two files (the directory structure should be[J

line 36: "    preserved):[J

line 37: "[J

line 38: "       plugin/taglist.vim - main taglist plugin file[J

line 39: "       doc/taglist.txt    - documentation (help) file[J

line 40: "[J

line 41: "    Refer to the 'add-plugin', 'add-global-plugin' and 'runtimepath'[J

line 42: "    Vim help pages for more details about installing Vim plugins.[J

line 43: " 2. Change to the $HOME/.vim/doc or $HOME/vimfiles/doc or[J

line 44: "    $VIM/vimfiles/doc directory, start Vim and run the ":helptags ."[J

line 45: "    command to process the taglist help file.[J

line 46: " 3. If the exuberant ctags utility is not present in your PATH, then set the[J

line 47: "    Tlist_Ctags_Cmd variable to point to the location of the exuberant ctags[J

line 48: "    utility (not to the directory) in the .vimrc file.[J

line 49: " 4. If you are running a terminal/console version of Vim and the[J

line 50: "    terminal doesn't support changing the window width then set the[J

line 51: "    'Tlist_Inc_Winwidth' variable to 0 in the .vimrc file.[J

line 52: " 5. Restart Vim.[J

line 53: " 6. You can now use the ":TlistToggle" command to open/close the taglist[J

line 54: "    window. You can use the ":help taglist" command to get more[J

line 55: "    information about using the taglist plugin.[J

line 56: "[J

line 57: " ****************** Do not modify after this line ************************[J

line 58: [J

line 59: " Line continuation used here[J

line 60: if !exists('s:cpo_save')[J

line 61:     " If the taglist plugin is sourced recursively, the 'cpo' setting will be[J

line 62:     " set to the default value.  To avoid this problem, save the cpo setting[J

line 63:     " only when the plugin is loaded for the first time.[J

line 64:     let s:cpo_save = &cpo[J

line 65: endif[J

line 66: set cpo&vim[J

line 67: [J

line 68: if !exists('loaded_taglist')[J

line 69:     " First time loading the taglist plugin[J

line 70:     "[J

line 71:     " To speed up the loading of Vim, the taglist plugin uses autoload[J

line 72:     " mechanism to load the taglist functions.[J

line 73:     " Only define the configuration variables, user commands and some[J

line 74:     " auto-commands and finish sourcing the file[J

line 75: [J

line 76:     " The taglist plugin requires the built-in Vim system() function. If this[J

line 77:     " function is not available, then don't load the plugin.[J

line 78:     if !exists('*system')[J

line 80:         echomsg 'Taglist: Vim system() built-in function is not available. ' . 'Plugin is not loaded.'[J

line 81:         let loaded_taglist = 'no'[J

line 82:         let &cpo = s:cpo_save[J

line 83:         finish[J

line 84:     endif[J

line 85: [J

line 86:     " Location of the exuberant ctags tool[J

line 87:     if !exists('Tlist_Ctags_Cmd')[J

line 88:         if executable('exuberant-ctags')[J

line 89:             " On Debian Linux, exuberant ctags is installed[J

line 90:             " as exuberant-ctags[J

line 91:             let Tlist_Ctags_Cmd = 'exuberant-ctags'[J

line 92:         elseif executable('exctags')[J

line 93:             " On Free-BSD, exuberant ctags is installed as exctags[J

line 94:             let Tlist_Ctags_Cmd = 'exctags'[J

line 95:         elseif executable('ctags')[J

line 96:             let Tlist_Ctags_Cmd = 'ctags'[J

line 97:         elseif executable('ctags.exe')[J

line 98:             let Tlist_Ctags_Cmd = 'ctags.exe'[J

line 99:         elseif executable('tags')[J

line 100:             let Tlist_Ctags_Cmd = 'tags'[J

line 101:         else[J

line 103:             echomsg 'Taglist: Exuberant ctags (http://ctags.sf.net) ' . 'not found in PATH. Plugin is not loaded.'[J

line 104:             " Skip loading the plugin[J

line 105:             let loaded_taglist = 'no'[J

line 106:             let &cpo = s:cpo_save[J

line 107:             finish[J

line 108:         endif[J

line 109:     endif[J

line 110: [J

line 111: [J

line 112:     " Automatically open the taglist window on Vim startup[J

line 113:     if !exists('Tlist_Auto_Open')[J

line 114:         let Tlist_Auto_Open = 0[J

line 115:     endif[J

line 116: [J

line 117:     " When the taglist window is toggle opened, move the cursor to the[J

line 118:     " taglist window[J

line 119:     if !exists('Tlist_GainFocus_On_ToggleOpen')[J

line 120:         let Tlist_GainFocus_On_ToggleOpen = 0[J

line 121:     endif[J

line 122: [J

line 123:     " Process files even when the taglist window is not open[J

line 124:     if !exists('Tlist_Process_File_Always')[J

line 125:         let Tlist_Process_File_Always = 0[J

line 126:     endif[J

line 127: [J

line 128:     if !exists('Tlist_Show_Menu')[J

line 129:         let Tlist_Show_Menu = 0[J

line 130:     endif[J

line 131: [J

line 132:     " Tag listing sort type - 'name' or 'order'[J

line 133:     if !exists('Tlist_Sort_Type')[J

line 134:         let Tlist_Sort_Type = 'order'[J

line 135:     endif[J

line 136: [J

line 137:     " Tag listing window split (horizontal/vertical) control[J

line 138:     if !exists('Tlist_Use_Horiz_Window')[J

line 139:         let Tlist_Use_Horiz_Window = 0[J

line 140:     endif[J

line 141: [J

line 142:     " Open the vertically split taglist window on the left or on the right[J

line 143:     " side.  This setting is relevant only if Tlist_Use_Horiz_Window is set to[J

line 144:     " zero (i.e.  only for vertically split windows)[J

line 145:     if !exists('Tlist_Use_Right_Window')[J

line 146:         let Tlist_Use_Right_Window = 0[J

line 147:     endif[J

line 148: [J

line 149:     " Increase Vim window width to display vertically split taglist window.[J

line 150:     " For MS-Windows version of Vim running in a MS-DOS window, this must be[J

line 151:     " set to 0 otherwise the system may hang due to a Vim limitation.[J

line 152:     if !exists('Tlist_Inc_Winwidth')[J

line 153:         if (has('win16') || has('win95')) && !has('gui_running')[J

line 154:             let Tlist_Inc_Winwidth = 0[J

line 155:         else[J

line 156:             let Tlist_Inc_Winwidth = 1[J

line 157:         endif[J

line 158:     endif[J

line 159: [J

line 160:     " Vertically split taglist window width setting[J

line 161:     if !exists('Tlist_WinWidth')[J

line 162:         let Tlist_WinWidth = 30[J

line 163:     endif[J

line 164: [J

line 165:     " Horizontally split taglist window height setting[J

line 166:     if !exists('Tlist_WinHeight')[J

line 167:         let Tlist_WinHeight = 10[J

line 168:     endif[J

line 169: [J

line 170:     " Display tag prototypes or tag names in the taglist window[J

line 171:     if !exists('Tlist_Display_Prototype')[J

line 172:         let Tlist_Display_Prototype = 0[J

line 173:     endif[J

line 174: [J

line 175:     " Display tag scopes in the taglist window[J

line 176:     if !exists('Tlist_Display_Tag_Scope')[J

line 177:         let Tlist_Display_Tag_Scope = 1[J

line 178:     endif[J

line 179: [J

line 180:     " Use single left mouse click to jump to a tag. By default this is disabled.[J

line 181:     " Only double click using the mouse will be processed.[J

line 182:     if !exists('Tlist_Use_SingleClick')[J

line 183:         let Tlist_Use_SingleClick = 0[J

line 184:     endif[J

line 185: [J

line 186:     " Control whether additional help is displayed as part of the taglist or[J

line 187:     " not.  Also, controls whether empty lines are used to separate the tag[J

line 188:     " tree.[J

line 189:     if !exists('Tlist_Compact_Format')[J

line 190:         let Tlist_Compact_Format = 0[J

line 191:     endif[J

line 192: [J

line 193:     " Exit Vim if only the taglist window is currently open. By default, this is[J

line 194:     " set to zero.[J

line 195:     if !exists('Tlist_Exit_OnlyWindow')[J

line 196:         let Tlist_Exit_OnlyWindow = 0[J

line 197:     endif[J

line 198: [J

line 199:     " Automatically close the folds for the non-active files in the taglist[J

line 200:     " window[J

line 201:     if !exists('Tlist_File_Fold_Auto_Close')[J

line 202:         let Tlist_File_Fold_Auto_Close = 0[J

line 203:     endif[J

line 204: [J

line 205:     " Close the taglist window when a tag is selected[J

line 206:     if !exists('Tlist_Close_On_Select')[J

line 207:         let Tlist_Close_On_Select = 0[J

line 208:     endif[J

line 209: [J

line 210:     " Automatically update the taglist window to display tags for newly[J

line 211:     " edited files[J

line 212:     if !exists('Tlist_Auto_Update')[J

line 213:         let Tlist_Auto_Update = 1[J

line 214:     endif[J

line 215: [J

line 216:     " Automatically highlight the current tag[J

line 217:     if !exists('Tlist_Auto_Highlight_Tag')[J

line 218:         let Tlist_Auto_Highlight_Tag = 1[J

line 219:     endif[J

line 220:     [J

line 221:     " Automatically highlight the current tag on entering a buffer[J

line 222:     if !exists('Tlist_Highlight_Tag_On_BufEnter')[J

line 223:         let Tlist_Highlight_Tag_On_BufEnter = 1[J

line 224:     endif[J

line 225: [J

line 226:     " Enable fold column to display the folding for the tag tree[J

line 227:     if !exists('Tlist_Enable_Fold_Column')[J

line 228:         let Tlist_Enable_Fold_Column = 1[J

line 229:     endif[J

line 230: [J

line 231:     " Display the tags for only one file in the taglist window[J

line 232:     if !exists('Tlist_Show_One_File')[J

line 233:         let Tlist_Show_One_File = 0[J

line 234:     endif[J

line 235: [J

line 236:     if !exists('Tlist_Max_Submenu_Items')[J

line 237:         let Tlist_Max_Submenu_Items = 20[J

line 238:     endif[J

line 239: [J

line 240:     if !exists('Tlist_Max_Tag_Length')[J

line 241:         let Tlist_Max_Tag_Length = 10[J

line 242:     endif[J

line 243: [J

line 244:     " Do not change the name of the taglist title variable. The winmanager[J

line 245:     " plugin relies on this name to determine the title for the taglist[J

line 246:     " plugin.[J

line 247:     let TagList_title = "__Tag_List__"[J

line 248: [J

line 249:     " Taglist debug messages[J

line 250:     let s:tlist_msg = ''[J

line 251: [J

line 252:     " Define the taglist autocommand to automatically open the taglist window[J

line 253:     " on Vim startup[J

line 254:     if g:Tlist_Auto_Open[J

line 255:         autocmd VimEnter * nested call s:Tlist_Window_Check_Auto_Open()[J

line 256:     endif[J

line 257: [J

line 258:     " Refresh the taglist[J

line 259:     if g:Tlist_Process_File_Always[J

line 260:         autocmd BufEnter * call s:Tlist_Refresh()[J

line 261:     endif[J

line 262: [J

line 263:     if g:Tlist_Show_Menu[J

line 264:         autocmd GUIEnter * call s:Tlist_Menu_Init()[J

line 265:     endif[J

line 266: [J

line 267:     " When the taglist buffer is created when loading a Vim session file,[J

line 268:     " the taglist buffer needs to be initialized. The BufFilePost event[J

line 269:     " is used to handle this case.[J

line 270:     autocmd BufFilePost __Tag_List__ call s:Tlist_Vim_Session_Load()[J

line 271: [J

line 272:     " Define the user commands to manage the taglist window[J

line 273:     command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()[J

line 274:     command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()[J

line 275:     " For backwards compatiblity define the Tlist command[J

line 276:     command! -nargs=0 -bar Tlist TlistToggle[J

line 278:     command! -nargs=+ -complete=file TlistAddFiles  call s:Tlist_Add_Files(<f-args>)[J

line 280:     command! -nargs=+ -complete=dir TlistAddFilesRecursive call s:Tlist_Add_Files_Recursive(<f-args>)[J

line 281:     command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()[J

line 282:     command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()[J

line 284:     command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag( fnamemodify(bufname('%'), ':p'), line('.'), 2, 1)[J

line 285:     " For backwards compatiblity define the TlistSync command[J

line 286:     command! -nargs=0 -bar TlistSync TlistHighlightTag[J

line 288:     command! -nargs=* -complete=buffer TlistShowPrototype echo Tlist_Get_Tag_Prototype_By_Line(<f-args>)[J

line 290:     command! -nargs=* -complete=buffer TlistShowTag echo Tlist_Get_Tagname_By_Line(<f-args>)[J

line 292:     command! -nargs=* -complete=file TlistSessionLoad call s:Tlist_Session_Load(<q-args>)[J

line 294:     command! -nargs=* -complete=file TlistSessionSave call s:Tlist_Session_Save(<q-args>)[J

line 295:     command! -bar TlistLock let Tlist_Auto_Update=0[J

line 296:     command! -bar TlistUnlock let Tlist_Auto_Update=1[J

line 297: [J

line 298:     " Commands for enabling/disabling debug and to display debug messages[J

line 300:     command! -nargs=? -complete=file -bar TlistDebug call s:Tlist_Debug_Enable(<q-args>)[J

line 301:     command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()[J

line 302:     command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()[J

line 303: [J

line 304:     " Define autocommands to autoload the taglist plugin when needed.[J

line 305: [J

line 306:     " Trick to get the current script ID[J

line 307:     map <SID>xx <SID>xx[J

line 309:     let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\(\d\+_\)xx$', '\1', '')[J

line 310:     unmap <SID>xx[J

line 311: [J

line 313:     exe 'autocmd FuncUndefined *' . s:tlist_sid . 'Tlist_* source ' . escape(expand('<sfile>'), ' ')[J

line 313: autocmd FuncUndefined *12_Tlist_* source /home/withon/.vim/plugin/taglist.vim[J

line 315:     exe 'autocmd FuncUndefined *' . s:tlist_sid . 'Tlist_Window_* source ' . escape(expand('<sfile>'), ' ')[J

line 315: autocmd FuncUndefined *12_Tlist_Window_* source /home/withon/.vim/plugin/taglist.vim[J

line 317:     exe 'autocmd FuncUndefined *' . s:tlist_sid . 'Tlist_Menu_* source ' . escape(expand('<sfile>'), ' ')[J

line 317: autocmd FuncUndefined *12_Tlist_Menu_* source /home/withon/.vim/plugin/taglist.vim[J

line 319:     exe 'autocmd FuncUndefined Tlist_* source ' . escape(expand('<sfile>'), ' ')[J

line 319: autocmd FuncUndefined Tlist_* source /home/withon/.vim/plugin/taglist.vim[J

line 321:     exe 'autocmd FuncUndefined TagList_* source ' . escape(expand('<sfile>'), ' ')[J

line 321: autocmd FuncUndefined TagList_* source /home/withon/.vim/plugin/taglist.vim[J

line 322: [J

line 323:     let loaded_taglist = 'fast_load_done'[J

line 324: [J

line 325:     if g:Tlist_Show_Menu && has('gui_running')[J

line 326:         call s:Tlist_Menu_Init()[J

line 327:     endif[J

line 328: [J

line 329:     " restore 'cpo'[J

line 330:     let &cpo = s:cpo_save[J

line 331:     finish[J

finished sourcing /home/withon/.vim/plugin/taglist.vim[J
chdir(/home/withon/.vim/plugin)[J
fchdir() to previous dir[J
sourcing "/home/withon/.vim/plugin/winfileexplorer.vim"[J
line 1: "=============================================================================[J

line 2: " File: explorer.vim[J

line 3: " Author: M A Aziz Ahmed (aziz@acorn-networks.com)[J

line 4: " Last Change: Sun Mar 31 11:00 PM 2002 PST[J

line 5: " Version: 2.5[J

line 6: " Additions by Mark Waggoner (waggoner@aracnet.com) et al.[J

line 7: "-----------------------------------------------------------------------------[J

line 8: " This file implements a file explorer. Latest version available at:[J

line 9: " http://www.freespeech.org/aziz/vim/[J

line 10: " Updated version available at:[J

line 11: " http://www.aracnet.com/~waggoner[J

line 12: "-----------------------------------------------------------------------------[J

line 13: " Normally, this file will reside in the plugins directory and be[J

line 14: " automatically sourced.  If not, you must manually source this file[J

line 15: " using :source explorer.vim[J

line 16: "[J

line 17: " To use it, just edit a directory (vi dirname) or type :Explore to[J

line 18: " launch the file explorer in the current window, or :Sexplore to split[J

line 19: " the current window and launch explorer there.[J

line 20: "[J

line 21: " If the current buffer is modified, the window is always split.[J

line 22: "[J

line 23: " It is also possible to delete files and rename files within explorer.[J

line 24: " See :help file-explorer for more details[J

line 25: "[J

line 26: "-----------------------------------------------------------------------------[J

line 27: " Update history removed, it's not very interesting.[J

line 28: " Contributors were: Doug Potts, Bram Moolenaar, Thomas K<f6>hler[J

line 29: "[J

line 30: " This is a modified version to be compatible with winmanager.vim. [J

line 31: " Changes by Srinath Avadhanula[J

line 32: "=============================================================================[J

line 33: [J

line 34: " Has this already been loaded?[J

line 35: if exists("loaded_winfileexplorer")[J

line 36:   finish[J

line 37: endif[J

line 38: let loaded_winfileexplorer=1[J

line 39: [J

line 40: " Line continuation used here[J

line 41: let s:cpo_save = &cpo[J

line 42: set cpo&vim[J

line 43: [J

line 44: "---[J

line 45: " Default settings for global configuration variables[J

line 46: [J

line 47: " Split vertically instead of horizontally?[J

line 48: if !exists("g:explVertical")[J

line 49:   let g:explVertical=0[J

line 50: endif[J

line 51: [J

line 52: " How big to make the window? Set to "" to avoid resizing[J

line 53: if !exists("g:explWinSize")[J

line 54:   let g:explWinSize=15[J

line 55: endif[J

line 56: [J

line 57: " When opening a new file/directory, split below current window (or[J

line 58: " above)?  1 = below, 0 = to above[J

line 59: if !exists("g:explSplitBelow")[J

line 60:   let g:explSplitBelow = &splitbelow[J

line 61: endif[J

line 62: [J

line 63: " Split to right of current window (or to left)?[J

line 64: " 1 = to right, 0 = to left[J

line 65: if !exists("g:explSplitRight")[J

line 66:   let g:explSplitRight = &splitright[J

line 67: endif[J

line 68: [J

line 69: " Start the first explorer window...[J

line 70: " Defaults to be the same as explSplitBelow[J

line 71: if !exists("g:explStartBelow")[J

line 72:   let g:explStartBelow = g:explSplitBelow[J

line 73: endif[J

line 74: [J

line 75: " Start the first explorer window...[J

line 76: " Defaults to be the same as explSplitRight[J

line 77: if !exists("g:explStartRight")[J

line 78:   let g:explStartRight = g:explSplitRight[J

line 79: endif[J

line 80: [J

line 81: " Show detailed help?[J

line 82: if !exists("g:explDetailedHelp")[J

line 83:   let g:explDetailedHelp=0[J

line 84: endif[J

line 85: [J

line 86: " Show file size and dates?[J

line 87: if !exists("g:explDetailedList")[J

line 88:   let g:explDetailedList=0[J

line 89: endif[J

line 90: [J

line 91: " Format for the date[J

line 92: if !exists("g:explDateFormat")[J

line 93:   let g:explDateFormat="%d %b %Y %H:%M"[J

line 94: endif[J

line 95: [J

line 96: " Files to hide[J

line 97: if !exists("g:explHideFiles")[J

line 98:   let g:explHideFiles=''[J

line 99: endif[J

line 100: [J

line 101: " Field to sort by[J

line 102: if !exists("g:explSortBy")[J

line 103:   let g:explSortBy='name'[J

line 104: endif[J

line 105: [J

line 106: " Segregate directories? 1, 0, or -1[J

line 107: if !exists("g:explDirsFirst")[J

line 108:   let g:explDirsFirst=1[J

line 109: endif[J

line 110: [J

line 111: " Segregate items in suffixes option? 1, 0, or -1[J

line 112: if !exists("g:explSuffixesLast")[J

line 113:   let g:explSuffixesLast=1[J

line 114: endif[J

line 115: [J

line 116: " Include separator lines between directories, files, and suffixes?[J

line 117: if !exists("g:explUseSeparators")[J

line 118:   let g:explUseSeparators=0[J

line 119: endif[J

line 120: [J

line 121: " whether or not to take over the functioning of the default file-explorer[J

line 122: " plugin[J

line 123: if !exists("g:defaultExplorer")[J

line 124: ^Ilet g:defaultExplorer = 1[J

line 125: end[J

line 126: [J

line 127: if !exists('g:favDirs')[J

line 128: ^Iif exists('$HOME')[J

line 129: ^I^Ilet s:favDirs = expand('$HOME').'/'[J

line 130: ^Iend[J

line 131: else[J

line 132: ^Iif exists('$HOME')[J

line 133: ^I^Ilet s:favDirs = g:favDirs."\/\n".expand('$HOME')[J

line 134: ^Iend[J

line 135: end[J

line 136: let s:favDirs = substitute(s:favDirs, '\', '/', 'g')[J

line 137: let s:favDirs = substitute(s:favDirs, '\/\/', '\/', 'g')[J

line 138: [J

line 139: " -- stuff used by winmanager[J

line 140: let g:FileExplorer_title = "[File List]"[J

line 141: function! FileExplorer_Start()[J

line 153: [J

line 154: function! FileExplorer_IsValid()[J

line 157: [J

line 158: function! FileExplorer_WrapUp()[J

line 163: " --- end winmanager specific stuff (for now)[J

line 164: [J

line 165: "---[J

line 166: " script variables - these are the same across all[J

line 167: " explorer windows[J

line 168: [J

line 169: " characters that must be escaped for a regular expression[J

line 170: let s:escregexp = '/*^$.~\'[J

line 171: [J

line 172: " characters that must be escaped for filenames[J

line 173: if has("dos16") || has("dos32") || has("win16") || has("win32") || has("os2")[J

line 174:   let s:escfilename = ' %#'[J

line 175: else[J

line 176:   let s:escfilename = ' \%#'[J

line 177: endif[J

line 178: [J

line 179: [J

line 180: " A line to use for separating sections[J

line 181: let s:separator='"---------------------------------------------------'[J

line 182: [J

line 183: "---[J

line 184: " Create commands[J

line 185: " commenting stuff for beta version release[J

line 186: " if !exists(':Explore')[J

line 187: "   command -n=? -complete=dir Explore :call s:StartExplorer(0, '<a>')[J

line 188: " endif[J

line 189: " if !exists(':Sexplore')[J

line 190: "   command -n=? -complete=dir Sexplore :call s:StartExplorer(1, '<a>')[J

line 191: " endif[J

line 192: " [J

line 193: "---[J

line 194: " Start the explorer using the preferences from the global variables[J

line 195: "[J

line 196: function! s:StartExplorer(split, start_dir)[J

line 228: [J

line 229: [J

line 230: "---[J

line 231: " This is the main entry for 'editing' a directory[J

line 232: "[J

line 233: function! s:EditDir(...)[J

line 467: [J

line 468: "---[J

line 469: " If this is the only window, open file in a new window[J

line 470: " Otherwise, open file in the most recently visited window[J

line 471: "[J

line 472: function! s:OpenEntryPrevWindow()[J

line 509: [J

line 510: "[J

line 511: " save the contents of the currently displayed file listing into the current[J

line 512: " s:dir_i variable[J

line 513: "[J

line 514: function! s:RestoreFileDisplay()[J

line 529: [J

line 530: "---[J

line 531: " Open a file or directory in a new window.[J

line 532: " Use g:explSplitBelow and g:explSplitRight to decide where to put the[J

line 533: " split window, and resize the original explorer window if it is[J

line 534: " larger than g:explWinSize[J

line 535: "[J

line 536: function! s:OpenEntry()[J

line 640: [J

line 641: "---[J

line 642: " Double click with the mouse[J

line 643: "[J

line 644: function s:DoubleClick()[J

line 651: [J

line 652: "---[J

line 653: " Open file or directory in the same window as the explorer is[J

line 654: " currently in[J

line 655: "[J

line 656: function! s:EditEntry(movefirst,editcmd)[J

line 699: [J

line 700: "---[J

line 701: " Create a regular expression out of the suffixes option for sorting[J

line 702: " and set a string to indicate whether we are sorting with the[J

line 703: " suffixes at the end (or the beginning)[J

line 704: "[J

line 705: function! s:SetSuffixesLast()[J

line 723: [J

line 724: "---[J

line 725: " Show the header and contents of the directory[J

line 726: "[J

line 727: function! s:ShowDirectory()[J

line 785: [J

line 786: function! s:AddToFavDir()[J

line 798: [J

line 799: "---[J

line 800: " Mark which items are directories - called once for each file name[J

line 801: " must be used only when size/date is not displayed[J

line 802: "[J

line 803: function! s:MarkDirs()[J

line 828: [J

line 829: "---[J

line 830: " Make sure a path has proper form[J

line 831: "[J

line 832: function! s:Path(p)[J

line 839: [J

line 840: "---[J

line 841: " Extract the file name from a line in several different forms[J

line 842: "[J

line 843: function! s:GetFullFileNameEsc()[J

line 846: [J

line 847: function! s:GetFileNameEsc()[J

line 850: [J

line 851: function! s:EscapeFilename(name)[J

line 854: [J

line 855: [J

line 856: function! s:GetFullFileName()[J

line 866: [J

line 867: function! s:GetFileName()[J

line 870: [J

line 871: function! s:ExtractFullFileName(line)[J

line 879: [J

line 880: function! s:ExtractFileName(line)[J

line 883: [J

line 884: "---[J

line 885: " Get the size of the file[J

line 886: function! s:ExtractFileSize(line)[J

line 893: [J

line 894: "---[J

line 895: " Get the date of the file as a number[J

line 896: function! s:ExtractFileDate(line)[J

line 903: [J

line 904: [J

line 905: "---[J

line 906: " Add the header with help information[J

line 907: "[J

line 908: function! s:AddHeader()[J

line 930: [J

line 931: function! s:PrintFavDirs()[J

line 956: [J

line 957: "---[J

line 958: " Show the size and date for each file[J

line 959: "[J

line 960: function! s:AddFileInfo()[J

line 1006: [J

line 1007: [J

line 1008: "----[J

line 1009: " Get the modification time for a file[J

line 1010: "[J

line 1011: function! s:FileModDate(name)[J

line 1019: [J

line 1020: "---[J

line 1021: " Delete a file or files[J

line 1022: "[J

line 1023: function! s:DeleteFile() range[J

line 1070: [J

line 1071: "---[J

line 1072: " Rename a file[J

line 1073: "[J

line 1074: function! s:RenameFile()[J

line 1106: [J

line 1107: "---[J

line 1108: " Toggle between short and long help[J

line 1109: "[J

line 1110: function! s:ToggleHelp()[J

line 1124: [J

line 1125: "---[J

line 1126: " Update the header[J

line 1127: "[J

line 1128: function! s:UpdateHeader()[J

line 1148: [J

line 1149: "---[J

line 1150: " Toggle long vs. short listing[J

line 1151: "[J

line 1152: function! s:ToggleLongList()[J

line 1164: [J

line 1165: "---[J

line 1166: " Show all files - remove filtering[J

line 1167: "[J

line 1168: function! s:ShowAllFiles()[J

line 1175: [J

line 1176: "---[J

line 1177: " Figure out what section we are in[J

line 1178: "[J

line 1179: function! s:GetSection()[J

line 1189: [J

line 1190: "---[J

line 1191: " Remove section separators[J

line 1192: "[J

line 1193: function! s:RemoveSeparators()[J

line 1201: [J

line 1202: "---[J

line 1203: " Add section separators[J

line 1204: "   between directories and files if they are separated[J

line 1205: "   between files and 'suffixes' files if they are separated[J

line 1206: function! s:AddSeparators()[J

line 1225: [J

line 1226: "---[J

line 1227: " General string comparison function[J

line 1228: "[J

line 1229: function! s:StrCmp(line1, line2, direction)[J

line 1238: [J

line 1239: "---[J

line 1240: " Function for use with Sort(), to compare the file names[J

line 1241: " Default sort is to put in alphabetical order, but with all directory[J

line 1242: " names before all file names[J

line 1243: "[J

line 1244: function! s:FileNameCmp(line1, line2, direction)[J

line 1262: [J

line 1263: "---[J

line 1264: " Function for use with Sort(), to compare the file modification dates[J

line 1265: " Default sort is to put NEWEST files first.  Reverse will put oldest[J

line 1266: " files first[J

line 1267: "[J

line 1268: function! s:FileDateCmp(line1, line2, direction)[J

line 1291: [J

line 1292: "---[J

line 1293: " Function for use with Sort(), to compare the file sizes[J

line 1294: " Default sort is to put largest files first.  Reverse will put[J

line 1295: " smallest files first[J

line 1296: "[J

line 1297: function! s:FileSizeCmp(line1, line2, direction)[J

line 1319: [J

line 1320: "---[J

line 1321: " Sort lines.  SortR() is called recursively.[J

line 1322: "[J

line 1323: function! s:SortR(start, end, cmp, direction)[J

line 1364: [J

line 1365: "---[J

line 1366: " To Sort a range of lines, pass the range to Sort() along with the name of a[J

line 1367: " function that will compare two lines.[J

line 1368: "[J

line 1369: function! s:Sort(cmp,direction) range[J

line 1372: [J

line 1373: "---[J

line 1374: " Reverse the current sort order[J

line 1375: "[J

line 1376: function! s:SortReverse()[J

line 1387: [J

line 1388: "---[J

line 1389: " Toggle through the different sort orders[J

line 1390: "[J

line 1391: function! s:SortSelect()[J

line 1405: [J

line 1406: "---[J

line 1407: " Sort the file listing[J

line 1408: "[J

line 1409: function! s:SortListing(msg)[J

line 1459: [J

line 1460: if !g:defaultExplorer[J

line 1461: ^Ilet loaded_explorer = 1[J

line 1462: ^I"---[J

line 1463: ^I" Create commands[J

line 1464: ^Iif !exists(':Explore')[J

line 1465: ^I^Icommand -n=? -complete=dir Explore :call s:StartExplorer(0, '<a>')[J

line 1466: ^Iendif[J

line 1467: ^Iif !exists(':Sexplore')[J

line 1468: ^I^Icommand -n=? -complete=dir Sexplore :call s:StartExplorer(1, '<a>')[J

line 1469: ^Iendif[J

line 1470: ^I" NOTE: This is a special command NOT to be used by users. Its here for[J

line 1471: ^I" communication between winmanager and explorer.vim. This command only works[J

line 1472: ^I" if you are currently 'editing' a directory, in which case, you dont need[J

line 1473: ^I" this anyway. USE AT YOUR OWN RISK.[J

line 1474: ^Iif !exists(':ExploreInCurrentWindow')[J

line 1475: ^I^Icommand -n=? -complete=dir ExploreInCurrentWindow :call <SID>EditDir()[J

line 1476: ^Iendif[J

line 1477: end[J

line 1478: [J

line 1479: " CleanUpHistory[J

line 1480: function! <SID>CleanUpHistory()[J

line 1484: [J

line 1485: " restore 'cpo'[J

line 1486: let &cpo = s:cpo_save[J

line 1487: unlet s:cpo_save[J

line 1488: [J

line 1489: [J

line 1490: " vim: ts=4:noet:sw=4[J

finished sourcing /home/withon/.vim/plugin/winfileexplorer.vim[J
chdir(/home/withon/.vim/plugin)[J
fchdir() to previous dir[J
sourcing "/home/withon/.vim/plugin/winmanager.vim"[J
line 1: "=============================================================================[J

line 2: "        File: winmanager.vim[J

line 3: "      Author: Srinath Avadhanula (srinath@eecs.berkeley.edu)[J

line 4: " Last Change: Wed Apr 03 05:00 PM 2002 PST[J

line 5: "        Help: winmanager.vim is a plugin which implements a classical windows[J

line 6: "              type IDE in Vim-6.0.  When you open up a new file, simply type[J

line 7: "              in :WMToggle. This will start up the file explorer.[J

line 8: "[J

line 9: "[J

line 10: " NOTE:  Starting from winmanager-2.x you can add new plugins to winmanager[J

line 11: " and also customize the window layout in your .vimrc[J

line 12: "[J

line 13: " See ":help winmanager" for additional details.[J

line 14: " ============================================================================[J

line 15: [J

line 16: " quit if the user doesnt want us or if we are already loaded.[J

line 17: if exists("loaded_winmanager")[J

line 18: ^Ifinish[J

line 19: end[J

line 20: let loaded_winmanager = 1[J

line 21: [J

line 22: " width of the explorer windows [J

line 23: if !exists("g:winManagerWidth")[J

line 24: ^Ilet g:winManagerWidth = 25[J

line 25: end[J

line 26: [J

line 27: " whether to close winmanager if only explorer windows are visible.[J

line 28: if !exists("g:persistentBehaviour")[J

line 29: ^Ilet g:persistentBehaviour = 1[J

line 30: end[J

line 31: [J

line 32: " default window layout[J

line 33: if !exists("g:winManagerWindowLayout")[J

line 34: ^Ilet g:winManagerWindowLayout = "FileExplorer,TagsExplorer|BufExplorer"[J

line 35: end[J

line 36: [J

line 37: " use default explorer plugin which ships with vim.[J

line 38: if !exists("g:defaultExplorer")[J

line 39: ^Ilet g:defaultExplorer = 1[J

line 40: end[J

line 41: [J

line 42: " commands[J

line 43: " toggling between the windows manager open or closed. this can also be used[J

line 44: " to start win manager.[J

line 45: if !exists(':WMToggle')[J

line 46: ^Icommand -nargs=0 WMToggle :silent call <SID>ToggleWindowsManager()[J

line 47: end[J

line 48: [J

line 49: " WManager and WMclose still exist for backward compatibility, but their use[J

line 50: " is deprecated because WMToggle has the functionality of both of them.[J

line 51: if !exists(':WManager')[J

line 52: ^Icommand -nargs=0 WManager :silent call <SID>StartWindowsManager()[J

line 53: end[J

line 54: if !exists(':WMClose')[J

line 55: ^Icommand -nargs=0 WMClose :silent call <SID>CloseWindowsManager()[J

line 56: end[J

line 57: " command to go to either the first explorer window visible[J

line 58: if !exists(':FirstExplorerWindow')[J

line 59: ^Icommand -nargs=0 FirstExplorerWindow :silent call <SID>GotoExplorerWindow('1')[J

line 60: end[J

line 61: " command to go to either the last explorer window visible[J

line 62: if !exists(':BottomExplorerWindow')[J

line 63: ^Icommand -nargs=0 BottomExplorerWindow :silent call <SID>GotoExplorerWindow('$')[J

line 64: end[J

line 65: [J

line 66: " this command is used internally by winmanager. shouldnt be of concern to the[J

line 67: " user.[J

line 68: if !exists(':WinManagerGotoNextInGroup')[J

line 69: ^Icommand -nargs=1 WinManagerGotoNextInGroup :silent call <SID>GotoNextExplorerInGroup(<args>)[J

line 70: end^I[J

line 71: if !exists(':WinManagerGotoPrevInGroup')[J

line 72: ^Icommand -nargs=1 WinManagerGotoPrevInGroup :silent call <SID>GotoNextExplorerInGroup(<args>,-1)[J

line 73: end^I[J

line 74: [J

line 75: " nifty command for debugging. SVarValueWinManager 'MRUList' will echo the[J

line 76: " value of 's:MRUList' for instance. to be used for debugging winmanager.[J

line 77: " shouldn't be of interest to the user.[J

line 78: if !exists(':SVarValueWinManager')[J

line 79: ^Icommand -nargs=* SVarValueWinManager :call <SID>ShowVariableValue(<args>)[J

line 80: end[J

line 81: [J

line 82: " characters that must be escaped for filenames[J

line 83: if has("dos16") || has("dos32") || has("win16") || has("win32") || has("os2")[J

line 84: ^Ilet s:escfilename = ' %#'[J

line 85: else[J

line 86: ^Ilet s:escfilename = ' \%#'[J

line 87: endif[J

line 88: [J

line 89: " a quick way to "uncomment" all the debug print statements.[J

line 90: let g:debugWinManager = 1[J

line 91: let g:numRefs = 0[J

line 92: [J

line 93: " initialization.[J

line 94: let s:numExplorerGroups = 0[J

line 95: let s:numExplorers = 0[J

line 96: [J

line 97: " Line continuation used here[J

line 98: let s:cpo_save = &cpo[J

line 99: set cpo&vim[J

line 100: [J

line 101: "---[J

line 102: " this function creates a variable [J

line 103: " s:explorerGroup_i[J

line 104: " for the i^th time it is called. This variable will be of the form[J

line 105: " s:explorerGroup_i = ",member1,member2,member3,"[J

line 106: "[J

line 107: " this provides a way to "group" various explorers into common groups, so that[J

line 108: " one of them will be visible at a time.[J

line 109: "[J

line 110: function! <SID>RegisterExplorerGroup()[J

line 188: [J

line 189: [J

line 190: "---[J

line 191: " initializes the window manager. sets the initial layout. as of now, the[J

line 192: " layout of the explorer windows (i.e, which plugin appears above or below the[J

line 193: " other) depends on the order in which the plugins are sourced. [J

line 194: " TODO: make this easily user customizable later.[J

line 195: "       Done! See comments about registration.[J

line 196: "[J

line 197: " this function opens each "registered" plugin in its appropriate position. it[J

line 198: " also starts off the autocommand which makes dynamic updating of buffers[J

line 199: " possible.[J

line 200: "[J

line 201: function! <SID>StartWindowsManager()[J

line 387: [J

line 388: "---[J

line 389: " if this window occupies the entire height of the screen, return 1, else[J

line 390: " return 0. i.e return 1 if there is no window above or below this window.[J

line 391: "[J

line 392: function! <SID>IsOnlyVertical()[J

line 407: [J

line 408: "---[J

line 409: " this function first takes focus to the last listed file being edited and[J

line 410: " then depending on the users action and modified, etc opens the file bufName[J

line 411: " either on it or splits a new window etc.[J

line 412: "[J

line 413: function! WinManagerFileEdit(bufName, split)[J

line 488: [J

line 489: [J

line 490: "---[J

line 491: " function to repair the @# register.[J

line 492: "[J

line 493: " quickly edit the alternate buffer previously being edited in the[J

line 494: " FileExplorer area so that the % and # registers are not screwed with.[J

line 495: " This function must be called while focus is on a listed buffer which needs[J

line 496: " to be made @%.[J

line 497: "[J

line 498: function! <SID>RepairAltRegister()[J

line 560: [J

line 561: "---[J

line 562: " the main function. this is responsible for updating plugins dynamically.[J

line 563: " this function is triggered on the BufEnter and BufDelete events. every time[J

line 564: " it is called, it makes a pass through all visible plugins and if their[J

line 565: " display is not valid, it calls their Start() function.[J

line 566: "[J

line 567: " if this function is called with no arguments, it is assumed to be triggered[J

line 568: " from a BufEnter even or due to a forcible refresh. If it is called with one[J

line 569: " argument called "BufDelete", then it is assumed that it is triggered from[J

line 570: " the BufDelete event.[J

line 571: "[J

line 572: function! <SID>RefreshWinManager(...)[J

line 732: [J

line 733: function! <SID>ResizeAllExplorers()[J

line 751: [J

line 752: "---[J

line 753: " Make sure a path has proper form. [J

line 754: " this function forces every path to take the following form[J

line 755: " dir1/dir2/file    OR[J

line 756: " dir1/dir2/dir/ [J

line 757: " i.e, it replaces \ with / and stuff.[J

line 758: "[J

line 759: function! <SID>Path(p)[J

line 778: [J

line 779: " goto the reqdWinNum^th window. returns 0 on failure otherwise 1.[J

line 780: function! <SID>GotoWindow(reqdWinNum)[J

line 793: [J

line 794: " returns the window number of the ith explorer if its visible, else -1[J

line 795: function! <SID>IsExplorerVisible(i)[J

line 803: [J

line 804: " returns the window number of the first explorer of the ith explorer group if[J

line 805: " its visible, else -1[J

line 806: "[J

line 807: " if called with 2 arguments with the second being 'member', then returns the[J

line 808: " member number which is visible instead of its window number[J

line 809: "[J

line 810: function! <SID>IsExplorerGroupVisible(i, ...)[J

line 831: [J

line 832: " returns the member number of the first explorer of the ith explorer group if[J

line 833: " its visible, else -1[J

line 834: function! <SID>WhichMemberVisible(i)[J

line 837: [J

line 838: " a handy little function for debugging.[J

line 839: function! PrintError(eline)[J

line 848: [J

line 849: "---[J

line 850: " find the memn^th member's explorer number of the groupn^th explorer group[J

line 851: " i.e, if s:explorerGroup_2 = ",3,4,5,"[J

line 852: " then FindExplorerInGroup(2,3) = 5[J

line 853: " [J

line 854: " returs -1 if its not possible.[J

line 855: "[J

line 856: function! <SID>FindExplorerInGroup(groupn, memn)[J

line 866: [J

line 867: "---[J

line 868: " goto the next explorer in the group which this one belongs to.[J

line 869: " if called with 2 arguments, goto the previous explorer.[J

line 870: "[J

line 871: function! <SID>GotoNextExplorerInGroup(name, ...)[J

line 916: [J

line 917: " edit the first possible explorer after memn belonging to groun. use editcmd[J

line 918: " to form the new window.[J

line 919: function! <SID>EditNextVisibleExplorer(grpn, memn, dir, editcmd)[J

line 1005: [J

line 1006: [J

line 1007: " goes to either the first explorer window or the last explorer window[J

line 1008: " visible.[J

line 1009: function! <SID>GotoExplorerWindow(which)[J

line 1042: [J

line 1043: " returns the explorer number if an explorer plugin exists with the specified[J

line 1044: " buffer number[J

line 1045: function! <SID>IsExplorerBuffer(num)[J

line 1058: [J

line 1059: " toggle showing the explorer plugins.[J

line 1060: function! <SID>ToggleWindowsManager()[J

line 1067: [J

line 1068: " exported function. returns the buffer number of the last file being edited[J

line 1069: " in the file editing area.[J

line 1070: function! WinManagerGetLastEditedFile(...)[J

line 1081: [J

line 1082: [J

line 1083: " exported function. returns 1 if any of the explorer windows are open,[J

line 1084: " otherwise returns 0.[J

line 1085: function! IsWinManagerVisible()[J

line 1095: [J

line 1096: [J

line 1097: " close all the visible explorer windows.[J

line 1098: function! <SID>CloseWindowsManager()[J

line 1112: [J

line 1113: " provides a way to examine script local variables from outside the script.[J

line 1114: " very handy for debugging.[J

line 1115: function! <SID>ShowVariableValue(...)[J

line 1127: [J

line 1128: " the following functions are hooks provided by winmanager to external plugins[J

line 1129: " as a way to get winmanager to stop getting triggered on AUs. This is useful[J

line 1130: " when an explorer plugin triggers a BufEnter or BufDelete *internally*. For[J

line 1131: " example, bufexplorer.vim's "delete buffer" function triggers a BufDelete[J

line 1132: " function.[J

line 1133: "[J

line 1134: function! WinManagerSuspendAUs()[J

line 1137: function! WinManagerResumeAUs()[J

line 1140: [J

line 1141: " Another hook provided by winmanager. Normally winmanager will call the[J

line 1142: " plugins resize function every time the BufEnter or BufDelete event is[J

line 1143: " triggered. However, sometimes a plugin might change the number of lines[J

line 1144: " *internally*. In this case, the plugin could make a call to this function[J

line 1145: " which will make a safety check and then call its resize function.[J

line 1146: "[J

line 1147: function! WinManagerForceReSize(explName)[J

line 1167: [J

line 1168: " returns 1 if the only visible windows are explorer windows.[J

line 1169: function! <SID>OnlyExplorerWindowsOpen()[J

line 1185: [J

line 1186: " MRUPush[J

line 1187: function! <SID>MRUPush()[J

line 1195: [J

line 1196: " MRUPop[J

line 1197: function! <SID>MRUPop()[J

line 1202: [J

line 1203: " MRUGet[J

line 1204: function! <SID>MRUGet(slot)[J

line 1211: [J

line 1212: " Strntok:[J

line 1213: " extract the n^th token from s seperated by tok. [J

line 1214: " example: Strntok('1,23,3', ',', 2) = 23[J

line 1215: fun! <SID>Strntok(s, tok, n)[J

line 1218: [J

line 1219: " Strntok2[J

line 1220: " same as Strntok except that s is delimited by the tok character at the[J

line 1221: " beginning and end.[J

line 1222: " example: Strntok2(',1,23,3,', ',', 2) = 23[J

line 1223: fun! <SID>Strntok2(s, tok, n)[J

line 1226: [J

line 1227: " InitializeMRUList [J

line 1228: "[J

line 1229: " initialize the MRU list. initially this will be just the buffers in the[J

line 1230: " order of their buffer numbers with the @% and @# leading. The MRU list[J

line 1231: " consists of a string of the following form: ",1,2,3,4,"[J

line 1232: " NOTE: there are commas at the beginning and the end. this is to make[J

line 1233: " identifying the position of buffers in the list easier even if they occur in[J

line 1234: " the beginning or end and in situations where one buffer number is part of[J

line 1235: " another. i.e the string "9" is part of the string "19"[J

line 1236: " [J

line 1237: function! <SID>InitializeMRUList()[J

line 1266: [J

line 1267: if !g:defaultExplorer[J

line 1268: ^Ilet loaded_explorer = 1[J

line 1269: ^I"---[J

line 1270: ^I" Set up the autocommand to allow directories to be edited[J

line 1271: ^I"[J

line 1272: ^Iaugroup fileExplorer[J

line 1273: ^I^Iau![J

line 1274: ^I^Iau VimEnter * call s:EditDir("VimEnter")[J

line 1275: ^I^Iau BufEnter * call s:EditDir("BufEnter")[J

line 1276: ^Iaugroup end[J

line 1277: end[J

line 1278: [J

line 1279: " handles editing a directory via winmanager.[J

line 1280: function! <SID>EditDir(event)[J

line 1312: [J

line 1313: " restore 'cpo'[J

line 1314: let &cpo = s:cpo_save[J

line 1315: unlet s:cpo_save[J

line 1316: " vim:ts=4:noet:sw=4[J

finished sourcing /home/withon/.vim/plugin/winmanager.vim[J
chdir(/home/withon/.vim/plugin)[J
fchdir() to previous dir[J
sourcing "/home/withon/.vim/plugin/wintagexplorer.vim"[J
line 1: "=============================================================================[J

line 2: "        File: wintagexplorer.vim[J

line 3: "      Author: Srinath Avadhanula (srinath@eecs.berkeley.edu)[J

line 4: " Last Change: Wed Apr 03 05:00 PM 2002 PST[J

line 5: "        Help: This file provides a simple interface to a tags file. The tags[J

line 6: "              are grouped according to the file they belong to and the user can[J

line 7: "              press <enter> while on a tag to open the tag in an adjacent[J

line 8: "              window.[J

line 9: "[J

line 10: "              This file shows the implementation of an explorer plugin add-in[J

line 11: "              to winmanager.vim. As explained in |winmanager-adding|, this[J

line 12: "              function basically has to expose various functions which[J

line 13: "              winmanager calls during its refresh-diplay cycle. In turn, it[J

line 14: "              uses the function WinManagerRileEdit() supplied by[J

line 15: "              winmanager.vim.[J

line 16: [J

line 17: " See ":help winmanager" for additional details.[J

line 18: " ============================================================================[J

line 19: [J

line 20: [J

line 21: " "TagsExplorer" is the "name" under which this plugin "registers" itself.[J

line 22: " Registration means including a line like:[J

line 23: "    RegisterExplorers "TagsExplorer"[J

line 24: " in the .vimrc. Registration provides a way to let the user customize the[J

line 25: " layout of the various windows. When a explorer is released, the user needs[J

line 26: " to know this "name" to register the plugin. [J

line 27: "[J

line 28: " The first thing this plugin does is decide upon a "title" for itself. This is[J

line 29: " the name of the buffer which winmanager will open for displaying the[J

line 30: " contents of this plugin. Note that this variable has to be of the form:[J

line 31: "    g:<ExplorerName>_title[J

line 32: " where <ExplorerName> = "TagsExplorer" for this plugin.[J

line 33: let g:TagsExplorer_title = "[Tag List]"[J

line 34: [J

line 35: " variables to remember the last position of the user within the file.[J

line 36: let s:savedCursorRow = 1[J

line 37: let s:savedCursorCol = 1[J

line 38: [J

line 39: " skip display the error message if no tags file in current directory.[J

line 40: if !exists('g:TagsExplorerSkipError')[J

line 41: ^Ilet g:TagsExplorerSkipError = 0[J

line 42: end[J

line 43: if !exists('g:saveTagsDisplay')[J

line 44: ^Ilet g:saveTagsDisplay = 1[J

line 45: end[J

line 46: [J

line 47: function! TagsExplorer_IsPossible()[J

line 53: [J

line 54: " This is the function which winmanager calls the first time this plugin is[J

line 55: " displayed. Again, the rule for the name of this function is:[J

line 56: " <ExplorerName>_Start()[J

line 57: "[J

line 58: function! TagsExplorer_Start()[J

line 101: [J

line 102: function! <SID>StartTagsFileDisplay()[J

line 192: [J

line 193: [J

line 194: function! <SID>DisplayTagsFile()[J

line 260: [J

line 261: function! <SID>DisplayError()[J

line 292: [J

line 293: function! TagsExplorer_WrapUp()[J

line 301: [J

line 302: function! TagsExplorer_IsValid()[J

line 305: [J

line 306: function! <SID>OpenTag(split)[J

line 337: [J

line 338: " function to group tags according to which file they belong to...[J

line 339: " does not use the "% g" command. does the %g command introduce a O(n^2)[J

line 340: " nature into the algo?[J

line 341: function! <SID>GroupTags() range[J

line 390: [J

line 391: function! <SID>FoldTags()[J

line 409: [J

line 410: function! TE_ShowVariableValue(...)[J

line 422: [J

line 423: " Synopsis: let foldInfo = s:MkViewNoNestedFolds()[J

line 424: " Description: returns the view information. This function is to be used when[J

line 425: "    it is known that there are no nested folds in the file (i.e folds with[J

line 426: "    depth > 1). when there are nested folds, this function silently ignores[J

line 427: "    them.[J

line 428: function! s:MkViewNoNestedFolds()[J

line 467: [J

line 468: " Synopsis: call s:LoadView(foldInfo)[J

line 469: " Description: This function restores the view defined in the argument[J

line 470: "    foldInfo. See the description of MkView() for the format of this[J

line 471: "    argument. This function should only be used when the foldmethod of the[J

line 472: "    file is manual. There is no error-checking done in this function, so it[J

line 473: "    needs to be used responsibly.[J

line 474: function! s:LoadView(foldInfo)[J

line 504: [J

line 505: " Strntok:[J

line 506: " extract the n^th token from s seperated by tok. [J

line 507: " example: Strntok('1,23,3', ',', 2) = 23[J

line 508: fun! <SID>Strntok(s, tok, n)[J

finished sourcing /home/withon/.vim/plugin/wintagexplorer.vim[J
Searching for "/usr/local/share/vim/vimfiles/plugin/**/*.vim"[J
Searching for "/usr/local/share/vim/vim80/plugin/**/*.vim"[J
chdir(/usr/local/share/vim/vim80/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/local/share/vim/vim80/plugin/getscriptPlugin.vim"[J
line 1: " ---------------------------------------------------------------------[J

line 2: " getscriptPlugin.vim[J

line 3: "  Author:^ICharles E. Campbell[J

line 4: "  Date:^INov 29, 2013[J

line 5: "  Installing:^I:help glvs-install[J

line 6: "  Usage:^I:help glvs[J

line 7: "[J

line 8: " GetLatestVimScripts: 642 1 :AutoInstall: getscript.vim[J

line 9: "[J

line 10: " (Rom 15:11 WEB) Again, "Praise the Lord, all you Gentiles!  Let[J

line 11: " all the peoples praise Him."[J

line 12: " ---------------------------------------------------------------------[J

line 13: " Initialization:^I{{{1[J

line 14: " if you're sourcing this file, surely you can't be[J

line 15: " expecting vim to be in its vi-compatible mode[J

line 16: if exists("g:loaded_getscriptPlugin")[J

line 17:  finish[J

line 18: endif[J

line 19: if &cp[J

line 20:  if &verbose[J

line 21:   echo "GetLatestVimScripts is not vi-compatible; not loaded (you need to set nocp)"[J

line 22:  endif[J

line 23:  finish[J

line 24: endif[J

line 25: let g:loaded_getscriptPlugin = "v36"[J

line 26: let s:keepcpo                = &cpo[J

line 27: set cpo&vim[J

line 28: [J

line 29: " ---------------------------------------------------------------------[J

line 30: "  Public Interface: {{{1[J

line 31: com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()[J

line 32: com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()[J

line 33: silent! com -nargs=0 GLVS                call getscript#GetLatestVimScripts()[J

line 34: [J

line 35: " ---------------------------------------------------------------------[J

line 36: " Restore Options: {{{1[J

line 37: let &cpo= s:keepcpo[J

line 38: unlet s:keepcpo[J

line 39: [J

line 40: " ---------------------------------------------------------------------[J

line 41: " vim: ts=8 sts=2 fdm=marker nowrap[J

finished sourcing /usr/local/share/vim/vim80/plugin/getscriptPlugin.vim[J
chdir(/usr/local/share/vim/vim80/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/local/share/vim/vim80/plugin/gzip.vim"[J
line 1: " Vim plugin for editing compressed files.[J

line 2: " Maintainer: Bram Moolenaar <Bram@vim.org>[J

line 3: " Last Change: 2016 Oct 30[J

line 4: [J

line 5: " Exit quickly when:[J

line 6: " - this plugin was already loaded[J

line 7: " - when 'compatible' is set[J

line 8: " - some autocommands are already taking care of compressed files[J

line 9: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")[J

line 10:   finish[J

line 11: endif[J

line 12: let loaded_gzip = 1[J

line 13: [J

line 14: augroup gzip[J

line 15:   " Remove all gzip autocommands[J

line 16:   au![J

line 17: [J

line 18:   " Enable editing of gzipped files.[J

line 19:   " The functions are defined in autoload/gzip.vim.[J

line 20:   "[J

line 21:   " Set binary mode before reading the file.[J

line 22:   " Use "gzip -d", gunzip isn't always available.[J

line 23:   autocmd BufReadPre,FileReadPre^I*.gz,*.bz2,*.Z,*.lzma,*.xz,*.lz,*.zst setlocal bin[J

line 24:   autocmd BufReadPost,FileReadPost^I*.gz  call gzip#read("gzip -dn")[J

line 25:   autocmd BufReadPost,FileReadPost^I*.bz2 call gzip#read("bzip2 -d")[J

line 26:   autocmd BufReadPost,FileReadPost^I*.Z   call gzip#read("uncompress")[J

line 27:   autocmd BufReadPost,FileReadPost^I*.lzma call gzip#read("lzma -d")[J

line 28:   autocmd BufReadPost,FileReadPost^I*.xz  call gzip#read("xz -d")[J

line 29:   autocmd BufReadPost,FileReadPost^I*.lz  call gzip#read("lzip -d")[J

line 30:   autocmd BufReadPost,FileReadPost^I*.zst call gzip#read("zstd -d --rm")[J

line 31:   autocmd BufWritePost,FileWritePost^I*.gz  call gzip#write("gzip")[J

line 32:   autocmd BufWritePost,FileWritePost^I*.bz2 call gzip#write("bzip2")[J

line 33:   autocmd BufWritePost,FileWritePost^I*.Z   call gzip#write("compress -f")[J

line 34:   autocmd BufWritePost,FileWritePost^I*.lzma call gzip#write("lzma -z")[J

line 35:   autocmd BufWritePost,FileWritePost^I*.xz  call gzip#write("xz -z")[J

line 36:   autocmd BufWritePost,FileWritePost^I*.lz  call gzip#write("lzip")[J

line 37:   autocmd BufWritePost,FileWritePost^I*.zst  call gzip#write("zstd --rm")[J

line 38:   autocmd FileAppendPre^I^I^I*.gz  call gzip#appre("gzip -dn")[J

line 39:   autocmd FileAppendPre^I^I^I*.bz2 call gzip#appre("bzip2 -d")[J

line 40:   autocmd FileAppendPre^I^I^I*.Z   call gzip#appre("uncompress")[J

line 41:   autocmd FileAppendPre^I^I^I*.lzma call gzip#appre("lzma -d")[J

line 42:   autocmd FileAppendPre^I^I^I*.xz   call gzip#appre("xz -d")[J

line 43:   autocmd FileAppendPre^I^I^I*.lz   call gzip#appre("lzip -d")[J

line 44:   autocmd FileAppendPre^I^I^I*.zst call gzip#appre("zstd -d --rm")[J

line 45:   autocmd FileAppendPost^I^I*.gz  call gzip#write("gzip")[J

line 46:   autocmd FileAppendPost^I^I*.bz2 call gzip#write("bzip2")[J

line 47:   autocmd FileAppendPost^I^I*.Z   call gzip#write("compress -f")[J

line 48:   autocmd FileAppendPost^I^I*.lzma call gzip#write("lzma -z")[J

line 49:   autocmd FileAppendPost^I^I*.xz call gzip#write("xz -z")[J

line 50:   autocmd FileAppendPost^I^I*.lz call gzip#write("lzip")[J

line 51:   autocmd FileAppendPost^I^I*.zst call gzip#write("zstd --rm")[J

line 52: augroup END[J

finished sourcing /usr/local/share/vim/vim80/plugin/gzip.vim[J
chdir(/usr/local/share/vim/vim80/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/local/share/vim/vim80/plugin/logiPat.vim"[J
line 1: " LogiPat: Boolean logical pattern matcher[J

line 2: "   Author:  Charles E. Campbell[J

line 3: "   Date:    Apr 04, 2016[J

line 4: "   Version: 4[J

line 5: "   Purpose: to do Boolean-logic based regular expression pattern matching[J

line 6: " Copyright:    Copyright (C) 1999-2011 Charles E. Campbell {{{1[J

line 7: "               Permission is hereby granted to use and distribute this code,[J

line 8: "               with or without modifications, provided that this copyright[J

line 9: "               notice is copied with it. Like most anything else that's free,[J

line 10: "               LogiPat.vim is provided *as is* and comes with no warranty[J

line 11: "               of any kind, either expressed or implied. By using this[J

line 12: "               plugin, you agree that in no event will the copyright[J

line 13: "               holder be liable for any damages resulting from the use[J

line 14: "               of this software.[J

line 15: "[J

line 16: "   Usage: {{{1[J

line 17: "       :LogiPat ...[J

line 18: "[J

line 19: "         Boolean logic supported:[J

line 20: "            () grouping operators[J

line 21: "            !  not the following pattern[J

line 22: "            |  logical or[J

line 23: "            &  logical and[J

line 24: "            "..pattern.."[J

line 25: "^IExample: {{{1[J

line 26: "^I^I:LogiPat !("january"|"february")[J

line 27: "^I^I  would match all strings not containing the strings january[J

line 28: "^I^I  or february[J

line 29: "^IGetLatestVimScripts: 1290 1 :AutoInstall: LogiPat.vim[J

line 30: "[J

line 31: "  Behold, you will conceive in your womb, and bring forth a son, {{{1[J

line 32: "  and will call his name Jesus. He will be great, and will be[J

line 33: "  called the Son of the Most High. The Lord God will give him the[J

line 34: "  throne of his father, David, and he will reign over the house of[J

line 35: "  Jacob forever. There will be no end to his kingdom. (Luke 1:31-33 WEB)[J

line 36: [J

line 37: " ---------------------------------------------------------------------[J

line 38: " Load Once: {{{1[J

line 39: if &cp || exists("loaded_logiPat")[J

line 40:  finish[J

line 41: endif[J

line 42: let g:loaded_logiPat = "v4"[J

line 43: let s:keepcpo        = &cpo[J

line 44: set cpo&vim[J

line 45: "DechoRemOn[J

line 46: [J

line 47: " ---------------------------------------------------------------------[J

line 48: " Public Interface: {{{1[J

line 49: com!     -nargs=* LogiPat^I^Icall   LogiPat(<q-args>,1)[J

line 50: sil! com -nargs=* LP^I^I^Icall   LogiPat(<q-args>,1)[J

line 51: sil! com -nargs=* LPR^I^I^Icall   LogiPat(<q-args>,1,"r")[J

line 52: com!     -nargs=+ LPE^I^I^Iechomsg LogiPat(<q-args>)[J

line 53: com!     -nargs=+ LogiPatFlags^Ilet  s:LogiPatFlags="<args>"[J

line 54: sil! com -nargs=+ LPF^I^I^Ilet  s:LogiPatFlags="<args>"[J

line 55: [J

line 56: " =====================================================================[J

line 57: " Functions: {{{1[J

line 58: [J

line 59: " ---------------------------------------------------------------------[J

line 60: " LogiPat: this function interprets the boolean-logic pattern {{{2[J

line 61: fun! LogiPat(pat,...)[J

line 146: [J

line 147: " ---------------------------------------------------------------------[J

line 148: " s:String: Vim6.4 doesn't have string() {{{2[J

line 149: func! s:String(str)[J

line 152: [J

line 153: " ---------------------------------------------------------------------[J

line 154: " LP_PatPush: {{{2[J

line 155: fun! s:LP_PatPush(pat)[J

line 162: [J

line 163: " ---------------------------------------------------------------------[J

line 164: " LP_PatPop: pop a number/variable from LogiPat's pattern stack {{{2[J

line 165: fun! s:LP_PatPop(lookup)[J

line 178: [J

line 179: " ---------------------------------------------------------------------[J

line 180: " LP_OpPush: {{{2[J

line 181: fun! s:LP_OpPush(op)[J

line 232: [J

line 233: " ---------------------------------------------------------------------[J

line 234: " LP_Execute: execute operators from opstack using pattern stack {{{2[J

line 235: fun! s:LP_Execute(preclvl)[J

line 265: [J

line 266: " ---------------------------------------------------------------------[J

line 267: " LP_Not: writes a logical-not for a pattern {{{2[J

line 268: fun! s:LP_Not(pat)[J

line 279: [J

line 280: " ---------------------------------------------------------------------[J

line 281: " LP_Or: writes a logical-or branch using two patterns {{{2[J

line 282: fun! s:LP_Or(pat1,pat2)[J

line 288: [J

line 289: " ---------------------------------------------------------------------[J

line 290: " LP_And: writes a logical-and concat using two patterns {{{2[J

line 291: fun! s:LP_And(pat1,pat2)[J

line 297: [J

line 298: " ---------------------------------------------------------------------[J

line 299: " StackLook: {{{2[J

line 300: fun! s:StackLook(description)[J

line 334: [J

line 335: " ---------------------------------------------------------------------[J

line 336: "  Cleanup And Modeline: {{{1[J

line 337: let &cpo= s:keepcpo[J

line 338: unlet s:keepcpo[J

line 339: " vim: ts=4 fdm=marker[J

finished sourcing /usr/local/share/vim/vim80/plugin/logiPat.vim[J
chdir(/usr/local/share/vim/vim80/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/local/share/vim/vim80/plugin/manpager.vim"[J
line 1: " Vim plugin for using Vim as manpager.[J

line 2: " Maintainer: Enno Nagel <ennonagel+vim@gmail.com>[J

line 3: " Last Change: 2017 November 07[J

line 4: [J

line 5: " $MAN_PN is supposed to be set by MANPAGER, see ":help manpager.vim".[J

line 6: if empty($MAN_PN)[J

line 7:   finish[J

finished sourcing /usr/local/share/vim/vim80/plugin/manpager.vim[J
chdir(/usr/local/share/vim/vim80/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/local/share/vim/vim80/plugin/matchparen.vim"[J
line 1: " Vim plugin for showing matching parens[J

line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>[J

line 3: " Last Change: 2017 Sep 30[J

line 4: [J

line 5: " Exit quickly when:[J

line 6: " - this plugin was already loaded (or disabled)[J

line 7: " - when 'compatible' is set[J

line 8: " - the "CursorMoved" autocmd event is not available.[J

line 9: if exists("g:loaded_matchparen") || &cp || !exists("##CursorMoved")[J

line 10:   finish[J

line 11: endif[J

line 12: let g:loaded_matchparen = 1[J

line 13: [J

line 14: if !exists("g:matchparen_timeout")[J

line 15:   let g:matchparen_timeout = 300[J

line 16: endif[J

line 17: if !exists("g:matchparen_insert_timeout")[J

line 18:   let g:matchparen_insert_timeout = 60[J

line 19: endif[J

line 20: [J

line 21: augroup matchparen[J

line 22:   " Replace all matchparen autocommands[J

line 23:   autocmd! CursorMoved,CursorMovedI,WinEnter * call s:Highlight_Matching_Pair()[J

line 24:   if exists('##TextChanged')[J

line 25:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()[J

line 26:   endif[J

line 27: augroup END[J

line 28: [J

line 29: " Skip the rest if it was already done.[J

line 30: if exists("*s:Highlight_Matching_Pair")[J

line 31:   finish[J

line 32: endif[J

line 33: [J

line 34: let s:cpo_save = &cpo[J

line 35: set cpo-=C[J

line 36: [J

line 37: " The function that is invoked (very often) to define a ":match" highlighting[J

line 38: " for any matching paren.[J

line 39: function! s:Highlight_Matching_Pair()[J

line 187: [J

line 188: " Define commands that will disable and enable the plugin.[J

line 189: command! DoMatchParen call s:DoMatchParen()[J

line 190: command! NoMatchParen call s:NoMatchParen()[J

line 191: [J

line 192: func! s:NoMatchParen()[J

line 199: [J

line 200: func! s:DoMatchParen()[J

line 206: [J

line 207: let &cpo = s:cpo_save[J

line 208: unlet s:cpo_save[J

finished sourcing /usr/local/share/vim/vim80/plugin/matchparen.vim[J
chdir(/usr/local/share/vim/vim80/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/local/share/vim/vim80/plugin/netrwPlugin.vim"[J
line 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network[J

line 2: "            PLUGIN SECTION[J

line 3: " Date:^I^IFeb 08, 2016[J

line 4: " Maintainer:^ICharles E Campbell <NdrOchip@ScampbellPfamily.AbizM-NOSPAM>[J

line 5: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim[J

line 6: " Copyright:    Copyright (C) 1999-2013 Charles E. Campbell {{{1[J

line 7: "               Permission is hereby granted to use and distribute this code,[J

line 8: "               with or without modifications, provided that this copyright[J

line 9: "               notice is copied with it. Like anything else that's free,[J

line 10: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided[J

line 11: "               *as is* and comes with no warranty of any kind, either[J

line 12: "               expressed or implied. By using this plugin, you agree that[J

line 13: "               in no event will the copyright holder be liable for any damages[J

line 14: "               resulting from the use of this software.[J

line 15: "[J

line 16: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1[J

line 17: "  (James 1:22 RSV)[J

line 18: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-[J

line 19: " Load Once: {{{1[J

line 20: if &cp || exists("g:loaded_netrwPlugin")[J

line 21:  finish[J

line 22: endif[J

line 23: let g:loaded_netrwPlugin = "v162"[J

line 24: let s:keepcpo = &cpo[J

line 25: set cpo&vim[J

line 26: "DechoRemOn[J

line 27: [J

line 28: " ---------------------------------------------------------------------[J

line 29: " Public Interface: {{{1[J

line 30: [J

line 31: " Local Browsing Autocmds: {{{2[J

line 32: augroup FileExplorer[J

line 33:  au![J

line 34:  au BufLeave *  if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif[J

line 35:  au BufEnter *^Isil call s:LocalBrowse(expand("<amatch>"))[J

line 36:  au VimEnter *^Isil call s:VimEnter(expand("<amatch>"))[J

line 37:  if has("win32") || has("win95") || has("win64") || has("win16")[J

line 38:   au BufEnter .* sil call s:LocalBrowse(expand("<amatch>"))[J

line 39:  endif[J

line 40: augroup END[J

line 41: [J

line 42: " Network Browsing Reading Writing: {{{2[J

line 43: augroup Network[J

line 44:  au![J

line 45:  au BufReadCmd   file://*^I^I^I^I^I^I^I^I^I^I^Icall netrw#FileUrlEdit(expand("<amatch>"))[J

line 46:  au BufReadCmd   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau BufReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(2,expand("<amatch>"))|exe "sil doau BufReadPost ".fnameescape(expand("<amatch>"))[J

line 47:  au FileReadCmd  ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau FileReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(1,expand("<amatch>"))|exe "sil doau FileReadPost ".fnameescape(expand("<amatch>"))[J

line 48:  au BufWriteCmd  ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau BufWritePre ".fnameescape(expand("<amatch>"))|exe 'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau BufWritePost ".fnameescape(expand("<amatch>"))[J

line 49:  au FileWriteCmd ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau FileWritePre ".fnameescape(expand("<amatch>"))|exe "'[,']".'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau FileWritePost ".fnameescape(expand("<amatch>"))[J

line 50:  try                                                       [J

line 51:   au SourceCmd   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))[J

line 52:  catch /^Vim\%((\a\+)\)\=:E216/                            [J

line 53:   au SourcePre   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))[J

line 54:  endtry[J

line 55: augroup END[J

line 56: [J

line 57: " Commands: :Nread, :Nwrite, :NetUserPass {{{2[J

line 58: com! -count=1 -nargs=*^INread^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call winrestview(s:svpos)[J

line 59: com! -range=% -nargs=*^INwrite^I^Ilet s:svpos= winsaveview()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call winrestview(s:svpos)[J

line 60: com! -nargs=*^I^INetUserPass^Icall NetUserPass(<f-args>)[J

line 61: com! -nargs=*^I        Nsource^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetSource(<f-args>)<bar>call winrestview(s:svpos)[J

line 62: com! -nargs=?^I^INtree^I^Icall netrw#SetTreetop(1,<q-args>)[J

line 63: [J

line 64: " Commands: :Explore, :Sexplore, Hexplore, Vexplore, Lexplore {{{2[J

line 65: com! -nargs=* -bar -bang -count=0 -complete=dir^IExplore^I^Icall netrw#Explore(<count>,0,0+<bang>0,<q-args>)[J

line 66: com! -nargs=* -bar -bang -count=0 -complete=dir^ISexplore^Icall netrw#Explore(<count>,1,0+<bang>0,<q-args>)[J

line 67: com! -nargs=* -bar -bang -count=0 -complete=dir^IHexplore^Icall netrw#Explore(<count>,1,2+<bang>0,<q-args>)[J

line 68: com! -nargs=* -bar -bang -count=0 -complete=dir^IVexplore^Icall netrw#Explore(<count>,1,4+<bang>0,<q-args>)[J

line 69: com! -nargs=* -bar       -count=0 -complete=dir^ITexplore^Icall netrw#Explore(<count>,0,6        ,<q-args>)[J

line 70: com! -nargs=* -bar -bang^I^I^INexplore^Icall netrw#Explore(-1,0,0,<q-args>)[J

line 71: com! -nargs=* -bar -bang^I^I^IPexplore^Icall netrw#Explore(-2,0,0,<q-args>)[J

line 72: com! -nargs=* -bar -bang -count=0 -complete=dir Lexplore^Icall netrw#Lexplore(<count>,<bang>0,<q-args>)[J

line 73: [J

line 74: " Commands: NetrwSettings {{{2[J

line 75: com! -nargs=0^INetrwSettings^Icall netrwSettings#NetrwSettings()[J

line 76: com! -bang^INetrwClean^Icall netrw#Clean(<bang>0)[J

line 77: [J

line 78: " Maps:[J

line 79: if !exists("g:netrw_nogx")[J

line 80:  if maparg('gx','n') == ""[J

line 81:   if !hasmapto('<Plug>NetrwBrowseX')[J

line 82:    nmap <unique> gx <Plug>NetrwBrowseX[J

line 83:   endif[J

line 84:   nno <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))<cr>[J

line 85:  endif[J

line 86:  if maparg('gx','v') == ""[J

line 87:   if !hasmapto('<Plug>NetrwBrowseXVis')[J

line 88:    vmap <unique> gx <Plug>NetrwBrowseXVis[J

line 89:   endif[J

line 90:   vno <silent> <Plug>NetrwBrowseXVis :<c-u>call netrw#BrowseXVis()<cr>[J

line 91:  endif[J

line 92: endif[J

line 93: if exists("g:netrw_usetab") && g:netrw_usetab[J

line 94:  if maparg('<c-tab>','n') == ""[J

line 95:   nmap <unique> <c-tab> <Plug>NetrwShrink[J

line 96:  endif[J

line 97:  nno <silent> <Plug>NetrwShrink :call netrw#Shrink()<cr>[J

line 98: endif[J

line 99: [J

line 100: " ---------------------------------------------------------------------[J

line 101: " LocalBrowse: invokes netrw#LocalBrowseCheck() on directory buffers {{{2[J

line 102: fun! s:LocalBrowse(dirname)[J

line 144: [J

line 145: " ---------------------------------------------------------------------[J

line 146: " s:VimEnter: after all vim startup stuff is done, this function is called. {{{2[J

line 147: "             Its purpose: to look over all windows and run s:LocalBrowse() on[J

line 148: "             them, which checks if they're directories and will create a directory[J

line 149: "             listing when appropriate.[J

line 150: "             It also sets s:vimentered, letting s:LocalBrowse() know that s:VimEnter()[J

line 151: "             has already been called.[J

line 152: fun! s:VimEnter(dirname)[J

line 160: [J

line 161: " ---------------------------------------------------------------------[J

line 162: " NetrwStatusLine: {{{1[J

line 163: fun! NetrwStatusLine()[J

line 174: [J

line 175: " ------------------------------------------------------------------------[J

line 176: " NetUserPass: set username and password for subsequent ftp transfer {{{1[J

line 177: "   Usage:  :call NetUserPass()^I^I^I-- will prompt for userid and password[J

line 178: "^I    :call NetUserPass("uid")^I^I-- will prompt for password[J

line 179: "^I    :call NetUserPass("uid","password") -- sets global userid and password[J

line 180: fun! NetUserPass(...)[J

line 204: [J

line 205: " ------------------------------------------------------------------------[J

line 206: " Modelines And Restoration: {{{1[J

line 207: let &cpo= s:keepcpo[J

line 208: unlet s:keepcpo[J

line 209: " vim:ts=8 fdm=marker[J

finished sourcing /usr/local/share/vim/vim80/plugin/netrwPlugin.vim[J
chdir(/usr/local/share/vim/vim80/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/local/share/vim/vim80/plugin/rrhelper.vim"[J
line 1: " Vim plugin with helper function(s) for --remote-wait[J

line 2: " Maintainer: Flemming Madsen <fma@cci.dk>[J

line 3: " Last Change: 2008 May 29[J

line 4: [J

line 5: " Has this already been loaded?[J

line 6: if exists("loaded_rrhelper") || !has("clientserver")[J

line 7:   finish[J

finished sourcing /usr/local/share/vim/vim80/plugin/rrhelper.vim[J
chdir(/usr/local/share/vim/vim80/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/local/share/vim/vim80/plugin/spellfile.vim"[J
line 1: " Vim plugin for downloading spell files[J

line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>[J

line 3: " Last Change: 2006 Feb 01[J

line 4: [J

line 5: " Exit quickly when:[J

line 6: " - this plugin was already loaded[J

line 7: " - when 'compatible' is set[J

line 8: " - some autocommands are already taking care of spell files[J

line 9: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")[J

line 10:   finish[J

line 11: endif[J

line 12: let loaded_spellfile_plugin = 1[J

line 13: [J

line 14: " The function is in the autoload directory.[J

line 15: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))[J

finished sourcing /usr/local/share/vim/vim80/plugin/spellfile.vim[J
chdir(/usr/local/share/vim/vim80/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/local/share/vim/vim80/plugin/tarPlugin.vim"[J
line 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles[J

line 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>[J

line 3: " Modified by Charles E. Campbell[J

line 4: " Distributed under the GNU General Public License.[J

line 5: "[J

line 6: " Updates are available from <http://michael.toren.net/code/>.  If you[J

line 7: " find this script useful, or have suggestions for improvements, please[J

line 8: " let me know.[J

line 9: " Also look there for further comments and documentation.[J

line 10: "[J

line 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.[J

line 12: " ---------------------------------------------------------------------[J

line 13: "  Load Once: {{{1[J

line 14: if &cp || exists("g:loaded_tarPlugin")[J

line 15:  finish[J

line 16: endif[J

line 17: let g:loaded_tarPlugin = "v29"[J

line 18: let s:keepcpo          = &cpo[J

line 19: set cpo&vim[J

line 20: [J

line 21: " ---------------------------------------------------------------------[J

line 22: "  Public Interface: {{{1[J

line 23: augroup tar[J

line 24:   au![J

line 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)[J

line 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)[J

line 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))[J

line 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))[J

line 29: [J

line 30:   if has("unix")[J

line 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)[J

line 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)[J

line 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))[J

line 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))[J

line 35:   endif[J

line 36: [J

line 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))[J

line 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))[J

line 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))[J

line 42:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 43:   au BufReadCmd   *.tbz^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 44:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))[J

line 45:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))[J

line 46:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))[J

line 47: augroup END[J

line 48: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)[J

line 49: [J

line 50: " ---------------------------------------------------------------------[J

line 51: " Restoration And Modelines: {{{1[J

line 52: " vim: fdm=marker[J

line 53: let &cpo= s:keepcpo[J

line 54: unlet s:keepcpo[J

finished sourcing /usr/local/share/vim/vim80/plugin/tarPlugin.vim[J
chdir(/usr/local/share/vim/vim80/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/local/share/vim/vim80/plugin/tohtml.vim"[J
line 1: " Vim plugin for converting a syntax highlighted file to HTML.[J

line 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>[J

line 3: " Last Change: 2015 Sep 08[J

line 4: "[J

line 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and[J

line 6: " $VIMRUNTIME/syntax/2html.vim[J

line 7: "[J

line 8: " TODO: {{{[J

line 9: "   * Options for generating the CSS in external style sheets. New :TOcss[J

line 10: "     command to convert the current color scheme into a (mostly) generic CSS[J

line 11: "     stylesheet which can be re-used. Alternate stylesheet support? Good start[J

line 12: "     by Erik Falor[J

line 13: "     ( https://groups.google.com/d/topic/vim_use/7XTmC4D22dU/discussion ).[J

line 14: "   * Add optional argument to :TOhtml command to specify mode (gui, cterm,[J

line 15: "     term) to use for the styling. Suggestion by "nacitar".[J

line 16: "   * Add way to override or specify which RGB colors map to the color numbers[J

line 17: "     in cterm. Get better defaults than just guessing? Suggestion by "nacitar".[J

line 18: "   * Disable filetype detection until after all processing is done.[J

line 19: "   * Add option for not generating the hyperlink on stuff that looks like a[J

line 20: "     URL? Or just color the link to fit with the colorscheme (and only special[J

line 21: "     when hovering)?[J

line 22: "   * Bug: Opera does not allow printing more than one page if uncopyable[J

line 23: "     regions is turned on. Possible solution: Add normal text line numbers with[J

line 24: "     display:none, set to display:inline for print style sheets, and hide[J

line 25: "     <input> elements for print, to allow Opera printing multiple pages (and[J

line 26: "     other uncopyable areas?). May need to make the new text invisible to IE[J

line 27: "     with conditional comments to prevent copying it, IE for some reason likes[J

line 28: "     to copy hidden text. Other browsers too?[J

line 29: "   * Bug: still a 1px gap throughout the fold column when html_prevent_copy is[J

line 30: "     "fn" in some browsers. Specifically, in Chromium on Ubuntu (but not Chrome[J

line 31: "     on Windows). Perhaps it is font related?[J

line 32: "   * Bug: still some gaps in the fold column when html_prevent_copy contains[J

line 33: "     'd' and showing the whole diff (observed in multiple browsers). Only gaps[J

line 34: "     on diff lines though.[J

line 35: "   * Undercurl support via CSS3, with fallback to dotted or something:[J

line 36: "^Ihttps://groups.google.com/d/topic/vim_use/BzXA6He1pHg/discussion[J

line 37: "   * Redo updates for modified default foldtext (v11) when/if the patch is[J

line 38: "     accepted to modify it.[J

line 39: "   * Test case +diff_one_file-dynamic_folds+expand_tabs-hover_unfold[J

line 40: "^I^I+ignore_conceal-ignore_folding+no_foldcolumn+no_pre+no_progress[J

line 41: "^I^I+number_lines-pre_wrap-use_css+use_xhtml+whole_filler.xhtml[J

line 42: "     does not show the whole diff filler as it is supposed to?[J

line 43: "   * Bug: when 'isprint' is wrong for the current encoding, will generate[J

line 44: "     invalid content. Can/should anything be done about this? Maybe a separate[J

line 45: "     plugin to correct 'isprint' based on encoding?[J

line 46: "   * Check to see if the windows-125\d encodings actually work in Unix without[J

line 47: "     the 8bit- prefix. Add prefix to autoload dictionaries for Unix if not.[J

line 48: "   * Font auto-detection similar to[J

line 49: "     http://www.vim.org/scripts/script.php?script_id=2384 but for a variety of[J

line 50: "     platforms.[J

line 51: "   * Error thrown when sourcing 2html.vim directly when plugins are not loaded.[J

line 52: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :[J

line 53: "^I- listchars support[J

line 54: "^I- full-line background highlight[J

line 55: "^I- other?[J

line 56: "   * Make it so deleted lines in a diff don't create side-scrolling (get it[J

line 57: "     free with full-line background highlight above).[J

line 58: "   * Restore open/closed folds and cursor position after processing each file[J

line 59: "     with option not to restore for speed increase.[J

line 60: "   * Add extra meta info (generation time, etc.)?[J

line 61: "   * Tidy up so we can use strict doctype in even more situations[J

line 62: "   * Implementation detail: add threshold for writing the lines to the html[J

line 63: "     buffer before we're done (5000 or so lines should do it)[J

line 64: "   * TODO comments for code cleanup scattered throughout[J

line 65: "}}}[J

line 66: [J

line 67: if exists('g:loaded_2html_plugin')[J

line 68:   finish[J

line 69: endif[J

line 70: let g:loaded_2html_plugin = 'vim7.4_v2'[J

line 71: [J

line 72: "[J

line 73: " Changelog: {{{[J

line 74: "   7.4_v2  (this version): Fix error raised when converting a diff containing[J

line 75: "                           an empty buffer. Jan Stocker: allow g:html_font to[J

line 76: "                           take a list so it is easier to specfiy fallback[J

line 77: "                           fonts in the generated CSS.[J

line 78: "   7.4_v1  (Vim 7.4.0000): Fix modeline mangling for new "Vim:" format, and[J

line 79: "^I^I^I    also for version-specific modelines like "vim>703:".[J

line 80: "[J

line 81: "   7.3 updates: {{{[J

line 82: "   7.3_v14 (Vim 7.3.1246): Allow suppressing line number anchors using[J

line 83: "^I^I^I    g:html_line_ids=0. Allow customizing[J

line 84: "^I^I^I    important IDs (like line IDs and fold IDs) using[J

line 85: "^I^I^I    g:html_id_expr evalutated when the buffer conversion[J

line 86: "^I^I^I    is started.[J

line 87: "   7.3_v13 (Vim 7.3.1088): Keep foldmethod at manual in the generated file and[J

line 88: "^I^I^I    insert modeline to set it to manual.[J

line 89: "^I^I^I    Fix bug: diff mode with 2 unsaved buffers creates a[J

line 90: "^I^I^I    duplicate of one buffer instead of including both.[J

line 91: "^I^I^I    Add anchors to each line so you can put '#L123'[J

line 92: "^I^I^I    or '#123' at the end of the URL to jump to line 123[J

line 93: "^I^I^I    (idea by Andy Spencer). Add javascript to open folds[J

line 94: "^I^I^I    to show the anchor being jumped to if it is hidden.[J

line 95: "^I^I^I    Fix XML validation error: &nsbp; not part of XML.[J

line 96: "^I^I^I    Allow TOhtml to chain together with other commands[J

line 97: "^I^I^I    using |.[J

line 98: "   7.3_v12 (Vim 7.3.0616): Fix modeline mangling to also work for when multiple[J

line 99: "^I^I^I    highlight groups make up the start-of-modeline text.[J

line 100: "^I^I^I    Improve render time of page with uncopyable regions[J

line 101: "^I^I^I    by not using one-input-per-char. Change name of[J

line 102: "^I^I^I    uncopyable option from html_unselectable to[J

line 103: "^I^I^I    html_prevent_copy. Added html_no_invalid option and[J

line 104: "^I^I^I    default to inserting invalid markup for uncopyable[J

line 105: "^I^I^I    regions to prevent MS Word from pasting undeletable[J

line 106: "^I^I^I    <input> elements. Fix 'cpo' handling (Thilo Six).[J

line 107: "^I^I 7.3_v12b1: Add html_unselectable option. Rework logic to[J

line 108: "^I^I^I    eliminate post-processing substitute commands in[J

line 109: "^I^I^I    favor of doing the work up front. Remove unnecessary[J

line 110: "^I^I^I    special treatment of 'LineNr' highlight group. Minor[J

line 111: "^I^I^I    speed improvements. Fix modeline mangling in[J

line 112: "^I^I^I    generated output so it works for text in the first[J

line 113: "^I^I^I    column. Fix missing line number and fold column in[J

line 114: "^I^I^I    diff filler lines. Fix that some fonts have a 1px[J

line 115: "^I^I^I    gap (using a dirty hack, improvements welcome). Add[J

line 116: "^I^I^I    "colorscheme" meta tag. Does NOT include support for[J

line 117: "^I^I^I    the new default foldtext added in v11, as the patch[J

line 118: "^I^I^I    adding it has not yet been included in Vim.[J

line 119: "   7.3_v11 ( unreleased ): Support new default foldtext from patch by Christian[J

line 120: "^I^I^I    Brabandt in[J

line 121: "^I^I^I    http://groups.google.com/d/topic/vim_dev/B6FSGfq9VoI/discussion.[J

line 122: "^I^I^I    This patch has not yet been included in Vim, thus[J

line 123: "^I^I^I    these changes are removed in the next version.[J

line 124: "   7.3_v10 (Vim 7.3.0227): Fix error E684 when converting a range wholly inside[J

line 125: "^I^I^I    multiple nested folds with dynamic folding on.[J

line 126: "^I^I^I    Also fix problem with foldtext in this situation.[J

line 127: "   7.3_v9  (Vim 7.3.0170): Add html_pre_wrap option active with html_use_css[J

line 128: "^I^I^I    and without html_no_pre, default value same as[J

line 129: "^I^I^I    'wrap' option, (Andy Spencer). Don't use[J

line 130: "^I^I^I    'fileencoding' for converted document encoding if[J

line 131: "^I^I^I    'buftype' indicates a special buffer which isn't[J

line 132: "^I^I^I    written.[J

line 133: "   7.3_v8  (Vim 7.3.0100): Add html_expand_tabs option to allow leaving tab[J

line 134: "^I^I^I    characters in generated output (Andy Spencer).[J

line 135: "^I^I^I    Escape text that looks like a modeline so Vim[J

line 136: "^I^I^I    doesn't use anything in the converted HTML as a[J

line 137: "^I^I^I    modeline. Bugfixes: Fix folding when a fold starts[J

line 138: "^I^I^I    before the conversion range. Remove fold column when[J

line 139: "^I^I^I    there are no folds.[J

line 140: "   7.3_v7  (Vim 7-3-0063): see betas released on vim_dev below:[J

line 141: "^I^I  7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.[J

line 142: "^I^I  7.3_v7b2: Remove automatic detection of encodings that are not[J

line 143: "^I^I^I    supported by all major browsers according to[J

line 144: "^I^I^I    http://wiki.whatwg.org/wiki/Web_Encodings and[J

line 145: "^I^I^I    convert to UTF-8 for all Unicode encodings. Make[J

line 146: "^I^I^I    HTML encoding to Vim encoding detection be[J

line 147: "^I^I^I    case-insensitive for built-in pairs.[J

line 148: "^I^I  7.3_v7b1: Remove use of setwinvar() function which cannot be[J

line 149: "^I^I^I    called in restricted mode (Andy Spencer). Use[J

line 150: "^I^I^I    'fencoding' instead of 'encoding' to determine by[J

line 151: "^I^I^I    charset, and make sure the 'fenc' of the generated[J

line 152: "^I^I^I    file matches its indicated charset. Add charsets for[J

line 153: "^I^I^I    all of Vim's natively supported encodings.[J

line 154: "   7.3_v6  (Vim 7.3.0000): Really fix bug with 'nowrapscan', 'magic' and other[J

line 155: "^I^I^I    user settings interfering with diff mode generation,[J

line 156: "^I^I^I    trailing whitespace (e.g. line number column) when[J

line 157: "^I^I^I    using html_no_pre, and bugs when using[J

line 158: "^I^I^I    html_hover_unfold.[J

line 159: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync[J

line 160: "^I^I^I    folds in diff mode when first line was folded.[J

line 161: "   7.3_v4  (Vim 7.3.0000): Bugfixes, especially for xhtml markup, and diff mode[J

line 162: "   7.3_v3  (Vim 7.3.0000): Refactor option handling and make html_use_css[J

line 163: "^I^I^I    default to true when not set to anything. Use strict[J

line 164: "^I^I^I    doctypes where possible. Rename use_xhtml option to[J

line 165: "^I^I^I    html_use_xhtml for consistency. Use .xhtml extension[J

line 166: "^I^I^I    when using this option. Add meta tag for settings.[J

line 167: "   7.3_v2  (Vim 7.3.0000): Fix syntax highlighting in diff mode to use both the[J

line 168: "^I^I^I    diff colors and the normal syntax colors[J

line 169: "   7.3_v1  (Vim 7.3.0000): Add conceal support and meta tags in output[J

line 170: "}}}[J

line 171: "}}}[J

line 172: [J

line 173: " Define the :TOhtml command when:[J

line 174: " - 'compatible' is not set[J

line 175: " - this plugin was not already loaded[J

line 176: " - user commands are available. {{{[J

line 177: if !&cp && !exists(":TOhtml") && has("user_commands")[J

line 178:   command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)[J

line 179: endif "}}}[J

line 180: [J

line 181: " Make sure any patches will probably use consistent indent[J

line 182: "   vim: ts=8 sw=2 sts=2 noet fdm=marker[J

finished sourcing /usr/local/share/vim/vim80/plugin/tohtml.vim[J
chdir(/usr/local/share/vim/vim80/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/local/share/vim/vim80/plugin/vimballPlugin.vim"[J
line 1: " vimballPlugin : construct a file containing both paths and files[J

line 2: " Author: Charles E. Campbell[J

line 3: " Copyright: (c) 2004-2014 by Charles E. Campbell[J

line 4: "            The VIM LICENSE applies to Vimball.vim, and Vimball.txt[J

line 5: "            (see |copyright|) except use "Vimball" instead of "Vim".[J

line 6: "            No warranty, express or implied.[J

line 7: "  *** ***   Use At-Your-Own-Risk!   *** ***[J

line 8: "[J

line 9: " (Rom 2:1 WEB) Therefore you are without excuse, O man, whoever you are who[J

line 10: "      judge. For in that which you judge another, you condemn yourself. For[J

line 11: "      you who judge practice the same things.[J

line 12: " GetLatestVimScripts: 1502 1 :AutoInstall: vimball.vim[J

line 13: [J

line 14: " ---------------------------------------------------------------------[J

line 15: "  Load Once: {{{1[J

line 16: if &cp || exists("g:loaded_vimballPlugin")[J

line 17:  finish[J

line 18: endif[J

line 19: let g:loaded_vimballPlugin = "v37"[J

line 20: let s:keepcpo              = &cpo[J

line 21: set cpo&vim[J

line 22: [J

line 23: " ------------------------------------------------------------------------------[J

line 24: " Public Interface: {{{1[J

line 25: com! -range   -complete=file -nargs=+ -bang MkVimball^I^Icall vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)[J

line 26: com! -nargs=? -complete=dir  UseVimball^I^I^I^I^I^Icall vimball#Vimball(1,<f-args>)[J

line 27: com! -nargs=0                VimballList^I^I^I^I^Icall vimball#Vimball(0)[J

line 28: com! -nargs=* -complete=dir  RmVimball^I^I^I^I^I^Icall vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()[J

line 29: augroup Vimball[J

line 30:  au![J

line 31:  au BufEnter  *.vba,*.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|if line('$') > 1|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")|endif[J

line 32:  au SourceCmd *.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^I^I^Ilet s:origfile=expand("%")|if expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if s:origfile!=expand("<afile>")|close|endif[J

line 33:  au SourceCmd *.vba^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif[J

line 34:  au BufEnter  *.vmb,*.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|if line('$') > 1|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")|endif[J

line 35:  au SourceCmd *.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^I^I^Ilet s:origfile=expand("%")|if expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if s:origfile!=expand("<afile>")|close|endif[J

line 36:  au SourceCmd *.vmb^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif[J

line 37: augroup END[J

line 38: [J

line 39: " =====================================================================[J

line 40: " Restoration And Modelines: {{{1[J

line 41: " vim: fdm=marker[J

line 42: let &cpo= s:keepcpo[J

line 43: unlet s:keepcpo[J

finished sourcing /usr/local/share/vim/vim80/plugin/vimballPlugin.vim[J
chdir(/usr/local/share/vim/vim80/plugin)[J
fchdir() to previous dir[J
sourcing "/usr/local/share/vim/vim80/plugin/zipPlugin.vim"[J
line 1: " zipPlugin.vim: Handles browsing zipfiles[J

line 2: "            PLUGIN PORTION[J

line 3: " Date:^I^I^ISep 13, 2016[J

line 4: " Maintainer:^ICharles E Campbell <NdrOchip@ScampbellPfamily.AbizM-NOSPAM>[J

line 5: " License:^I^IVim License  (see vim's :help license)[J

line 6: " Copyright:    Copyright (C) 2005-2016 Charles E. Campbell {{{1[J

line 7: "               Permission is hereby granted to use and distribute this code,[J

line 8: "               with or without modifications, provided that this copyright[J

line 9: "               notice is copied with it. Like anything else that's free,[J

line 10: "               zipPlugin.vim is provided *as is* and comes with no warranty[J

line 11: "               of any kind, either expressed or implied. By using this[J

line 12: "               plugin, you agree that in no event will the copyright[J

line 13: "               holder be liable for any damages resulting from the use[J

line 14: "               of this software.[J

line 15: "[J

line 16: " (James 4:8 WEB) Draw near to God, and he will draw near to you.[J

line 17: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.[J

line 18: " ---------------------------------------------------------------------[J

line 19: " Load Once: {{{1[J

line 20: if &cp || exists("g:loaded_zipPlugin")[J

line 21:  finish[J

line 22: endif[J

line 23: let g:loaded_zipPlugin = "v28"[J

line 24: let s:keepcpo          = &cpo[J

line 25: set cpo&vim[J

line 26: [J

line 27: " ---------------------------------------------------------------------[J

line 28: " Options: {{{1[J

line 29: if !exists("g:zipPlugin_ext")[J

line 30:  let g:zipPlugin_ext='*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'[J

line 31: endif[J

line 32: [J

line 33: " ---------------------------------------------------------------------[J

line 34: " Public Interface: {{{1[J

line 35: augroup zip[J

line 36:  au![J

line 37:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)[J

line 38:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)[J

line 39:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))[J

line 40:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))[J

line 41: [J

line 42:  if has("unix")[J

line 43:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)[J

line 44:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)[J

line 45:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))[J

line 46:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))[J

line 47:  endif[J

line 48: [J

line 49:  exe "au BufReadCmd ".g:zipPlugin_ext.' call zip#Browse(expand("<amatch>"))'[J

line 49: au BufReadCmd *.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip call zip#Browse(expand("<amatch>"))[J

line 50: augroup END[J

line 51: [J

line 52: " ---------------------------------------------------------------------[J

line 53: "  Restoration And Modelines: {{{1[J

line 54: "  vim: fdm=marker[J

line 55: let &cpo= s:keepcpo[J

line 56: unlet s:keepcpo[J

finished sourcing /usr/local/share/vim/vim80/plugin/zipPlugin.vim[J
Searching for "pack/*/start/*" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/home/withon/.vim/pack/*/start/*"[J
Searching for "/usr/local/share/vim/vimfiles/pack/*/start/*"[J
Searching for "/usr/local/share/vim/vim80/pack/*/start/*"[J
Searching for "/usr/local/share/vim/vimfiles/after/pack/*/start/*"[J
Searching for "/home/withon/.vim/after/pack/*/start/*"[J
not found in 'packpath': "pack/*/start/*"[J
Searching for "plugin/**/*.vim" in "/home/withon/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,/home/withon/.vim/after"[J
Searching for "/usr/local/share/vim/vimfiles/after/plugin/**/*.vim"[J
Searching for "/home/withon/.vim/after/plugin/**/*.vim"[J
not found in 'runtimepath': "plugin/**/*.vim"[J
Reading viminfo file "/home/withon/.viminfo" info oldfiles[J[?1000h[?2004h
Press ENTER or type command to continue[?1000l[?25h[?1000h[?1049h[?1h=[?2004h[1;42r[?12h[?12l[27m[23m[29m[m[H[2J[?25l[42;1HExecuting BufEnter Auto commands for "*"
autocommand call <SID>DEBUG('-=> BufEnter  AutoCmd', 10) |call <SID>AutoUpdate(-1)
line 0: call <SID>DEBUG('-=> BufEnter  AutoCmd', 10) |call <SID>AutoUpdate(-1)
calling function <SNR>10_DEBUG('-=> BufEnter  AutoCmd', 10)
line 1:
line 2:   if g:miniBufExplorerDebugLevel >= a:level
line 3:
line 4:     " Prevent a report of our actions from showing up.
line 5:     let l:save_rep    = &report
line 6:     let l:save_sc     = &showcmd
line 7:     let &report[7C= 10000
line 8:     set noshowcmd
line 9:
line 10:     " Debug output to a buffer
line 11:     if g:miniBufExplorerDebugMode == 0
line 12:[9C" Save the current window number so we can come back here
line 13:[9Clet l:prevWin     = winnr()
line 14:[9Cwincmd p
line 15:[9Clet l:prevPrevWin = winnr()
line 16:[9Cwincmd p
line 17:
line 18:[9C" Get into the debug window or create it if needed
line 19:[9Ccall <SID>FindCreateWindow('MiniBufExplorer.DBG', 1, 0, 0)
line 20:
line 21:[9C" Make sure we really got to our window, if not we
line 22:[9C" will display a confirm dialog and turn debugging
line 23:[9C" off so that we won't break things even more.
line 24:[9Cif bufname('%') != 'MiniBufExplorer.DBG'
line 25:[13Ccall confirm('Error in window debugging code. Dissabling MiniBufExplorer debugging.', 'OK')
line 26:[13Clet g:miniBufExplorerDebugLevel = 0
line 27:[9Cendif
line 28:
line 29:[9C" Write Message to DBG buffer
line 30:[9Clet res=append("$",s:debugIndex.':'.a:level.':'.a:msg)
line 31:[9Cnorm G
line 32:[9C"set nomodified
line 33:
line 34:[9C" Return to original window
line 35:[9Cexec l:prevPrevWin.' wincmd w'
line 36:[9Cexec l:prevWin.' wincmd w'
line 37:     " Debug output using VIM's echo facility
[?1000l[38;5;121m-- More --[?25h SPACE/d/j: screen/page/line down, b/u/k: up, q: quit [m[42;1H[K[?1000h[42;1H
[?25lfunction <SNR>10_DEBUG aborted
continuing in BufEnter Auto commands for "*"
/[?2004h[?25hn[?25l[27m[23m[29m[m[H[2J[1;1H[96m[48;5;242m     [m[93m  1 [m
[96m[48;5;242m     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     [m[2;6H[94m~                                                                                                                                         [3;6H~                                                                                                                                         [4;6H~                                                                                                                                         [5;6H~                                                                                                                                         [6;6H~                                                                                                                                         [7;6H~                                                                                                                                         [8;6H~                                                                                                                                         [9;6H~                                                                                                                                         [10;6H~                                                                                                                                         [11;6H~                                                                                                                                         [12;6H~                                                                                                                                         [13;6H~                                                                                                                                         [14;6H~                                                                                                                                         [15;6H~                                                                                                                                         [16;6H~                                                                                                                                         [17;6H~                                                                                                                                         [18;6H~                                                                                                                                         [19;6H~                                                                                                                                         [20;6H~                                                                                                                                         [21;6H~                                                                                                                                         [22;6H~                                                                                                                                         [23;6H~                                                                                                                                         [24;6H~                                                                                                                                         [25;6H~                                                                                                                                         [26;6H~                                                                                                                                         [27;6H~                                                                                                                                         [28;6H~                                                                                                                                         [29;6H~                                                                                                                                         [30;6H~                                                                                                                                         [31;6H~                                                                                                                                         [32;6H~                                                                                                                                         [33;6H~                                                                                                                                         [34;6H~                                                                                                                                         [35;6H~                                                                                                                                         [36;6H~                                                                                                                                         [37;6H~                                                                                                                                         [38;6H~                                                                                                                                         [39;6H~                                                                                                                                         [40;6H~                                                                                                                                         [m[41;1H[1m[7m[No Name]                                                                                                                    0,0-1          All[m[15;64HVIM - Vi IMproved[17;64Hversion 8.0.1331[18;60Hby Bram Moolenaar et al.[19;51HVim is open source and freely distributable[21;60HSponsor Vim development![22;49Htype  :help sponsor[38;5;81m<Enter>[m    for information [24;49Htype  :q[38;5;81m<Enter>[m               to exit         [25;49Htype  :help[38;5;81m<Enter>[m  or  [38;5;81m<F1>[m  for on-line help[26;49Htype  :help version8[38;5;81m<Enter>[m   for version info[42;1H/n[?25ho[?25l[15;64H[94m                 [17;64H                [18;60H                        [19;51H                                           [21;60H                        [22;49H                                              [24;49H                                              [25;49H                                              [26;49H                                              [42;4H[?25h[?25l[m[42;3H[K[42;3H[?25h[?25l[42;2H[K[42;2H[?25h:[?25l[?25h[?25l[42;2H[K[42;2H[?25h [?25lExecuting CursorMoved Auto commands for "*"
autocommand call s:Highlight_Matching_Pair()[?1000l
[38;5;121mPress ENTER or type command to continue[?25h[?1000h[m
[?25lline 0: call s:Highlight_Matching_Pair()
calling function <SNR>20_Highlight_Matching_Pair()
line 1:   " Remove any previous match.
line 2:   if exists('w:paren_hl_on') && w:paren_hl_on
line 3:     silent! call matchdelete(3)
line 4:     let w:paren_hl_on = 0
line 5:   endif
line 6:
line 7:   " Avoid that we remove the popup menu.
line 8:   " Return when there are no colors (looks like the cursor jumps).
line 9:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 10:     return
line 11:   endif
line 12:
line 13:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 14:   let c_lnum = line('.')
line 15:   let c_col = col('.')
line 16:   let before = 0
line 17:
line 18:   let text = getline(c_lnum)
line 19:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 20:   if empty(matches)
line 21:     let [c_before, c] = ['', '']
line 22:   else
line 23:     let [c_before, c] = matches[1:2]
line 24:   endif
line 25:   let plist = split(&matchpairs, '.\zs[:,]')
line 26:   let i = index(plist, c)
line 27:   if i < 0
line 28:     " not found, in Insert mode try character before the cursor
line 29:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 30:[7Clet before = strlen(c_before)
line 31:[7Clet c = c_before
line 32:[7Clet i = index(plist, c)
line 33:     endif
line 34:     if i < 0
line 35:[7C" not found, nothing to do
line 36:[7Creturn
function <SNR>20_Highlight_Matching_Pair returning #0
continuing in CursorMoved Auto commands for "*"
[27m[23m[29m[m[H[2J[1;1H[96m[48;5;242m     [m[93m  1 [m
[96m[48;5;242m     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     [m[2;6H[94m~                                                                                                                                         [3;6H~                                                                                                                                         [4;6H~                                                                                                                                         [5;6H~                                                                                                                                         [6;6H~                                                                                                                                         [7;6H~                                                                                                                                         [8;6H~                                                                                                                                         [9;6H~                                                                                                                                         [10;6H~                                                                                                                                         [11;6H~                                                                                                                                         [12;6H~                                                                                                                                         [13;6H~                                                                                                                                         [14;6H~                                                                                                                                         [15;6H~                                                                                                                                         [16;6H~                                                                                                                                         [17;6H~                                                                                                                                         [18;6H~                                                                                                                                         [19;6H~                                                                                                                                         [20;6H~                                                                                                                                         [21;6H~                                                                                                                                         [22;6H~                                                                                                                                         [23;6H~                                                                                                                                         [24;6H~                                                                                                                                         [25;6H~                                                                                                                                         [26;6H~                                                                                                                                         [27;6H~                                                                                                                                         [28;6H~                                                                                                                                         [29;6H~                                                                                                                                         [30;6H~                                                                                                                                         [31;6H~                                                                                                                                         [32;6H~                                                                                                                                         [33;6H~                                                                                                                                         [34;6H~                                                                                                                                         [35;6H~                                                                                                                                         [36;6H~                                                                                                                                         [37;6H~                                                                                                                                         [38;6H~                                                                                                                                         [39;6H~                                                                                                                                         [40;6H~                                                                                                                                         [m[41;1H[1m[7m[No Name]                                                                                                                    0,0-1          All[1;10H[?25h[?25l[42;1H[m:[?2004hq[?25h
[?25lWriting viminfo file "/home/withon/.viminfo"[?1000l[?2004l[?2004l[?1l>[?25h[?1049l
